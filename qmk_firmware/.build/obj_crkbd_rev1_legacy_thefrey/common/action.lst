   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB15:
  15               		.file 1 "tmk_core/common/action.c"
   1:tmk_core/common/action.c **** /*
   2:tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action.c **** 
   4:tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action.c **** (at your option) any later version.
   8:tmk_core/common/action.c **** 
   9:tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action.c **** GNU General Public License for more details.
  13:tmk_core/common/action.c **** 
  14:tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action.c **** */
  17:tmk_core/common/action.c **** #include "host.h"
  18:tmk_core/common/action.c **** #include "keycode.h"
  19:tmk_core/common/action.c **** #include "keyboard.h"
  20:tmk_core/common/action.c **** #include "mousekey.h"
  21:tmk_core/common/action.c **** #include "command.h"
  22:tmk_core/common/action.c **** #include "led.h"
  23:tmk_core/common/action.c **** #include "action_layer.h"
  24:tmk_core/common/action.c **** #include "action_tapping.h"
  25:tmk_core/common/action.c **** #include "action_macro.h"
  26:tmk_core/common/action.c **** #include "action_util.h"
  27:tmk_core/common/action.c **** #include "action.h"
  28:tmk_core/common/action.c **** #include "wait.h"
  29:tmk_core/common/action.c **** 
  30:tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
  31:tmk_core/common/action.c **** #    include "backlight.h"
  32:tmk_core/common/action.c **** #endif
  33:tmk_core/common/action.c **** 
  34:tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  35:tmk_core/common/action.c **** #    include "debug.h"
  36:tmk_core/common/action.c **** #else
  37:tmk_core/common/action.c **** #    include "nodebug.h"
  38:tmk_core/common/action.c **** #endif
  39:tmk_core/common/action.c **** 
  40:tmk_core/common/action.c **** #ifdef POINTING_DEVICE_ENABLE
  41:tmk_core/common/action.c **** #    include "pointing_device.h"
  42:tmk_core/common/action.c **** #endif
  43:tmk_core/common/action.c **** 
  44:tmk_core/common/action.c **** int tp_buttons;
  45:tmk_core/common/action.c **** 
  46:tmk_core/common/action.c **** #if defined(RETRO_TAPPING) || defined(RETRO_TAPPING_PER_KEY)
  47:tmk_core/common/action.c **** int retro_tapping_counter = 0;
  48:tmk_core/common/action.c **** #endif
  49:tmk_core/common/action.c **** 
  50:tmk_core/common/action.c **** #ifdef FAUXCLICKY_ENABLE
  51:tmk_core/common/action.c **** #    include <fauxclicky.h>
  52:tmk_core/common/action.c **** #endif
  53:tmk_core/common/action.c **** 
  54:tmk_core/common/action.c **** #ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
  55:tmk_core/common/action.c **** __attribute__((weak)) bool get_ignore_mod_tap_interrupt(uint16_t keycode, keyrecord_t *record) { re
  56:tmk_core/common/action.c **** #endif
  57:tmk_core/common/action.c **** 
  58:tmk_core/common/action.c **** #ifdef RETRO_TAPPING_PER_KEY
  59:tmk_core/common/action.c **** __attribute__((weak)) bool get_retro_tapping(uint16_t keycode, keyrecord_t *record) { return false;
  60:tmk_core/common/action.c **** #endif
  61:tmk_core/common/action.c **** 
  62:tmk_core/common/action.c **** #ifndef TAP_CODE_DELAY
  63:tmk_core/common/action.c **** #    define TAP_CODE_DELAY 0
  64:tmk_core/common/action.c **** #endif
  65:tmk_core/common/action.c **** #ifndef TAP_HOLD_CAPS_DELAY
  66:tmk_core/common/action.c **** #    define TAP_HOLD_CAPS_DELAY 80
  67:tmk_core/common/action.c **** #endif
  68:tmk_core/common/action.c **** /** \brief Called to execute an action.
  69:tmk_core/common/action.c ****  *
  70:tmk_core/common/action.c ****  * FIXME: Needs documentation.
  71:tmk_core/common/action.c ****  */
  72:tmk_core/common/action.c **** void action_exec(keyevent_t event) {
  16               		.loc 1 72 36 view -0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  47               	.LVL0:
  73:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  48               		.loc 1 73 5 view .LVU1
  74:tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  75:tmk_core/common/action.c ****         dprint("EVENT: ");
  76:tmk_core/common/action.c ****         debug_event(event);
  77:tmk_core/common/action.c ****         dprintln();
  49               		.loc 1 77 19 view .LVU2
  78:tmk_core/common/action.c **** #if defined(RETRO_TAPPING) || defined(RETRO_TAPPING_PER_KEY)
  79:tmk_core/common/action.c ****         retro_tapping_counter++;
  80:tmk_core/common/action.c **** #endif
  81:tmk_core/common/action.c ****     }
  82:tmk_core/common/action.c **** 
  83:tmk_core/common/action.c **** #ifdef FAUXCLICKY_ENABLE
  84:tmk_core/common/action.c ****     if (IS_PRESSED(event)) {
  85:tmk_core/common/action.c ****         FAUXCLICKY_ACTION_PRESS;
  86:tmk_core/common/action.c ****     }
  87:tmk_core/common/action.c ****     if (IS_RELEASED(event)) {
  88:tmk_core/common/action.c ****         FAUXCLICKY_ACTION_RELEASE;
  89:tmk_core/common/action.c ****     }
  90:tmk_core/common/action.c ****     fauxclicky_check();
  91:tmk_core/common/action.c **** #endif
  92:tmk_core/common/action.c **** 
  93:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
  94:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  95:tmk_core/common/action.c ****         process_hand_swap(&event);
  96:tmk_core/common/action.c ****     }
  97:tmk_core/common/action.c **** #endif
  98:tmk_core/common/action.c **** 
  99:tmk_core/common/action.c ****     keyrecord_t record = {.event = event};
  50               		.loc 1 99 5 view .LVU3
  51               		.loc 1 99 17 is_stmt 0 view .LVU4
  52 001e 1E82      		std Y+6,__zero_reg__
  53 0020 1D82      		std Y+5,__zero_reg__
  54 0022 85E0      		ldi r24,lo8(5)
  55 0024 FE01      		movw r30,r28
  56 0026 3796      		adiw r30,7
  57 0028 DE01      		movw r26,r28
  58 002a 1196      		adiw r26,1
  59               		0:
  60 002c 0190      		ld r0,Z+
  61 002e 0D92      		st X+,r0
  62 0030 8A95      		dec r24
  63 0032 01F4      		brne 0b
 100:tmk_core/common/action.c **** 
 101:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 102:tmk_core/common/action.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 103:tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
 104:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 105:tmk_core/common/action.c ****     }
 106:tmk_core/common/action.c ****     if (has_oneshot_mods_timed_out()) {
 107:tmk_core/common/action.c ****         clear_oneshot_mods();
 108:tmk_core/common/action.c ****     }
 109:tmk_core/common/action.c **** #        ifdef SWAP_HANDS_ENABLE
 110:tmk_core/common/action.c ****     if (has_oneshot_swaphands_timed_out()) {
 111:tmk_core/common/action.c ****         clear_oneshot_swaphands();
 112:tmk_core/common/action.c ****     }
 113:tmk_core/common/action.c **** #        endif
 114:tmk_core/common/action.c **** #    endif
 115:tmk_core/common/action.c **** #endif
 116:tmk_core/common/action.c **** 
 117:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 118:tmk_core/common/action.c ****     action_tapping_process(record);
  64               		.loc 1 118 5 is_stmt 1 view .LVU5
  65 0034 4981      		ldd r20,Y+1
  66               	.LVL1:
  67               		.loc 1 118 5 is_stmt 0 view .LVU6
  68 0036 5A81      		ldd r21,Y+2
  69               	.LVL2:
  70               		.loc 1 118 5 view .LVU7
  71 0038 6B81      		ldd r22,Y+3
  72 003a 7C81      		ldd r23,Y+4
  73 003c 8D81      		ldd r24,Y+5
  74 003e 9E81      		ldd r25,Y+6
  75               	/* epilogue start */
 119:tmk_core/common/action.c **** #else
 120:tmk_core/common/action.c ****     process_record(&record);
 121:tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
 122:tmk_core/common/action.c ****         dprint("processed: ");
 123:tmk_core/common/action.c ****         debug_record(record);
 124:tmk_core/common/action.c ****         dprintln();
 125:tmk_core/common/action.c ****     }
 126:tmk_core/common/action.c **** #endif
 127:tmk_core/common/action.c **** }
  76               		.loc 1 127 1 view .LVU8
  77 0040 2B96      		adiw r28,11
  78 0042 0FB6      		in __tmp_reg__,__SREG__
  79 0044 F894      		cli
  80 0046 DEBF      		out __SP_H__,r29
  81 0048 0FBE      		out __SREG__,__tmp_reg__
  82 004a CDBF      		out __SP_L__,r28
  83 004c DF91      		pop r29
  84 004e CF91      		pop r28
 118:tmk_core/common/action.c **** #else
  85               		.loc 1 118 5 view .LVU9
  86 0050 0C94 0000 		jmp action_tapping_process
  87               	.LVL3:
  88               		.cfi_endproc
  89               	.LFE15:
  91               		.section	.text.process_record_quantum,"ax",@progbits
  92               		.weak	process_record_quantum
  94               	process_record_quantum:
  95               	.LVL4:
  96               	.LFB17:
 128:tmk_core/common/action.c **** 
 129:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 130:tmk_core/common/action.c **** bool swap_hands = false;
 131:tmk_core/common/action.c **** bool swap_held  = false;
 132:tmk_core/common/action.c **** 
 133:tmk_core/common/action.c **** /** \brief Process Hand Swap
 134:tmk_core/common/action.c ****  *
 135:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 136:tmk_core/common/action.c ****  */
 137:tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
 138:tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
 139:tmk_core/common/action.c **** 
 140:tmk_core/common/action.c ****     keypos_t         pos     = event->key;
 141:tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1 << pos.col;
 142:tmk_core/common/action.c ****     bool             do_swap = event->pressed ? swap_hands : swap_state[pos.row] & (col_bit);
 143:tmk_core/common/action.c **** 
 144:tmk_core/common/action.c ****     if (do_swap) {
 145:tmk_core/common/action.c ****         event->key = hand_swap_config[pos.row][pos.col];
 146:tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
 147:tmk_core/common/action.c ****     } else {
 148:tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
 149:tmk_core/common/action.c ****     }
 150:tmk_core/common/action.c **** }
 151:tmk_core/common/action.c **** #endif
 152:tmk_core/common/action.c **** 
 153:tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 154:tmk_core/common/action.c **** bool disable_action_cache = false;
 155:tmk_core/common/action.c **** 
 156:tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record) {
 157:tmk_core/common/action.c ****     disable_action_cache = true;
 158:tmk_core/common/action.c ****     process_record(record);
 159:tmk_core/common/action.c ****     disable_action_cache = false;
 160:tmk_core/common/action.c **** }
 161:tmk_core/common/action.c **** #else
 162:tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record) { process_record(record); }
 163:tmk_core/common/action.c **** #endif
 164:tmk_core/common/action.c **** 
 165:tmk_core/common/action.c **** __attribute__((weak)) bool process_record_quantum(keyrecord_t *record) { return true; }
  97               		.loc 1 165 72 is_stmt 1 view -0
  98               		.cfi_startproc
  99               	/* prologue: function */
 100               	/* frame size = 0 */
 101               	/* stack size = 0 */
 102               	.L__stack_usage = 0
 103               		.loc 1 165 74 view .LVU11
 104               		.loc 1 165 1 is_stmt 0 view .LVU12
 105 0000 81E0      		ldi r24,lo8(1)
 106               	.LVL5:
 107               	/* epilogue start */
 108               		.loc 1 165 1 view .LVU13
 109 0002 0895      		ret
 110               		.cfi_endproc
 111               	.LFE17:
 113               		.section	.text.post_process_record_quantum,"ax",@progbits
 114               		.weak	post_process_record_quantum
 116               	post_process_record_quantum:
 117               	.LVL6:
 118               	.LFB18:
 166:tmk_core/common/action.c **** 
 167:tmk_core/common/action.c **** __attribute__((weak)) void post_process_record_quantum(keyrecord_t *record) {}
 119               		.loc 1 167 77 is_stmt 1 view -0
 120               		.cfi_startproc
 121               	/* prologue: function */
 122               	/* frame size = 0 */
 123               	/* stack size = 0 */
 124               	.L__stack_usage = 0
 125               		.loc 1 167 78 view .LVU15
 126               	/* epilogue start */
 127               		.loc 1 167 1 is_stmt 0 view .LVU16
 128 0000 0895      		ret
 129               		.cfi_endproc
 130               	.LFE18:
 132               		.section	.text.process_record_tap_hint,"ax",@progbits
 133               	.global	process_record_tap_hint
 135               	process_record_tap_hint:
 136               	.LVL7:
 137               	.LFB19:
 168:tmk_core/common/action.c **** 
 169:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 170:tmk_core/common/action.c **** /** \brief Allows for handling tap-hold actions immediately instead of waiting for TAPPING_TERM or 
 171:tmk_core/common/action.c ****  *
 172:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 173:tmk_core/common/action.c ****  */
 174:tmk_core/common/action.c **** void process_record_tap_hint(keyrecord_t *record) {
 138               		.loc 1 174 51 is_stmt 1 view -0
 139               		.cfi_startproc
 140               	/* prologue: function */
 141               	/* frame size = 0 */
 142               	/* stack size = 0 */
 143               	.L__stack_usage = 0
 175:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(record->event.key);
 144               		.loc 1 175 5 view .LVU18
 145               		.loc 1 175 23 is_stmt 0 view .LVU19
 146 0000 FC01      		movw r30,r24
 147 0002 8081      		ld r24,Z
 148 0004 9181      		ldd r25,Z+1
 149               	.LVL8:
 150               		.loc 1 175 23 view .LVU20
 151 0006 0C94 0000 		jmp layer_switch_get_action
 152               	.LVL9:
 153               		.loc 1 175 23 view .LVU21
 154               		.cfi_endproc
 155               	.LFE19:
 157               		.section	.text.register_code,"ax",@progbits
 158               	.global	register_code
 160               	register_code:
 161               	.LVL10:
 162               	.LFB23:
 176:tmk_core/common/action.c **** 
 177:tmk_core/common/action.c ****     switch (action.kind.id) {
 178:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 179:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 180:tmk_core/common/action.c ****             switch (action.swap.code) {
 181:tmk_core/common/action.c ****                 case OP_SH_ONESHOT:
 182:tmk_core/common/action.c ****                     break;
 183:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 184:tmk_core/common/action.c ****                 default:
 185:tmk_core/common/action.c ****                     swap_hands = !swap_hands;
 186:tmk_core/common/action.c ****                     swap_held  = true;
 187:tmk_core/common/action.c ****             }
 188:tmk_core/common/action.c ****             break;
 189:tmk_core/common/action.c **** #    endif
 190:tmk_core/common/action.c ****     }
 191:tmk_core/common/action.c **** }
 192:tmk_core/common/action.c **** #endif
 193:tmk_core/common/action.c **** 
 194:tmk_core/common/action.c **** /** \brief Take a key event (key press or key release) and processes it.
 195:tmk_core/common/action.c ****  *
 196:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 197:tmk_core/common/action.c ****  */
 198:tmk_core/common/action.c **** void process_record(keyrecord_t *record) {
 199:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 200:tmk_core/common/action.c ****         return;
 201:tmk_core/common/action.c ****     }
 202:tmk_core/common/action.c **** 
 203:tmk_core/common/action.c ****     if (!process_record_quantum(record)) {
 204:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 205:tmk_core/common/action.c ****         if (is_oneshot_layer_active() && record->event.pressed) {
 206:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 207:tmk_core/common/action.c ****         }
 208:tmk_core/common/action.c **** #endif
 209:tmk_core/common/action.c ****         return;
 210:tmk_core/common/action.c ****     }
 211:tmk_core/common/action.c **** 
 212:tmk_core/common/action.c ****     process_record_handler(record);
 213:tmk_core/common/action.c ****     post_process_record_quantum(record);
 214:tmk_core/common/action.c **** }
 215:tmk_core/common/action.c **** 
 216:tmk_core/common/action.c **** void process_record_handler(keyrecord_t *record) {
 217:tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 218:tmk_core/common/action.c ****     dprint("ACTION: ");
 219:tmk_core/common/action.c ****     debug_action(action);
 220:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 221:tmk_core/common/action.c ****     dprint(" layer_state: ");
 222:tmk_core/common/action.c ****     layer_debug();
 223:tmk_core/common/action.c ****     dprint(" default_layer_state: ");
 224:tmk_core/common/action.c ****     default_layer_debug();
 225:tmk_core/common/action.c **** #endif
 226:tmk_core/common/action.c ****     dprintln();
 227:tmk_core/common/action.c **** 
 228:tmk_core/common/action.c ****     process_action(record, action);
 229:tmk_core/common/action.c **** }
 230:tmk_core/common/action.c **** 
 231:tmk_core/common/action.c **** #if defined(PS2_MOUSE_ENABLE) || defined(POINTING_DEVICE_ENABLE)
 232:tmk_core/common/action.c **** void register_button(bool pressed, enum mouse_buttons button) {
 233:tmk_core/common/action.c **** #    ifdef PS2_MOUSE_ENABLE
 234:tmk_core/common/action.c ****     tp_buttons = pressed ? tp_buttons | button : tp_buttons & ~button;
 235:tmk_core/common/action.c **** #    endif
 236:tmk_core/common/action.c **** #    ifdef POINTING_DEVICE_ENABLE
 237:tmk_core/common/action.c ****     report_mouse_t currentReport = pointing_device_get_report();
 238:tmk_core/common/action.c ****     currentReport.buttons        = pressed ? currentReport.buttons | button : currentReport.buttons
 239:tmk_core/common/action.c ****     pointing_device_set_report(currentReport);
 240:tmk_core/common/action.c **** #    endif
 241:tmk_core/common/action.c **** }
 242:tmk_core/common/action.c **** #endif
 243:tmk_core/common/action.c **** 
 244:tmk_core/common/action.c **** /** \brief Take an action and processes it.
 245:tmk_core/common/action.c ****  *
 246:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 247:tmk_core/common/action.c ****  */
 248:tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action) {
 249:tmk_core/common/action.c ****     keyevent_t event = record->event;
 250:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 251:tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 252:tmk_core/common/action.c **** #endif
 253:tmk_core/common/action.c **** 
 254:tmk_core/common/action.c ****     if (event.pressed) {
 255:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 256:tmk_core/common/action.c ****         clear_weak_mods();
 257:tmk_core/common/action.c ****     }
 258:tmk_core/common/action.c **** 
 259:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 260:tmk_core/common/action.c ****     bool do_release_oneshot = false;
 261:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 262:tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && (action.kind.id == ACT_USAGE || !IS_MOD(actio
 263:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 264:tmk_core/common/action.c ****         && !(action.kind.id == ACT_SWAP_HANDS && action.swap.code == OP_SH_ONESHOT)
 265:tmk_core/common/action.c **** #    endif
 266:tmk_core/common/action.c ****     ) {
 267:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 268:tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 269:tmk_core/common/action.c ****     }
 270:tmk_core/common/action.c **** #endif
 271:tmk_core/common/action.c **** 
 272:tmk_core/common/action.c ****     switch (action.kind.id) {
 273:tmk_core/common/action.c ****         /* Key and Mods */
 274:tmk_core/common/action.c ****         case ACT_LMODS:
 275:tmk_core/common/action.c ****         case ACT_RMODS: {
 276:tmk_core/common/action.c ****             uint8_t mods = (action.kind.id == ACT_LMODS) ? action.key.mods : action.key.mods << 4;
 277:tmk_core/common/action.c ****             if (event.pressed) {
 278:tmk_core/common/action.c ****                 if (mods) {
 279:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 280:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 281:tmk_core/common/action.c ****                         // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSFT).
 282:tmk_core/common/action.c ****                         // Same applies for some keys like KC_MEH which are declared as MEH(KC_NO).
 283:tmk_core/common/action.c ****                         add_mods(mods);
 284:tmk_core/common/action.c ****                     } else {
 285:tmk_core/common/action.c ****                         add_weak_mods(mods);
 286:tmk_core/common/action.c ****                     }
 287:tmk_core/common/action.c ****                     send_keyboard_report();
 288:tmk_core/common/action.c ****                 }
 289:tmk_core/common/action.c ****                 register_code(action.key.code);
 290:tmk_core/common/action.c ****             } else {
 291:tmk_core/common/action.c ****                 unregister_code(action.key.code);
 292:tmk_core/common/action.c ****                 if (mods) {
 293:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 294:tmk_core/common/action.c ****                         del_mods(mods);
 295:tmk_core/common/action.c ****                     } else {
 296:tmk_core/common/action.c ****                         del_weak_mods(mods);
 297:tmk_core/common/action.c ****                     }
 298:tmk_core/common/action.c ****                     send_keyboard_report();
 299:tmk_core/common/action.c ****                 }
 300:tmk_core/common/action.c ****             }
 301:tmk_core/common/action.c ****         } break;
 302:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 303:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 304:tmk_core/common/action.c ****         case ACT_RMODS_TAP: {
 305:tmk_core/common/action.c ****             uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ? action.key.mods : action.key.mods <<
 306:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 307:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 308:tmk_core/common/action.c ****                 case MODS_ONESHOT:
 309:tmk_core/common/action.c ****                     // Oneshot modifier
 310:tmk_core/common/action.c ****                     if (event.pressed) {
 311:tmk_core/common/action.c ****                         if (tap_count == 0) {
 312:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 313:tmk_core/common/action.c ****                             register_mods(mods | get_oneshot_mods());
 314:tmk_core/common/action.c ****                         } else if (tap_count == 1) {
 315:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 316:tmk_core/common/action.c ****                             set_oneshot_mods(mods | get_oneshot_mods());
 317:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 318:tmk_core/common/action.c ****                         } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 319:tmk_core/common/action.c ****                             dprint("MODS_TAP: Toggling oneshot");
 320:tmk_core/common/action.c ****                             clear_oneshot_mods();
 321:tmk_core/common/action.c ****                             set_oneshot_locked_mods(mods);
 322:tmk_core/common/action.c ****                             register_mods(mods);
 323:tmk_core/common/action.c **** #        endif
 324:tmk_core/common/action.c ****                         } else {
 325:tmk_core/common/action.c ****                             register_mods(mods | get_oneshot_mods());
 326:tmk_core/common/action.c ****                         }
 327:tmk_core/common/action.c ****                     } else {
 328:tmk_core/common/action.c ****                         if (tap_count == 0) {
 329:tmk_core/common/action.c ****                             clear_oneshot_mods();
 330:tmk_core/common/action.c ****                             unregister_mods(mods);
 331:tmk_core/common/action.c ****                         } else if (tap_count == 1) {
 332:tmk_core/common/action.c ****                             // Retain Oneshot mods
 333:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 334:tmk_core/common/action.c ****                             if (mods & get_mods()) {
 335:tmk_core/common/action.c ****                                 clear_oneshot_locked_mods();
 336:tmk_core/common/action.c ****                                 clear_oneshot_mods();
 337:tmk_core/common/action.c ****                                 unregister_mods(mods);
 338:tmk_core/common/action.c ****                             }
 339:tmk_core/common/action.c ****                         } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 340:tmk_core/common/action.c ****                             // Toggle Oneshot Layer
 341:tmk_core/common/action.c **** #        endif
 342:tmk_core/common/action.c ****                         } else {
 343:tmk_core/common/action.c ****                             clear_oneshot_mods();
 344:tmk_core/common/action.c ****                             unregister_mods(mods);
 345:tmk_core/common/action.c ****                         }
 346:tmk_core/common/action.c ****                     }
 347:tmk_core/common/action.c ****                     break;
 348:tmk_core/common/action.c **** #    endif
 349:tmk_core/common/action.c ****                 case MODS_TAP_TOGGLE:
 350:tmk_core/common/action.c ****                     if (event.pressed) {
 351:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 352:tmk_core/common/action.c ****                             register_mods(mods);
 353:tmk_core/common/action.c ****                         }
 354:tmk_core/common/action.c ****                     } else {
 355:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 356:tmk_core/common/action.c ****                             unregister_mods(mods);
 357:tmk_core/common/action.c ****                         }
 358:tmk_core/common/action.c ****                     }
 359:tmk_core/common/action.c ****                     break;
 360:tmk_core/common/action.c ****                 default:
 361:tmk_core/common/action.c ****                     if (event.pressed) {
 362:tmk_core/common/action.c ****                         if (tap_count > 0) {
 363:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 364:tmk_core/common/action.c ****                             if (
 365:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 366:tmk_core/common/action.c ****                                 !get_ignore_mod_tap_interrupt(get_event_keycode(record->event, fals
 367:tmk_core/common/action.c **** #        endif
 368:tmk_core/common/action.c ****                                 record->tap.interrupted) {
 369:tmk_core/common/action.c ****                                 dprint("mods_tap: tap: cancel: add_mods\n");
 370:tmk_core/common/action.c ****                                 // ad hoc: set 0 to cancel tap
 371:tmk_core/common/action.c ****                                 record->tap.count = 0;
 372:tmk_core/common/action.c ****                                 register_mods(mods);
 373:tmk_core/common/action.c ****                             } else
 374:tmk_core/common/action.c **** #    endif
 375:tmk_core/common/action.c ****                             {
 376:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: register_code\n");
 377:tmk_core/common/action.c ****                                 register_code(action.key.code);
 378:tmk_core/common/action.c ****                             }
 379:tmk_core/common/action.c ****                         } else {
 380:tmk_core/common/action.c ****                             dprint("MODS_TAP: No tap: add_mods\n");
 381:tmk_core/common/action.c ****                             register_mods(mods);
 382:tmk_core/common/action.c ****                         }
 383:tmk_core/common/action.c ****                     } else {
 384:tmk_core/common/action.c ****                         if (tap_count > 0) {
 385:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 386:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 387:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 388:tmk_core/common/action.c ****                             } else {
 389:tmk_core/common/action.c ****                                 wait_ms(TAP_CODE_DELAY);
 390:tmk_core/common/action.c ****                             }
 391:tmk_core/common/action.c ****                             unregister_code(action.key.code);
 392:tmk_core/common/action.c ****                         } else {
 393:tmk_core/common/action.c ****                             dprint("MODS_TAP: No tap: add_mods\n");
 394:tmk_core/common/action.c ****                             unregister_mods(mods);
 395:tmk_core/common/action.c ****                         }
 396:tmk_core/common/action.c ****                     }
 397:tmk_core/common/action.c ****                     break;
 398:tmk_core/common/action.c ****             }
 399:tmk_core/common/action.c ****         } break;
 400:tmk_core/common/action.c **** #endif
 401:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 402:tmk_core/common/action.c ****         /* other HID usage */
 403:tmk_core/common/action.c ****         case ACT_USAGE:
 404:tmk_core/common/action.c ****             switch (action.usage.page) {
 405:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 406:tmk_core/common/action.c ****                     if (event.pressed) {
 407:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 408:tmk_core/common/action.c ****                     } else {
 409:tmk_core/common/action.c ****                         host_system_send(0);
 410:tmk_core/common/action.c ****                     }
 411:tmk_core/common/action.c ****                     break;
 412:tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 413:tmk_core/common/action.c ****                     if (event.pressed) {
 414:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 415:tmk_core/common/action.c ****                     } else {
 416:tmk_core/common/action.c ****                         host_consumer_send(0);
 417:tmk_core/common/action.c ****                     }
 418:tmk_core/common/action.c ****                     break;
 419:tmk_core/common/action.c ****             }
 420:tmk_core/common/action.c ****             break;
 421:tmk_core/common/action.c **** #endif
 422:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 423:tmk_core/common/action.c ****         /* Mouse key */
 424:tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 425:tmk_core/common/action.c ****             if (event.pressed) {
 426:tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 427:tmk_core/common/action.c ****                 switch (action.key.code) {
 428:tmk_core/common/action.c **** #    if defined(PS2_MOUSE_ENABLE) || defined(POINTING_DEVICE_ENABLE)
 429:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 430:tmk_core/common/action.c ****                         register_button(true, MOUSE_BTN1);
 431:tmk_core/common/action.c ****                         break;
 432:tmk_core/common/action.c ****                     case KC_MS_BTN2:
 433:tmk_core/common/action.c ****                         register_button(true, MOUSE_BTN2);
 434:tmk_core/common/action.c ****                         break;
 435:tmk_core/common/action.c ****                     case KC_MS_BTN3:
 436:tmk_core/common/action.c ****                         register_button(true, MOUSE_BTN3);
 437:tmk_core/common/action.c ****                         break;
 438:tmk_core/common/action.c **** #    endif
 439:tmk_core/common/action.c **** #    ifdef POINTING_DEVICE_ENABLE
 440:tmk_core/common/action.c ****                     case KC_MS_BTN4:
 441:tmk_core/common/action.c ****                         register_button(true, MOUSE_BTN4);
 442:tmk_core/common/action.c ****                         break;
 443:tmk_core/common/action.c ****                     case KC_MS_BTN5:
 444:tmk_core/common/action.c ****                         register_button(true, MOUSE_BTN5);
 445:tmk_core/common/action.c ****                         break;
 446:tmk_core/common/action.c **** #    endif
 447:tmk_core/common/action.c ****                     default:
 448:tmk_core/common/action.c ****                         mousekey_send();
 449:tmk_core/common/action.c ****                         break;
 450:tmk_core/common/action.c ****                 }
 451:tmk_core/common/action.c ****             } else {
 452:tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 453:tmk_core/common/action.c ****                 switch (action.key.code) {
 454:tmk_core/common/action.c **** #    if defined(PS2_MOUSE_ENABLE) || defined(POINTING_DEVICE_ENABLE)
 455:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 456:tmk_core/common/action.c ****                         register_button(false, MOUSE_BTN1);
 457:tmk_core/common/action.c ****                         break;
 458:tmk_core/common/action.c ****                     case KC_MS_BTN2:
 459:tmk_core/common/action.c ****                         register_button(false, MOUSE_BTN2);
 460:tmk_core/common/action.c ****                         break;
 461:tmk_core/common/action.c ****                     case KC_MS_BTN3:
 462:tmk_core/common/action.c ****                         register_button(false, MOUSE_BTN3);
 463:tmk_core/common/action.c ****                         break;
 464:tmk_core/common/action.c **** #    endif
 465:tmk_core/common/action.c **** #    ifdef POINTING_DEVICE_ENABLE
 466:tmk_core/common/action.c ****                     case KC_MS_BTN4:
 467:tmk_core/common/action.c ****                         register_button(false, MOUSE_BTN4);
 468:tmk_core/common/action.c ****                         break;
 469:tmk_core/common/action.c ****                     case KC_MS_BTN5:
 470:tmk_core/common/action.c ****                         register_button(false, MOUSE_BTN5);
 471:tmk_core/common/action.c ****                         break;
 472:tmk_core/common/action.c **** #    endif
 473:tmk_core/common/action.c ****                     default:
 474:tmk_core/common/action.c ****                         mousekey_send();
 475:tmk_core/common/action.c ****                         break;
 476:tmk_core/common/action.c ****                 }
 477:tmk_core/common/action.c ****             }
 478:tmk_core/common/action.c ****             break;
 479:tmk_core/common/action.c **** #endif
 480:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 481:tmk_core/common/action.c ****         case ACT_LAYER:
 482:tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 483:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 484:tmk_core/common/action.c ****                 if (!event.pressed) {
 485:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 486:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 487:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 488:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 489:tmk_core/common/action.c ****                         case OP_BIT_AND:
 490:tmk_core/common/action.c ****                             default_layer_and(bits | mask);
 491:tmk_core/common/action.c ****                             break;
 492:tmk_core/common/action.c ****                         case OP_BIT_OR:
 493:tmk_core/common/action.c ****                             default_layer_or(bits | mask);
 494:tmk_core/common/action.c ****                             break;
 495:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 496:tmk_core/common/action.c ****                             default_layer_xor(bits | mask);
 497:tmk_core/common/action.c ****                             break;
 498:tmk_core/common/action.c ****                         case OP_BIT_SET:
 499:tmk_core/common/action.c ****                             default_layer_set(bits | mask);
 500:tmk_core/common/action.c ****                             break;
 501:tmk_core/common/action.c ****                     }
 502:tmk_core/common/action.c ****                 }
 503:tmk_core/common/action.c ****             } else {
 504:tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 505:tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) : (action.layer_bitop.on & O
 506:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 507:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 508:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 509:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 510:tmk_core/common/action.c ****                         case OP_BIT_AND:
 511:tmk_core/common/action.c ****                             layer_and(bits | mask);
 512:tmk_core/common/action.c ****                             break;
 513:tmk_core/common/action.c ****                         case OP_BIT_OR:
 514:tmk_core/common/action.c ****                             layer_or(bits | mask);
 515:tmk_core/common/action.c ****                             break;
 516:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 517:tmk_core/common/action.c ****                             layer_xor(bits | mask);
 518:tmk_core/common/action.c ****                             break;
 519:tmk_core/common/action.c ****                         case OP_BIT_SET:
 520:tmk_core/common/action.c ****                             layer_state_set(bits | mask);
 521:tmk_core/common/action.c ****                             break;
 522:tmk_core/common/action.c ****                     }
 523:tmk_core/common/action.c ****                 }
 524:tmk_core/common/action.c ****             }
 525:tmk_core/common/action.c ****             break;
 526:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
 527:tmk_core/common/action.c ****             if (event.pressed) {
 528:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 529:tmk_core/common/action.c ****                 register_mods(action.layer_mods.mods);
 530:tmk_core/common/action.c ****             } else {
 531:tmk_core/common/action.c ****                 unregister_mods(action.layer_mods.mods);
 532:tmk_core/common/action.c ****                 layer_off(action.layer_mods.layer);
 533:tmk_core/common/action.c ****             }
 534:tmk_core/common/action.c ****             break;
 535:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 536:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 537:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 538:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 539:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 540:tmk_core/common/action.c ****                     /* tap toggle */
 541:tmk_core/common/action.c ****                     if (event.pressed) {
 542:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 543:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 544:tmk_core/common/action.c ****                         }
 545:tmk_core/common/action.c ****                     } else {
 546:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 547:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 548:tmk_core/common/action.c ****                         }
 549:tmk_core/common/action.c ****                     }
 550:tmk_core/common/action.c ****                     break;
 551:tmk_core/common/action.c ****                 case OP_ON_OFF:
 552:tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) : layer_off(action.layer_tap.val
 553:tmk_core/common/action.c ****                     break;
 554:tmk_core/common/action.c ****                 case OP_OFF_ON:
 555:tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) : layer_on(action.layer_tap.val
 556:tmk_core/common/action.c ****                     break;
 557:tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 558:tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) : layer_clear();
 559:tmk_core/common/action.c ****                     break;
 560:tmk_core/common/action.c **** #        ifndef NO_ACTION_ONESHOT
 561:tmk_core/common/action.c ****                 case OP_ONESHOT:
 562:tmk_core/common/action.c ****                     // Oneshot modifier
 563:tmk_core/common/action.c **** #            if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 564:tmk_core/common/action.c ****                     do_release_oneshot = false;
 565:tmk_core/common/action.c ****                     if (event.pressed) {
 566:tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 567:tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 568:tmk_core/common/action.c ****                             reset_oneshot_layer();
 569:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 570:tmk_core/common/action.c ****                             break;
 571:tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 572:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 573:tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 574:tmk_core/common/action.c ****                         }
 575:tmk_core/common/action.c ****                     } else {
 576:tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 577:tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 578:tmk_core/common/action.c ****                             reset_oneshot_layer();
 579:tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 580:tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 581:tmk_core/common/action.c ****                         } else {
 582:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 583:tmk_core/common/action.c ****                         }
 584:tmk_core/common/action.c ****                     }
 585:tmk_core/common/action.c **** #            else
 586:tmk_core/common/action.c ****                     if (event.pressed) {
 587:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 588:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 589:tmk_core/common/action.c ****                     } else {
 590:tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 591:tmk_core/common/action.c ****                         if (tap_count > 1) {
 592:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 593:tmk_core/common/action.c ****                         }
 594:tmk_core/common/action.c ****                     }
 595:tmk_core/common/action.c **** #            endif
 596:tmk_core/common/action.c ****                     break;
 597:tmk_core/common/action.c **** #        endif
 598:tmk_core/common/action.c ****                 default:
 599:tmk_core/common/action.c ****                     /* tap key */
 600:tmk_core/common/action.c ****                     if (event.pressed) {
 601:tmk_core/common/action.c ****                         if (tap_count > 0) {
 602:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 603:tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 604:tmk_core/common/action.c ****                         } else {
 605:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 606:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 607:tmk_core/common/action.c ****                         }
 608:tmk_core/common/action.c ****                     } else {
 609:tmk_core/common/action.c ****                         if (tap_count > 0) {
 610:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 611:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 612:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 613:tmk_core/common/action.c ****                             } else {
 614:tmk_core/common/action.c ****                                 wait_ms(TAP_CODE_DELAY);
 615:tmk_core/common/action.c ****                             }
 616:tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 617:tmk_core/common/action.c ****                         } else {
 618:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 619:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 620:tmk_core/common/action.c ****                         }
 621:tmk_core/common/action.c ****                     }
 622:tmk_core/common/action.c ****                     break;
 623:tmk_core/common/action.c ****             }
 624:tmk_core/common/action.c ****             break;
 625:tmk_core/common/action.c **** #    endif
 626:tmk_core/common/action.c **** #endif
 627:tmk_core/common/action.c ****             /* Extentions */
 628:tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 629:tmk_core/common/action.c ****         case ACT_MACRO:
 630:tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 631:tmk_core/common/action.c ****             break;
 632:tmk_core/common/action.c **** #endif
 633:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 634:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 635:tmk_core/common/action.c ****             switch (action.swap.code) {
 636:tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 637:tmk_core/common/action.c ****                     if (event.pressed) {
 638:tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 639:tmk_core/common/action.c ****                     }
 640:tmk_core/common/action.c ****                     break;
 641:tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 642:tmk_core/common/action.c ****                     swap_hands = event.pressed;
 643:tmk_core/common/action.c ****                     break;
 644:tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 645:tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 646:tmk_core/common/action.c ****                     break;
 647:tmk_core/common/action.c ****                 case OP_SH_ON:
 648:tmk_core/common/action.c ****                     if (!event.pressed) {
 649:tmk_core/common/action.c ****                         swap_hands = true;
 650:tmk_core/common/action.c ****                     }
 651:tmk_core/common/action.c ****                     break;
 652:tmk_core/common/action.c ****                 case OP_SH_OFF:
 653:tmk_core/common/action.c ****                     if (!event.pressed) {
 654:tmk_core/common/action.c ****                         swap_hands = false;
 655:tmk_core/common/action.c ****                     }
 656:tmk_core/common/action.c ****                     break;
 657:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 658:tmk_core/common/action.c ****                 case OP_SH_ONESHOT:
 659:tmk_core/common/action.c ****                     if (event.pressed) {
 660:tmk_core/common/action.c ****                         set_oneshot_swaphands();
 661:tmk_core/common/action.c ****                     } else {
 662:tmk_core/common/action.c ****                         release_oneshot_swaphands();
 663:tmk_core/common/action.c ****                     }
 664:tmk_core/common/action.c ****                     break;
 665:tmk_core/common/action.c **** #    endif
 666:tmk_core/common/action.c **** 
 667:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 668:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 669:tmk_core/common/action.c ****                     /* tap toggle */
 670:tmk_core/common/action.c **** 
 671:tmk_core/common/action.c ****                     if (event.pressed) {
 672:tmk_core/common/action.c ****                         if (swap_held) {
 673:tmk_core/common/action.c ****                             swap_held = false;
 674:tmk_core/common/action.c ****                         } else {
 675:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 676:tmk_core/common/action.c ****                         }
 677:tmk_core/common/action.c ****                     } else {
 678:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 679:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 680:tmk_core/common/action.c ****                         }
 681:tmk_core/common/action.c ****                     }
 682:tmk_core/common/action.c ****                     break;
 683:tmk_core/common/action.c ****                 default:
 684:tmk_core/common/action.c ****                     /* tap key */
 685:tmk_core/common/action.c ****                     if (tap_count > 0) {
 686:tmk_core/common/action.c ****                         if (swap_held) {
 687:tmk_core/common/action.c ****                             swap_hands = !swap_hands;  // undo hold set up in _tap_hint
 688:tmk_core/common/action.c ****                             swap_held  = false;
 689:tmk_core/common/action.c ****                         }
 690:tmk_core/common/action.c ****                         if (event.pressed) {
 691:tmk_core/common/action.c ****                             register_code(action.swap.code);
 692:tmk_core/common/action.c ****                         } else {
 693:tmk_core/common/action.c ****                             wait_ms(TAP_CODE_DELAY);
 694:tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 695:tmk_core/common/action.c ****                             *record = (keyrecord_t){};  // hack: reset tap mode
 696:tmk_core/common/action.c ****                         }
 697:tmk_core/common/action.c ****                     } else {
 698:tmk_core/common/action.c ****                         if (swap_held && !event.pressed) {
 699:tmk_core/common/action.c ****                             swap_hands = !swap_hands;  // undo hold set up in _tap_hint
 700:tmk_core/common/action.c ****                             swap_held  = false;
 701:tmk_core/common/action.c ****                         }
 702:tmk_core/common/action.c ****                     }
 703:tmk_core/common/action.c **** #    endif
 704:tmk_core/common/action.c ****             }
 705:tmk_core/common/action.c **** #endif
 706:tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 707:tmk_core/common/action.c ****         case ACT_FUNCTION:
 708:tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 709:tmk_core/common/action.c ****             break;
 710:tmk_core/common/action.c **** #endif
 711:tmk_core/common/action.c ****         default:
 712:tmk_core/common/action.c ****             break;
 713:tmk_core/common/action.c ****     }
 714:tmk_core/common/action.c **** 
 715:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 716:tmk_core/common/action.c ****     // if this event is a layer action, update the leds
 717:tmk_core/common/action.c ****     switch (action.kind.id) {
 718:tmk_core/common/action.c ****         case ACT_LAYER:
 719:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
 720:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 721:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 722:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 723:tmk_core/common/action.c **** #    endif
 724:tmk_core/common/action.c ****             led_set(host_keyboard_leds());
 725:tmk_core/common/action.c ****             break;
 726:tmk_core/common/action.c ****         default:
 727:tmk_core/common/action.c ****             break;
 728:tmk_core/common/action.c ****     }
 729:tmk_core/common/action.c **** #endif
 730:tmk_core/common/action.c **** 
 731:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 732:tmk_core/common/action.c **** #    if defined(RETRO_TAPPING) || defined(RETRO_TAPPING_PER_KEY)
 733:tmk_core/common/action.c ****     if (!is_tap_action(action)) {
 734:tmk_core/common/action.c ****         retro_tapping_counter = 0;
 735:tmk_core/common/action.c ****     } else {
 736:tmk_core/common/action.c ****         if (event.pressed) {
 737:tmk_core/common/action.c ****             if (tap_count > 0) {
 738:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 739:tmk_core/common/action.c ****             }
 740:tmk_core/common/action.c ****         } else {
 741:tmk_core/common/action.c ****             if (tap_count > 0) {
 742:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 743:tmk_core/common/action.c ****             } else {
 744:tmk_core/common/action.c ****                 if (
 745:tmk_core/common/action.c **** #        ifdef RETRO_TAPPING_PER_KEY
 746:tmk_core/common/action.c ****                     get_retro_tapping(get_event_keycode(record->event, false), record) &&
 747:tmk_core/common/action.c **** #        endif
 748:tmk_core/common/action.c ****                     retro_tapping_counter == 2) {
 749:tmk_core/common/action.c ****                     tap_code(action.layer_tap.code);
 750:tmk_core/common/action.c ****                 }
 751:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 752:tmk_core/common/action.c ****             }
 753:tmk_core/common/action.c ****         }
 754:tmk_core/common/action.c ****     }
 755:tmk_core/common/action.c **** #    endif
 756:tmk_core/common/action.c **** #endif
 757:tmk_core/common/action.c **** 
 758:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 759:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 760:tmk_core/common/action.c ****     if (event.pressed && !(action.kind.id == ACT_SWAP_HANDS && action.swap.code == OP_SH_ONESHOT)) 
 761:tmk_core/common/action.c ****         use_oneshot_swaphands();
 762:tmk_core/common/action.c ****     }
 763:tmk_core/common/action.c **** #    endif
 764:tmk_core/common/action.c **** #endif
 765:tmk_core/common/action.c **** 
 766:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 767:tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 768:tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 769:tmk_core/common/action.c ****      */
 770:tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED)) {
 771:tmk_core/common/action.c ****         record->event.pressed = false;
 772:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 773:tmk_core/common/action.c ****         process_record(record);
 774:tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 775:tmk_core/common/action.c ****     }
 776:tmk_core/common/action.c **** #endif
 777:tmk_core/common/action.c **** }
 778:tmk_core/common/action.c **** 
 779:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 780:tmk_core/common/action.c ****  *
 781:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 782:tmk_core/common/action.c ****  */
 783:tmk_core/common/action.c **** void register_code(uint8_t code) {
 163               		.loc 1 783 34 is_stmt 1 view -0
 164               		.cfi_startproc
 165               		.loc 1 783 34 is_stmt 0 view .LVU23
 166 0000 CF93      		push r28
 167               	.LCFI4:
 168               		.cfi_def_cfa_offset 3
 169               		.cfi_offset 28, -2
 170               	/* prologue: function */
 171               	/* frame size = 0 */
 172               	/* stack size = 1 */
 173               	.L__stack_usage = 1
 174 0002 C82F      		mov r28,r24
 784:tmk_core/common/action.c ****     if (code == KC_NO) {
 175               		.loc 1 784 5 is_stmt 1 view .LVU24
 176               		.loc 1 784 8 is_stmt 0 view .LVU25
 177 0004 8823      		tst r24
 178 0006 01F0      		breq .L5
 785:tmk_core/common/action.c ****         return;
 786:tmk_core/common/action.c ****     }
 787:tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 788:tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 789:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 790:tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 791:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_CAPS_LOCK)) return;
 792:tmk_core/common/action.c **** #    endif
 793:tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 794:tmk_core/common/action.c ****         send_keyboard_report();
 795:tmk_core/common/action.c ****         wait_ms(100);
 796:tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 797:tmk_core/common/action.c ****         send_keyboard_report();
 798:tmk_core/common/action.c ****     }
 799:tmk_core/common/action.c **** 
 800:tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 801:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 802:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_NUM_LOCK)) return;
 803:tmk_core/common/action.c **** #    endif
 804:tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 805:tmk_core/common/action.c ****         send_keyboard_report();
 806:tmk_core/common/action.c ****         wait_ms(100);
 807:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 808:tmk_core/common/action.c ****         send_keyboard_report();
 809:tmk_core/common/action.c ****     }
 810:tmk_core/common/action.c **** 
 811:tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 812:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 813:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_SCROLL_LOCK)) return;
 814:tmk_core/common/action.c **** #    endif
 815:tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 816:tmk_core/common/action.c ****         send_keyboard_report();
 817:tmk_core/common/action.c ****         wait_ms(100);
 818:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 819:tmk_core/common/action.c ****         send_keyboard_report();
 820:tmk_core/common/action.c ****     }
 821:tmk_core/common/action.c **** #endif
 822:tmk_core/common/action.c **** 
 823:tmk_core/common/action.c ****     else if
 179               		.loc 1 823 10 is_stmt 1 view .LVU26
 824:tmk_core/common/action.c ****         IS_KEY(code) {
 180               		.loc 1 824 9 is_stmt 0 view .LVU27
 181 0008 8CEF      		ldi r24,lo8(-4)
 182               	.LVL11:
 183               		.loc 1 824 9 view .LVU28
 184 000a 8C0F      		add r24,r28
 185 000c 813A      		cpi r24,lo8(-95)
 186 000e 00F4      		brsh .L7
 825:tmk_core/common/action.c ****             // TODO: should push command_proc out of this block?
 826:tmk_core/common/action.c ****             if (command_proc(code)) return;
 187               		.loc 1 826 13 is_stmt 1 view .LVU29
 827:tmk_core/common/action.c **** 
 828:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 829:tmk_core/common/action.c **** /* TODO: remove
 830:tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 831:tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 832:tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 833:tmk_core/common/action.c **** 
 834:tmk_core/common/action.c ****             add_key(code);
 835:tmk_core/common/action.c ****             send_keyboard_report();
 836:tmk_core/common/action.c **** 
 837:tmk_core/common/action.c ****             set_mods(tmp_mods);
 838:tmk_core/common/action.c ****             send_keyboard_report();
 839:tmk_core/common/action.c ****             oneshot_cancel();
 840:tmk_core/common/action.c ****         } else
 841:tmk_core/common/action.c **** */
 842:tmk_core/common/action.c **** #endif
 843:tmk_core/common/action.c ****             {
 844:tmk_core/common/action.c ****                 // Force a new key press if the key is already pressed
 845:tmk_core/common/action.c ****                 // without this, keys with the same keycode, but different
 846:tmk_core/common/action.c ****                 // modifiers will be reported incorrectly, see issue #1708
 847:tmk_core/common/action.c ****                 if (is_key_pressed(keyboard_report, code)) {
 188               		.loc 1 847 17 view .LVU30
 189               		.loc 1 847 21 is_stmt 0 view .LVU31
 190 0010 6C2F      		mov r22,r28
 191 0012 8091 0000 		lds r24,keyboard_report
 192 0016 9091 0000 		lds r25,keyboard_report+1
 193 001a 0E94 0000 		call is_key_pressed
 194               	.LVL12:
 195               		.loc 1 847 20 view .LVU32
 196 001e 8823      		tst r24
 197 0020 01F0      		breq .L8
 848:tmk_core/common/action.c ****                     del_key(code);
 198               		.loc 1 848 21 is_stmt 1 view .LVU33
 199 0022 8C2F      		mov r24,r28
 200 0024 0E94 0000 		call del_key
 201               	.LVL13:
 849:tmk_core/common/action.c ****                     send_keyboard_report();
 202               		.loc 1 849 21 view .LVU34
 203 0028 0E94 0000 		call send_keyboard_report
 204               	.LVL14:
 205               	.L8:
 850:tmk_core/common/action.c ****                 }
 851:tmk_core/common/action.c ****                 add_key(code);
 206               		.loc 1 851 17 view .LVU35
 207 002c 8C2F      		mov r24,r28
 208 002e 0E94 0000 		call add_key
 209               	.LVL15:
 852:tmk_core/common/action.c ****                 send_keyboard_report();
 210               		.loc 1 852 17 view .LVU36
 211               	.L15:
 853:tmk_core/common/action.c ****             }
 854:tmk_core/common/action.c ****         }
 855:tmk_core/common/action.c ****     else if
 856:tmk_core/common/action.c ****         IS_MOD(code) {
 857:tmk_core/common/action.c ****             add_mods(MOD_BIT(code));
 858:tmk_core/common/action.c ****             send_keyboard_report();
 212               		.loc 1 858 13 view .LVU37
 213               	/* epilogue start */
 859:tmk_core/common/action.c ****         }
 860:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 861:tmk_core/common/action.c ****     else if
 862:tmk_core/common/action.c ****         IS_SYSTEM(code) { host_system_send(KEYCODE2SYSTEM(code)); }
 863:tmk_core/common/action.c ****     else if
 864:tmk_core/common/action.c ****         IS_CONSUMER(code) { host_consumer_send(KEYCODE2CONSUMER(code)); }
 865:tmk_core/common/action.c **** #endif
 866:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 867:tmk_core/common/action.c ****     else if
 868:tmk_core/common/action.c ****         IS_MOUSEKEY(code) {
 869:tmk_core/common/action.c ****             mousekey_on(code);
 870:tmk_core/common/action.c ****             mousekey_send();
 871:tmk_core/common/action.c ****         }
 872:tmk_core/common/action.c **** #endif
 873:tmk_core/common/action.c **** }
 214               		.loc 1 873 1 is_stmt 0 view .LVU38
 215 0032 CF91      		pop r28
 858:tmk_core/common/action.c ****         }
 216               		.loc 1 858 13 view .LVU39
 217 0034 0C94 0000 		jmp send_keyboard_report
 218               	.LVL16:
 219               	.L7:
 855:tmk_core/common/action.c ****         IS_MOD(code) {
 220               		.loc 1 855 10 is_stmt 1 view .LVU40
 856:tmk_core/common/action.c ****             add_mods(MOD_BIT(code));
 221               		.loc 1 856 9 is_stmt 0 view .LVU41
 222 0038 80E2      		ldi r24,lo8(32)
 223 003a 8C0F      		add r24,r28
 224 003c 8830      		cpi r24,lo8(8)
 225 003e 00F4      		brsh .L5
 857:tmk_core/common/action.c ****             send_keyboard_report();
 226               		.loc 1 857 13 is_stmt 1 view .LVU42
 857:tmk_core/common/action.c ****             send_keyboard_report();
 227               		.loc 1 857 22 is_stmt 0 view .LVU43
 228 0040 C770      		andi r28,lo8(7)
 229               	.LVL17:
 857:tmk_core/common/action.c ****             send_keyboard_report();
 230               		.loc 1 857 13 view .LVU44
 231 0042 81E0      		ldi r24,lo8(1)
 232 0044 00C0      		rjmp 2f
 233               		1:
 234 0046 880F      		lsl r24
 235               		2:
 236 0048 CA95      		dec r28
 237 004a 02F4      		brpl 1b
 238 004c 0E94 0000 		call add_mods
 239               	.LVL18:
 240 0050 00C0      		rjmp .L15
 241               	.LVL19:
 242               	.L5:
 243               	/* epilogue start */
 244               		.loc 1 873 1 view .LVU45
 245 0052 CF91      		pop r28
 246               	.LVL20:
 247               		.loc 1 873 1 view .LVU46
 248 0054 0895      		ret
 249               		.cfi_endproc
 250               	.LFE23:
 252               		.section	.text.unregister_code,"ax",@progbits
 253               	.global	unregister_code
 255               	unregister_code:
 256               	.LVL21:
 257               	.LFB24:
 874:tmk_core/common/action.c **** 
 875:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 876:tmk_core/common/action.c ****  *
 877:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 878:tmk_core/common/action.c ****  */
 879:tmk_core/common/action.c **** void unregister_code(uint8_t code) {
 258               		.loc 1 879 36 is_stmt 1 view -0
 259               		.cfi_startproc
 260               	/* prologue: function */
 261               	/* frame size = 0 */
 262               	/* stack size = 0 */
 263               	.L__stack_usage = 0
 880:tmk_core/common/action.c ****     if (code == KC_NO) {
 264               		.loc 1 880 5 view .LVU48
 265               		.loc 1 880 8 is_stmt 0 view .LVU49
 266 0000 8823      		tst r24
 267 0002 01F0      		breq .L16
 881:tmk_core/common/action.c ****         return;
 882:tmk_core/common/action.c ****     }
 883:tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 884:tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 885:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 886:tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 887:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_CAPS_LOCK))) return;
 888:tmk_core/common/action.c **** #    endif
 889:tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 890:tmk_core/common/action.c ****         send_keyboard_report();
 891:tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 892:tmk_core/common/action.c ****         send_keyboard_report();
 893:tmk_core/common/action.c ****     }
 894:tmk_core/common/action.c **** 
 895:tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 896:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 897:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_NUM_LOCK))) return;
 898:tmk_core/common/action.c **** #    endif
 899:tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 900:tmk_core/common/action.c ****         send_keyboard_report();
 901:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 902:tmk_core/common/action.c ****         send_keyboard_report();
 903:tmk_core/common/action.c ****     }
 904:tmk_core/common/action.c **** 
 905:tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 906:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 907:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_SCROLL_LOCK))) return;
 908:tmk_core/common/action.c **** #    endif
 909:tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 910:tmk_core/common/action.c ****         send_keyboard_report();
 911:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 912:tmk_core/common/action.c ****         send_keyboard_report();
 913:tmk_core/common/action.c ****     }
 914:tmk_core/common/action.c **** #endif
 915:tmk_core/common/action.c **** 
 916:tmk_core/common/action.c ****     else if
 268               		.loc 1 916 10 is_stmt 1 view .LVU50
 917:tmk_core/common/action.c ****         IS_KEY(code) {
 269               		.loc 1 917 9 is_stmt 0 view .LVU51
 270 0004 9CEF      		ldi r25,lo8(-4)
 271 0006 980F      		add r25,r24
 272 0008 913A      		cpi r25,lo8(-95)
 273 000a 00F4      		brsh .L18
 918:tmk_core/common/action.c ****             del_key(code);
 274               		.loc 1 918 13 is_stmt 1 view .LVU52
 275 000c 0E94 0000 		call del_key
 276               	.LVL22:
 919:tmk_core/common/action.c ****             send_keyboard_report();
 277               		.loc 1 919 13 view .LVU53
 278               	.L24:
 920:tmk_core/common/action.c ****         }
 921:tmk_core/common/action.c ****     else if
 922:tmk_core/common/action.c ****         IS_MOD(code) {
 923:tmk_core/common/action.c ****             del_mods(MOD_BIT(code));
 924:tmk_core/common/action.c ****             send_keyboard_report();
 279               		.loc 1 924 13 view .LVU54
 280 0010 0C94 0000 		jmp send_keyboard_report
 281               	.LVL23:
 282               	.L18:
 921:tmk_core/common/action.c ****         IS_MOD(code) {
 283               		.loc 1 921 10 view .LVU55
 922:tmk_core/common/action.c ****             del_mods(MOD_BIT(code));
 284               		.loc 1 922 9 is_stmt 0 view .LVU56
 285 0014 90E2      		ldi r25,lo8(32)
 286 0016 980F      		add r25,r24
 287 0018 9830      		cpi r25,lo8(8)
 288 001a 00F4      		brsh .L19
 923:tmk_core/common/action.c ****             send_keyboard_report();
 289               		.loc 1 923 13 is_stmt 1 view .LVU57
 923:tmk_core/common/action.c ****             send_keyboard_report();
 290               		.loc 1 923 22 is_stmt 0 view .LVU58
 291 001c 8770      		andi r24,lo8(7)
 292               	.LVL24:
 923:tmk_core/common/action.c ****             send_keyboard_report();
 293               		.loc 1 923 13 view .LVU59
 294 001e 91E0      		ldi r25,lo8(1)
 295 0020 00C0      		rjmp 2f
 296               		1:
 297 0022 990F      		lsl r25
 298               		2:
 299 0024 8A95      		dec r24
 300 0026 02F4      		brpl 1b
 301 0028 892F      		mov r24,r25
 302 002a 0E94 0000 		call del_mods
 303               	.LVL25:
 304 002e 00C0      		rjmp .L24
 305               	.LVL26:
 306               	.L19:
 925:tmk_core/common/action.c ****         }
 926:tmk_core/common/action.c ****     else if
 307               		.loc 1 926 10 is_stmt 1 view .LVU60
 927:tmk_core/common/action.c ****         IS_SYSTEM(code) { host_system_send(0); }
 308               		.loc 1 927 9 is_stmt 0 view .LVU61
 309 0030 9BE5      		ldi r25,lo8(91)
 310 0032 980F      		add r25,r24
 311 0034 9330      		cpi r25,lo8(3)
 312 0036 00F4      		brsh .L20
 313               		.loc 1 927 27 is_stmt 1 discriminator 1 view .LVU62
 314 0038 90E0      		ldi r25,0
 315 003a 80E0      		ldi r24,0
 316               	.LVL27:
 317               		.loc 1 927 27 is_stmt 0 discriminator 1 view .LVU63
 318 003c 0C94 0000 		jmp host_system_send
 319               	.LVL28:
 320               	.L20:
 928:tmk_core/common/action.c ****     else if
 321               		.loc 1 928 10 is_stmt 1 view .LVU64
 929:tmk_core/common/action.c ****         IS_CONSUMER(code) { host_consumer_send(0); }
 322               		.loc 1 929 9 is_stmt 0 view .LVU65
 323 0040 885A      		subi r24,lo8(-(88))
 324               	.LVL29:
 325               		.loc 1 929 9 view .LVU66
 326 0042 8731      		cpi r24,lo8(23)
 327 0044 00F4      		brsh .L16
 328               		.loc 1 929 29 is_stmt 1 discriminator 1 view .LVU67
 329 0046 90E0      		ldi r25,0
 330 0048 80E0      		ldi r24,0
 331               	.LVL30:
 332               		.loc 1 929 29 is_stmt 0 discriminator 1 view .LVU68
 333 004a 0C94 0000 		jmp host_consumer_send
 334               	.LVL31:
 335               	.L16:
 336               	/* epilogue start */
 930:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 931:tmk_core/common/action.c ****     else if
 932:tmk_core/common/action.c ****         IS_MOUSEKEY(code) {
 933:tmk_core/common/action.c ****             mousekey_off(code);
 934:tmk_core/common/action.c ****             mousekey_send();
 935:tmk_core/common/action.c ****         }
 936:tmk_core/common/action.c **** #endif
 937:tmk_core/common/action.c **** }
 337               		.loc 1 937 1 view .LVU69
 338 004e 0895      		ret
 339               		.cfi_endproc
 340               	.LFE24:
 342               		.section	.text.tap_code,"ax",@progbits
 343               	.global	tap_code
 345               	tap_code:
 346               	.LVL32:
 347               	.LFB25:
 938:tmk_core/common/action.c **** 
 939:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 940:tmk_core/common/action.c ****  *
 941:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 942:tmk_core/common/action.c ****  */
 943:tmk_core/common/action.c **** void tap_code(uint8_t code) {
 348               		.loc 1 943 29 is_stmt 1 view -0
 349               		.cfi_startproc
 350               		.loc 1 943 29 is_stmt 0 view .LVU71
 351 0000 CF93      		push r28
 352               	.LCFI5:
 353               		.cfi_def_cfa_offset 3
 354               		.cfi_offset 28, -2
 355               	/* prologue: function */
 356               	/* frame size = 0 */
 357               	/* stack size = 1 */
 358               	.L__stack_usage = 1
 359 0002 C82F      		mov r28,r24
 944:tmk_core/common/action.c ****     register_code(code);
 360               		.loc 1 944 5 is_stmt 1 view .LVU72
 361 0004 0E94 0000 		call register_code
 362               	.LVL33:
 945:tmk_core/common/action.c ****     if (code == KC_CAPS) {
 363               		.loc 1 945 5 view .LVU73
 364               		.loc 1 945 8 is_stmt 0 view .LVU74
 365 0008 C933      		cpi r28,lo8(57)
 366 000a 01F4      		brne .L27
 946:tmk_core/common/action.c ****         wait_ms(TAP_HOLD_CAPS_DELAY);
 367               		.loc 1 946 9 is_stmt 1 view .LVU75
 368               	.LVL34:
 369               	.LBB18:
 370               	.LBI18:
 371               		.file 2 "/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** _delay_ms(double __ms)
 372               		.loc 2 166 1 view .LVU76
 373               	.LBB19:
 167:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 	double __tmp ;
 374               		.loc 2 168 2 view .LVU77
 169:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 375               		.loc 2 172 2 view .LVU78
 173:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 376               		.loc 2 173 2 view .LVU79
 174:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 377               		.loc 2 174 2 view .LVU80
 175:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 378               		.loc 2 184 3 view .LVU81
 185:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 379               		.loc 2 187 2 view .LVU82
 380 000c 2FEF      		ldi r18,lo8(255999)
 381 000e 87EE      		ldi r24,hi8(255999)
 382 0010 93E0      		ldi r25,hlo8(255999)
 383 0012 2150      	1:	subi r18,1
 384 0014 8040      		sbci r24,0
 385 0016 9040      		sbci r25,0
 386 0018 01F4      		brne 1b
 387 001a 00C0      		rjmp .
 388 001c 0000      		nop
 389               	.LVL35:
 390               	.L27:
 391               		.loc 2 187 2 is_stmt 0 view .LVU83
 392               	.LBE19:
 393               	.LBE18:
 947:tmk_core/common/action.c ****     } else {
 948:tmk_core/common/action.c ****         wait_ms(TAP_CODE_DELAY);
 949:tmk_core/common/action.c ****     }
 950:tmk_core/common/action.c ****     unregister_code(code);
 394               		.loc 1 950 5 is_stmt 1 view .LVU84
 395 001e 8C2F      		mov r24,r28
 396               	/* epilogue start */
 951:tmk_core/common/action.c **** }
 397               		.loc 1 951 1 is_stmt 0 view .LVU85
 398 0020 CF91      		pop r28
 399               	.LVL36:
 950:tmk_core/common/action.c **** }
 400               		.loc 1 950 5 view .LVU86
 401 0022 0C94 0000 		jmp unregister_code
 402               	.LVL37:
 950:tmk_core/common/action.c **** }
 403               		.loc 1 950 5 view .LVU87
 404               		.cfi_endproc
 405               	.LFE25:
 407               		.section	.text.register_mods,"ax",@progbits
 408               	.global	register_mods
 410               	register_mods:
 411               	.LVL38:
 412               	.LFB26:
 952:tmk_core/common/action.c **** 
 953:tmk_core/common/action.c **** /** \brief Adds the given physically pressed modifiers and sends a keyboard report immediately.
 954:tmk_core/common/action.c ****  *
 955:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to register.
 956:tmk_core/common/action.c ****  */
 957:tmk_core/common/action.c **** void register_mods(uint8_t mods) {
 413               		.loc 1 957 34 is_stmt 1 view -0
 414               		.cfi_startproc
 415               	/* prologue: function */
 416               	/* frame size = 0 */
 417               	/* stack size = 0 */
 418               	.L__stack_usage = 0
 958:tmk_core/common/action.c ****     if (mods) {
 419               		.loc 1 958 5 view .LVU89
 420               		.loc 1 958 8 is_stmt 0 view .LVU90
 421 0000 8823      		tst r24
 422 0002 01F0      		breq .L28
 959:tmk_core/common/action.c ****         add_mods(mods);
 423               		.loc 1 959 9 is_stmt 1 view .LVU91
 424 0004 0E94 0000 		call add_mods
 425               	.LVL39:
 960:tmk_core/common/action.c ****         send_keyboard_report();
 426               		.loc 1 960 9 view .LVU92
 427 0008 0C94 0000 		jmp send_keyboard_report
 428               	.LVL40:
 429               	.L28:
 430               	/* epilogue start */
 961:tmk_core/common/action.c ****     }
 962:tmk_core/common/action.c **** }
 431               		.loc 1 962 1 is_stmt 0 view .LVU93
 432 000c 0895      		ret
 433               		.cfi_endproc
 434               	.LFE26:
 436               		.section	.text.unregister_mods,"ax",@progbits
 437               	.global	unregister_mods
 439               	unregister_mods:
 440               	.LVL41:
 441               	.LFB27:
 963:tmk_core/common/action.c **** 
 964:tmk_core/common/action.c **** /** \brief Removes the given physically pressed modifiers and sends a keyboard report immediately.
 965:tmk_core/common/action.c ****  *
 966:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to unregister.
 967:tmk_core/common/action.c ****  */
 968:tmk_core/common/action.c **** void unregister_mods(uint8_t mods) {
 442               		.loc 1 968 36 is_stmt 1 view -0
 443               		.cfi_startproc
 444               	/* prologue: function */
 445               	/* frame size = 0 */
 446               	/* stack size = 0 */
 447               	.L__stack_usage = 0
 969:tmk_core/common/action.c ****     if (mods) {
 448               		.loc 1 969 5 view .LVU95
 449               		.loc 1 969 8 is_stmt 0 view .LVU96
 450 0000 8823      		tst r24
 451 0002 01F0      		breq .L30
 970:tmk_core/common/action.c ****         del_mods(mods);
 452               		.loc 1 970 9 is_stmt 1 view .LVU97
 453 0004 0E94 0000 		call del_mods
 454               	.LVL42:
 971:tmk_core/common/action.c ****         send_keyboard_report();
 455               		.loc 1 971 9 view .LVU98
 456 0008 0C94 0000 		jmp send_keyboard_report
 457               	.LVL43:
 458               	.L30:
 459               	/* epilogue start */
 972:tmk_core/common/action.c ****     }
 973:tmk_core/common/action.c **** }
 460               		.loc 1 973 1 is_stmt 0 view .LVU99
 461 000c 0895      		ret
 462               		.cfi_endproc
 463               	.LFE27:
 465               		.section	.text.process_action,"ax",@progbits
 466               	.global	process_action
 468               	process_action:
 469               	.LVL44:
 470               	.LFB22:
 248:tmk_core/common/action.c ****     keyevent_t event = record->event;
 471               		.loc 1 248 59 is_stmt 1 view -0
 472               		.cfi_startproc
 248:tmk_core/common/action.c ****     keyevent_t event = record->event;
 473               		.loc 1 248 59 is_stmt 0 view .LVU101
 474 0000 BF92      		push r11
 475               	.LCFI6:
 476               		.cfi_def_cfa_offset 3
 477               		.cfi_offset 11, -2
 478 0002 CF92      		push r12
 479               	.LCFI7:
 480               		.cfi_def_cfa_offset 4
 481               		.cfi_offset 12, -3
 482 0004 DF92      		push r13
 483               	.LCFI8:
 484               		.cfi_def_cfa_offset 5
 485               		.cfi_offset 13, -4
 486 0006 EF92      		push r14
 487               	.LCFI9:
 488               		.cfi_def_cfa_offset 6
 489               		.cfi_offset 14, -5
 490 0008 FF92      		push r15
 491               	.LCFI10:
 492               		.cfi_def_cfa_offset 7
 493               		.cfi_offset 15, -6
 494 000a 0F93      		push r16
 495               	.LCFI11:
 496               		.cfi_def_cfa_offset 8
 497               		.cfi_offset 16, -7
 498 000c 1F93      		push r17
 499               	.LCFI12:
 500               		.cfi_def_cfa_offset 9
 501               		.cfi_offset 17, -8
 502 000e CF93      		push r28
 503               	.LCFI13:
 504               		.cfi_def_cfa_offset 10
 505               		.cfi_offset 28, -9
 506 0010 DF93      		push r29
 507               	.LCFI14:
 508               		.cfi_def_cfa_offset 11
 509               		.cfi_offset 29, -10
 510               	/* prologue: function */
 511               	/* frame size = 0 */
 512               	/* stack size = 9 */
 513               	.L__stack_usage = 9
 514 0012 6C01      		movw r12,r24
 515 0014 D62F      		mov r29,r22
 248:tmk_core/common/action.c ****     keyevent_t event = record->event;
 516               		.loc 1 248 59 view .LVU102
 517 0016 C72F      		mov r28,r23
 249:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 518               		.loc 1 249 5 is_stmt 1 view .LVU103
 519               	.LVL45:
 251:tmk_core/common/action.c **** #endif
 520               		.loc 1 251 5 view .LVU104
 251:tmk_core/common/action.c **** #endif
 521               		.loc 1 251 36 is_stmt 0 view .LVU105
 522 0018 FC01      		movw r30,r24
 523 001a 1581      		ldd r17,Z+5
 524 001c 1295      		swap r17
 525 001e 1F70      		andi r17,lo8(15)
 526               	.LVL46:
 254:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 527               		.loc 1 254 5 is_stmt 1 view .LVU106
 254:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 528               		.loc 1 254 14 is_stmt 0 view .LVU107
 529 0020 0281      		ldd r16,Z+2
 254:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 530               		.loc 1 254 8 view .LVU108
 531 0022 0111      		cpse r16,__zero_reg__
 256:tmk_core/common/action.c ****     }
 532               		.loc 1 256 9 is_stmt 1 view .LVU109
 533 0024 0E94 0000 		call clear_weak_mods
 534               	.LVL47:
 535               	.L33:
 260:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 536               		.loc 1 260 5 view .LVU110
 262:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 537               		.loc 1 262 5 view .LVU111
 262:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 538               		.loc 1 262 9 is_stmt 0 view .LVU112
 539 0028 0E94 0000 		call is_oneshot_layer_active
 540               	.LVL48:
 262:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 541               		.loc 1 262 9 view .LVU113
 542 002c E82E      		mov r14,r24
 262:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 543               		.loc 1 262 8 view .LVU114
 544 002e 8823      		tst r24
 545 0030 01F0      		breq .L34
 262:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 546               		.loc 1 262 35 discriminator 1 view .LVU115
 547 0032 0023      		tst r16
 548 0034 01F0      		breq .L104
 262:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 549               		.loc 1 262 71 discriminator 2 view .LVU116
 550 0036 8C2F      		mov r24,r28
 551 0038 807F      		andi r24,lo8(-16)
 262:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 552               		.loc 1 262 52 discriminator 2 view .LVU117
 553 003a 8034      		cpi r24,lo8(64)
 554 003c 01F0      		breq .L35
 262:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 555               		.loc 1 262 87 discriminator 3 view .LVU118
 556 003e 80E2      		ldi r24,lo8(32)
 557               	.LVL49:
 262:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 558               		.loc 1 262 87 discriminator 3 view .LVU119
 559 0040 8D0F      		add r24,r29
 262:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 560               		.loc 1 262 84 discriminator 3 view .LVU120
 561 0042 8830      		cpi r24,lo8(8)
 562 0044 00F0      		brlo .L104
 563               	.L35:
 267:tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 564               		.loc 1 267 9 is_stmt 1 view .LVU121
 565 0046 82E0      		ldi r24,lo8(2)
 566 0048 0E94 0000 		call clear_oneshot_layer_state
 567               	.LVL50:
 268:tmk_core/common/action.c ****     }
 568               		.loc 1 268 9 view .LVU122
 268:tmk_core/common/action.c ****     }
 569               		.loc 1 268 31 is_stmt 0 view .LVU123
 570 004c 0E94 0000 		call is_oneshot_layer_active
 571               	.LVL51:
 268:tmk_core/common/action.c ****     }
 572               		.loc 1 268 9 view .LVU124
 573 0050 91E0      		ldi r25,lo8(1)
 574 0052 E82E      		mov r14,r24
 575 0054 E926      		eor r14,r25
 576               	.LVL52:
 577               	.L34:
 272:tmk_core/common/action.c ****         /* Key and Mods */
 578               		.loc 1 272 5 is_stmt 1 view .LVU125
 272:tmk_core/common/action.c ****         /* Key and Mods */
 579               		.loc 1 272 24 is_stmt 0 view .LVU126
 580 0056 BC2E      		mov r11,r28
 581 0058 B294      		swap r11
 582 005a 9FE0      		ldi r25,lo8(15)
 583 005c B922      		and r11,r25
 272:tmk_core/common/action.c ****         /* Key and Mods */
 584               		.loc 1 272 5 view .LVU127
 585 005e FBE0      		ldi r31,lo8(11)
 586 0060 FB15      		cp r31,r11
 587 0062 00F0      		brlo .L36
 588 0064 EB2D      		mov r30,r11
 589 0066 F0E0      		ldi r31,0
 590 0068 E050      		subi r30,lo8(-(gs(.L38)))
 591 006a F040      		sbci r31,hi8(-(gs(.L38)))
 592 006c 0C94 0000 		jmp __tablejump2__
 593               		.section	.jumptables.gcc.process_action,"a",@progbits
 594               		.p2align	1
 595               	.L38:
 596 0000 0000      		.word gs(.L42)
 597 0002 0000      		.word gs(.L42)
 598 0004 0000      		.word gs(.L41)
 599 0006 0000      		.word gs(.L41)
 600 0008 0000      		.word gs(.L36)
 601 000a 0000      		.word gs(.L36)
 602 000c 0000      		.word gs(.L36)
 603 000e 0000      		.word gs(.L36)
 604 0010 0000      		.word gs(.L40)
 605 0012 0000      		.word gs(.L39)
 606 0014 0000      		.word gs(.L37)
 607 0016 0000      		.word gs(.L37)
 608               		.section	.text.process_action
 609               	.LVL53:
 610               	.L104:
 260:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 611               		.loc 1 260 10 view .LVU128
 612 0070 E12C      		mov r14,__zero_reg__
 613 0072 00C0      		rjmp .L34
 614               	.LVL54:
 615               	.L42:
 616               	.LBB20:
 276:tmk_core/common/action.c ****             if (event.pressed) {
 617               		.loc 1 276 13 is_stmt 1 view .LVU129
 618 0074 1C2F      		mov r17,r28
 619               	.LVL55:
 276:tmk_core/common/action.c ****             if (event.pressed) {
 620               		.loc 1 276 13 is_stmt 0 view .LVU130
 621 0076 1F70      		andi r17,lo8(15)
 276:tmk_core/common/action.c ****             if (event.pressed) {
 622               		.loc 1 276 44 view .LVU131
 623 0078 C07F      		andi r28,lo8(-16)
 624               	.LVL56:
 276:tmk_core/common/action.c ****             if (event.pressed) {
 625               		.loc 1 276 21 view .LVU132
 626 007a 01F0      		breq .L43
 276:tmk_core/common/action.c ****             if (event.pressed) {
 627               		.loc 1 276 21 discriminator 2 view .LVU133
 628 007c 1295      		swap r17
 629 007e 107F      		andi r17,lo8(-16)
 630               	.L43:
 631               	.LVL57:
 277:tmk_core/common/action.c ****                 if (mods) {
 632               		.loc 1 277 13 is_stmt 1 discriminator 4 view .LVU134
 277:tmk_core/common/action.c ****                 if (mods) {
 633               		.loc 1 277 16 is_stmt 0 discriminator 4 view .LVU135
 634 0080 0023      		tst r16
 635 0082 01F0      		breq .L44
 278:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 636               		.loc 1 278 17 is_stmt 1 view .LVU136
 278:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 637               		.loc 1 278 20 is_stmt 0 view .LVU137
 638 0084 1123      		tst r17
 639 0086 01F0      		breq .L135
 279:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 640               		.loc 1 279 21 is_stmt 1 view .LVU138
 279:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 641               		.loc 1 279 25 is_stmt 0 view .LVU139
 642 0088 80E2      		ldi r24,lo8(32)
 643 008a 8D0F      		add r24,r29
 279:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 644               		.loc 1 279 24 view .LVU140
 645 008c 8830      		cpi r24,lo8(8)
 646 008e 00F0      		brlo .L46
 279:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 647               		.loc 1 279 49 discriminator 1 view .LVU141
 648 0090 D111      		cpse r29,__zero_reg__
 649 0092 00C0      		rjmp .L47
 650               	.L46:
 283:tmk_core/common/action.c ****                     } else {
 651               		.loc 1 283 25 is_stmt 1 view .LVU142
 652 0094 812F      		mov r24,r17
 653 0096 0E94 0000 		call add_mods
 654               	.LVL58:
 655               	.L48:
 287:tmk_core/common/action.c ****                 }
 656               		.loc 1 287 21 view .LVU143
 657 009a 0E94 0000 		call send_keyboard_report
 658               	.LVL59:
 289:tmk_core/common/action.c ****             } else {
 659               		.loc 1 289 17 view .LVU144
 660               	.L135:
 289:tmk_core/common/action.c ****             } else {
 661               		.loc 1 289 17 is_stmt 0 view .LVU145
 662               	.LBE20:
 602:tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 663               		.loc 1 602 75 is_stmt 1 view .LVU146
 603:tmk_core/common/action.c ****                         } else {
 664               		.loc 1 603 29 view .LVU147
 665 009e 8D2F      		mov r24,r29
 666 00a0 0E94 0000 		call register_code
 667               	.LVL60:
 668 00a4 00C0      		rjmp .L36
 669               	.LVL61:
 670               	.L47:
 671               	.LBB21:
 285:tmk_core/common/action.c ****                     }
 672               		.loc 1 285 25 view .LVU148
 673 00a6 812F      		mov r24,r17
 674 00a8 0E94 0000 		call add_weak_mods
 675               	.LVL62:
 676 00ac 00C0      		rjmp .L48
 677               	.L44:
 291:tmk_core/common/action.c ****                 if (mods) {
 678               		.loc 1 291 17 view .LVU149
 679 00ae 8D2F      		mov r24,r29
 680 00b0 0E94 0000 		call unregister_code
 681               	.LVL63:
 292:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 682               		.loc 1 292 17 view .LVU150
 292:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 683               		.loc 1 292 20 is_stmt 0 view .LVU151
 684 00b4 1123      		tst r17
 685 00b6 01F0      		breq .L36
 293:tmk_core/common/action.c ****                         del_mods(mods);
 686               		.loc 1 293 21 is_stmt 1 view .LVU152
 293:tmk_core/common/action.c ****                         del_mods(mods);
 687               		.loc 1 293 25 is_stmt 0 view .LVU153
 688 00b8 80E2      		ldi r24,lo8(32)
 689 00ba 8D0F      		add r24,r29
 293:tmk_core/common/action.c ****                         del_mods(mods);
 690               		.loc 1 293 24 view .LVU154
 691 00bc 8830      		cpi r24,lo8(8)
 692 00be 00F0      		brlo .L50
 293:tmk_core/common/action.c ****                         del_mods(mods);
 693               		.loc 1 293 49 discriminator 1 view .LVU155
 694 00c0 D111      		cpse r29,__zero_reg__
 695 00c2 00C0      		rjmp .L51
 696               	.L50:
 294:tmk_core/common/action.c ****                     } else {
 697               		.loc 1 294 25 is_stmt 1 view .LVU156
 698 00c4 812F      		mov r24,r17
 699 00c6 0E94 0000 		call del_mods
 700               	.LVL64:
 701               	.L52:
 298:tmk_core/common/action.c ****                 }
 702               		.loc 1 298 21 view .LVU157
 703 00ca 0E94 0000 		call send_keyboard_report
 704               	.LVL65:
 705               	.L36:
 298:tmk_core/common/action.c ****                 }
 706               		.loc 1 298 21 is_stmt 0 view .LVU158
 707               	.LBE21:
 717:tmk_core/common/action.c ****         case ACT_LAYER:
 708               		.loc 1 717 5 is_stmt 1 view .LVU159
 709 00ce 2B2D      		mov r18,r11
 710 00d0 2850      		subi r18,8
 711 00d2 330B      		sbc r19,r19
 712 00d4 2430      		cpi r18,4
 713 00d6 3105      		cpc r19,__zero_reg__
 714 00d8 00F4      		brsh .L99
 724:tmk_core/common/action.c ****             break;
 715               		.loc 1 724 13 view .LVU160
 716 00da 0E94 0000 		call host_keyboard_leds
 717               	.LVL66:
 718 00de 0E94 0000 		call led_set
 719               	.LVL67:
 725:tmk_core/common/action.c ****         default:
 720               		.loc 1 725 13 view .LVU161
 721               	.L99:
 770:tmk_core/common/action.c ****         record->event.pressed = false;
 722               		.loc 1 770 5 view .LVU162
 770:tmk_core/common/action.c ****         record->event.pressed = false;
 723               		.loc 1 770 8 is_stmt 0 view .LVU163
 724 00e2 EE20      		tst r14
 725 00e4 01F4      		brne .+2
 726 00e6 00C0      		rjmp .L32
 770:tmk_core/common/action.c ****         record->event.pressed = false;
 727               		.loc 1 770 33 discriminator 1 view .LVU164
 728 00e8 0E94 0000 		call get_oneshot_layer_state
 729               	.LVL68:
 770:tmk_core/common/action.c ****         record->event.pressed = false;
 730               		.loc 1 770 28 discriminator 1 view .LVU165
 731 00ec 80FD      		sbrc r24,0
 732 00ee 00C0      		rjmp .L32
 771:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 733               		.loc 1 771 9 is_stmt 1 view .LVU166
 771:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 734               		.loc 1 771 31 is_stmt 0 view .LVU167
 735 00f0 F601      		movw r30,r12
 736 00f2 1282      		std Z+2,__zero_reg__
 772:tmk_core/common/action.c ****         process_record(record);
 737               		.loc 1 772 9 is_stmt 1 view .LVU168
 738 00f4 0E94 0000 		call get_oneshot_layer
 739               	.LVL69:
 740 00f8 0E94 0000 		call layer_on
 741               	.LVL70:
 773:tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 742               		.loc 1 773 9 view .LVU169
 743 00fc C601      		movw r24,r12
 744 00fe 0E94 0000 		call process_record
 745               	.LVL71:
 774:tmk_core/common/action.c ****     }
 746               		.loc 1 774 9 view .LVU170
 747 0102 0E94 0000 		call get_oneshot_layer
 748               	.LVL72:
 749               	/* epilogue start */
 777:tmk_core/common/action.c **** 
 750               		.loc 1 777 1 is_stmt 0 view .LVU171
 751 0106 DF91      		pop r29
 752               	.LVL73:
 777:tmk_core/common/action.c **** 
 753               		.loc 1 777 1 view .LVU172
 754 0108 CF91      		pop r28
 777:tmk_core/common/action.c **** 
 755               		.loc 1 777 1 view .LVU173
 756 010a 1F91      		pop r17
 757 010c 0F91      		pop r16
 758 010e FF90      		pop r15
 759 0110 EF90      		pop r14
 760               	.LVL74:
 777:tmk_core/common/action.c **** 
 761               		.loc 1 777 1 view .LVU174
 762 0112 DF90      		pop r13
 763 0114 CF90      		pop r12
 764               	.LVL75:
 777:tmk_core/common/action.c **** 
 765               		.loc 1 777 1 view .LVU175
 766 0116 BF90      		pop r11
 774:tmk_core/common/action.c ****     }
 767               		.loc 1 774 9 view .LVU176
 768 0118 0C94 0000 		jmp layer_off
 769               	.LVL76:
 770               	.L51:
 771               	.LBB22:
 296:tmk_core/common/action.c ****                     }
 772               		.loc 1 296 25 is_stmt 1 view .LVU177
 773 011c 812F      		mov r24,r17
 774 011e 0E94 0000 		call del_weak_mods
 775               	.LVL77:
 776 0122 00C0      		rjmp .L52
 777               	.LVL78:
 778               	.L41:
 296:tmk_core/common/action.c ****                     }
 779               		.loc 1 296 25 is_stmt 0 view .LVU178
 780               	.LBE22:
 781               	.LBB23:
 305:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 782               		.loc 1 305 13 is_stmt 1 view .LVU179
 783 0124 2C2F      		mov r18,r28
 784 0126 2F70      		andi r18,lo8(15)
 785 0128 F22E      		mov r15,r18
 305:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 786               		.loc 1 305 44 is_stmt 0 view .LVU180
 787 012a C07F      		andi r28,lo8(-16)
 788               	.LVL79:
 305:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 789               		.loc 1 305 21 view .LVU181
 790 012c C032      		cpi r28,lo8(32)
 791 012e 01F0      		breq .L53
 305:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 792               		.loc 1 305 21 discriminator 2 view .LVU182
 793 0130 F294      		swap r15
 794 0132 80EF      		ldi r24,lo8(-16)
 795 0134 F822      		and r15,r24
 796               	.L53:
 797               	.LVL80:
 306:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 798               		.loc 1 306 13 is_stmt 1 discriminator 4 view .LVU183
 799 0136 DD23      		tst r29
 800 0138 01F0      		breq .L54
 801 013a D130      		cpi r29,lo8(1)
 802 013c 01F0      		breq .L55
 361:tmk_core/common/action.c ****                         if (tap_count > 0) {
 803               		.loc 1 361 21 view .LVU184
 361:tmk_core/common/action.c ****                         if (tap_count > 0) {
 804               		.loc 1 361 24 is_stmt 0 view .LVU185
 805 013e 0023      		tst r16
 806 0140 01F0      		breq .L63
 362:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 807               		.loc 1 362 25 is_stmt 1 view .LVU186
 362:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 808               		.loc 1 362 28 is_stmt 0 view .LVU187
 809 0142 1123      		tst r17
 810 0144 01F0      		breq .L64
 364:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 811               		.loc 1 364 29 is_stmt 1 view .LVU188
 368:tmk_core/common/action.c ****                                 dprint("mods_tap: tap: cancel: add_mods\n");
 812               		.loc 1 368 33 is_stmt 0 view .LVU189
 813 0146 F601      		movw r30,r12
 814 0148 8581      		ldd r24,Z+5
 364:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 815               		.loc 1 364 32 view .LVU190
 816 014a 80FF      		sbrs r24,0
 817 014c 00C0      		rjmp .L135
 369:tmk_core/common/action.c ****                                 // ad hoc: set 0 to cancel tap
 818               		.loc 1 369 76 is_stmt 1 view .LVU191
 371:tmk_core/common/action.c ****                                 register_mods(mods);
 819               		.loc 1 371 33 view .LVU192
 371:tmk_core/common/action.c ****                                 register_mods(mods);
 820               		.loc 1 371 51 is_stmt 0 view .LVU193
 821 014e 8F70      		andi r24,lo8(15)
 822 0150 8583      		std Z+5,r24
 372:tmk_core/common/action.c ****                             } else
 823               		.loc 1 372 33 is_stmt 1 view .LVU194
 824 0152 00C0      		rjmp .L64
 825               	.L54:
 310:tmk_core/common/action.c ****                         if (tap_count == 0) {
 826               		.loc 1 310 21 view .LVU195
 310:tmk_core/common/action.c ****                         if (tap_count == 0) {
 827               		.loc 1 310 24 is_stmt 0 view .LVU196
 828 0154 0023      		tst r16
 829 0156 01F0      		breq .L57
 311:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 830               		.loc 1 311 25 is_stmt 1 view .LVU197
 311:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 831               		.loc 1 311 28 is_stmt 0 view .LVU198
 832 0158 1111      		cpse r17,__zero_reg__
 833 015a 00C0      		rjmp .L58
 834               	.L59:
 325:tmk_core/common/action.c ****                         }
 835               		.loc 1 325 29 is_stmt 1 view .LVU199
 325:tmk_core/common/action.c ****                         }
 836               		.loc 1 325 50 is_stmt 0 view .LVU200
 837 015c 0E94 0000 		call get_oneshot_mods
 838               	.LVL81:
 325:tmk_core/common/action.c ****                         }
 839               		.loc 1 325 29 view .LVU201
 840 0160 8F29      		or r24,r15
 841               	.LVL82:
 842               	.L134:
 325:tmk_core/common/action.c ****                         }
 843               		.loc 1 325 29 view .LVU202
 844               	.LBE23:
 529:tmk_core/common/action.c ****             } else {
 845               		.loc 1 529 17 view .LVU203
 846 0162 0E94 0000 		call register_mods
 847               	.LVL83:
 848 0166 00C0      		rjmp .L36
 849               	.LVL84:
 850               	.L58:
 851               	.LBB26:
 314:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 852               		.loc 1 314 32 is_stmt 1 view .LVU204
 314:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 853               		.loc 1 314 35 is_stmt 0 view .LVU205
 854 0168 1130      		cpi r17,lo8(1)
 855 016a 01F4      		brne .L59
 315:tmk_core/common/action.c ****                             set_oneshot_mods(mods | get_oneshot_mods());
 856               		.loc 1 315 65 is_stmt 1 view .LVU206
 316:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 857               		.loc 1 316 29 view .LVU207
 316:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 858               		.loc 1 316 53 is_stmt 0 view .LVU208
 859 016c 0E94 0000 		call get_oneshot_mods
 860               	.LVL85:
 316:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 861               		.loc 1 316 29 view .LVU209
 862 0170 8F29      		or r24,r15
 863 0172 0E94 0000 		call set_oneshot_mods
 864               	.LVL86:
 865 0176 00C0      		rjmp .L36
 866               	.L57:
 328:tmk_core/common/action.c ****                             clear_oneshot_mods();
 867               		.loc 1 328 25 is_stmt 1 view .LVU210
 328:tmk_core/common/action.c ****                             clear_oneshot_mods();
 868               		.loc 1 328 28 is_stmt 0 view .LVU211
 869 0178 1111      		cpse r17,__zero_reg__
 870 017a 00C0      		rjmp .L60
 871               	.L136:
 343:tmk_core/common/action.c ****                             unregister_mods(mods);
 872               		.loc 1 343 29 is_stmt 1 view .LVU212
 873 017c 0E94 0000 		call clear_oneshot_mods
 874               	.LVL87:
 344:tmk_core/common/action.c ****                         }
 875               		.loc 1 344 29 view .LVU213
 876               	.L66:
 393:tmk_core/common/action.c ****                             unregister_mods(mods);
 877               		.loc 1 393 67 view .LVU214
 394:tmk_core/common/action.c ****                         }
 878               		.loc 1 394 29 view .LVU215
 879 0180 8F2D      		mov r24,r15
 880 0182 0E94 0000 		call unregister_mods
 881               	.LVL88:
 882 0186 00C0      		rjmp .L36
 883               	.L60:
 331:tmk_core/common/action.c ****                             // Retain Oneshot mods
 884               		.loc 1 331 32 view .LVU216
 331:tmk_core/common/action.c ****                             // Retain Oneshot mods
 885               		.loc 1 331 35 is_stmt 0 view .LVU217
 886 0188 1130      		cpi r17,lo8(1)
 887 018a 01F4      		brne .+2
 888 018c 00C0      		rjmp .L36
 889 018e 00C0      		rjmp .L136
 890               	.L55:
 350:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 891               		.loc 1 350 21 is_stmt 1 view .LVU218
 350:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 892               		.loc 1 350 24 is_stmt 0 view .LVU219
 893 0190 0023      		tst r16
 894 0192 01F0      		breq .L62
 351:tmk_core/common/action.c ****                             register_mods(mods);
 895               		.loc 1 351 25 is_stmt 1 view .LVU220
 351:tmk_core/common/action.c ****                             register_mods(mods);
 896               		.loc 1 351 28 is_stmt 0 view .LVU221
 897 0194 1630      		cpi r17,lo8(6)
 898 0196 00F0      		brlo .+2
 899 0198 00C0      		rjmp .L36
 900               	.L64:
 380:tmk_core/common/action.c ****                             register_mods(mods);
 901               		.loc 1 380 67 is_stmt 1 view .LVU222
 381:tmk_core/common/action.c ****                         }
 902               		.loc 1 381 29 view .LVU223
 903 019a 8F2D      		mov r24,r15
 904 019c 00C0      		rjmp .L134
 905               	.L62:
 355:tmk_core/common/action.c ****                             unregister_mods(mods);
 906               		.loc 1 355 25 view .LVU224
 355:tmk_core/common/action.c ****                             unregister_mods(mods);
 907               		.loc 1 355 28 is_stmt 0 view .LVU225
 908 019e 1530      		cpi r17,lo8(5)
 909 01a0 00F0      		brlo .+2
 910 01a2 00C0      		rjmp .L36
 911 01a4 00C0      		rjmp .L66
 912               	.L63:
 384:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 913               		.loc 1 384 25 is_stmt 1 view .LVU226
 384:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 914               		.loc 1 384 28 is_stmt 0 view .LVU227
 915 01a6 1123      		tst r17
 916 01a8 01F0      		breq .L66
 385:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 917               		.loc 1 385 71 is_stmt 1 view .LVU228
 386:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 918               		.loc 1 386 29 view .LVU229
 386:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 919               		.loc 1 386 32 is_stmt 0 view .LVU230
 920 01aa D933      		cpi r29,lo8(57)
 921 01ac 01F4      		brne .L98
 387:tmk_core/common/action.c ****                             } else {
 922               		.loc 1 387 33 is_stmt 1 view .LVU231
 923               	.LVL89:
 924               	.LBB24:
 925               	.LBI24:
 166:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** {
 926               		.loc 2 166 1 view .LVU232
 927               	.LBB25:
 168:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 928               		.loc 2 168 2 view .LVU233
 172:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 929               		.loc 2 172 2 view .LVU234
 173:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 930               		.loc 2 173 2 view .LVU235
 174:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 931               		.loc 2 174 2 view .LVU236
 184:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 	#endif
 932               		.loc 2 184 3 view .LVU237
 933               		.loc 2 187 2 view .LVU238
 934 01ae FFEF      		ldi r31,lo8(255999)
 935 01b0 27EE      		ldi r18,hi8(255999)
 936 01b2 33E0      		ldi r19,hlo8(255999)
 937 01b4 F150      	1:	subi r31,1
 938 01b6 2040      		sbci r18,0
 939 01b8 3040      		sbci r19,0
 940 01ba 01F4      		brne 1b
 941               	.LVL90:
 942               	.L137:
 943               		.loc 2 187 2 is_stmt 0 view .LVU239
 944               	.LBE25:
 945               	.LBE24:
 946               	.LBE26:
 947               	.LBB27:
 948               	.LBB28:
 949 01bc 00C0      		rjmp .
 950 01be 0000      		nop
 951               	.L98:
 952               	.LBE28:
 953               	.LBE27:
 616:tmk_core/common/action.c ****                         } else {
 954               		.loc 1 616 29 is_stmt 1 view .LVU240
 955 01c0 8D2F      		mov r24,r29
 956 01c2 0E94 0000 		call unregister_code
 957               	.LVL91:
 958 01c6 00C0      		rjmp .L36
 959               	.L40:
 482:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 960               		.loc 1 482 13 view .LVU241
 482:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 961               		.loc 1 482 39 is_stmt 0 view .LVU242
 962 01c8 8C2F      		mov r24,r28
 963 01ca 8370      		andi r24,lo8(3)
 482:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 964               		.loc 1 482 16 view .LVU243
 965 01cc 01F0      		breq .+2
 966 01ce 00C0      		rjmp .L69
 484:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 967               		.loc 1 484 17 is_stmt 1 view .LVU244
 484:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 968               		.loc 1 484 20 is_stmt 0 view .LVU245
 969 01d0 0111      		cpse r16,__zero_reg__
 970 01d2 00C0      		rjmp .L36
 971               	.LBB30:
 485:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 972               		.loc 1 485 21 is_stmt 1 view .LVU246
 973               	.LVL92:
 486:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 974               		.loc 1 486 21 view .LVU247
 485:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 975               		.loc 1 485 61 is_stmt 0 view .LVU248
 976 01d4 4D2F      		mov r20,r29
 977 01d6 4295      		swap r20
 978 01d8 4695      		lsr r20
 979 01da 4770      		andi r20,lo8(7)
 485:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 980               		.loc 1 485 35 view .LVU249
 981 01dc 440F      		lsl r20
 982 01de 440F      		lsl r20
 486:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 983               		.loc 1 486 77 view .LVU250
 984 01e0 0D2F      		mov r16,r29
 985               	.LVL93:
 486:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 986               		.loc 1 486 77 view .LVU251
 987 01e2 0F70      		andi r16,lo8(15)
 486:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 988               		.loc 1 486 44 view .LVU252
 989 01e4 10E0      		ldi r17,0
 990               	.LVL94:
 486:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 991               		.loc 1 486 44 view .LVU253
 992 01e6 30E0      		ldi r19,0
 993 01e8 20E0      		ldi r18,0
 486:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 994               		.loc 1 486 35 view .LVU254
 995 01ea 042E      		mov r0,r20
 996 01ec 00C0      		rjmp 2f
 997               		1:
 998 01ee 000F      		lsl r16
 999 01f0 111F      		rol r17
 1000 01f2 221F      		rol r18
 1001 01f4 331F      		rol r19
 1002               		2:
 1003 01f6 0A94      		dec r0
 1004 01f8 02F4      		brpl 1b
 1005               	.LVL95:
 487:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1006               		.loc 1 487 21 is_stmt 1 view .LVU255
 487:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1007               		.loc 1 487 104 is_stmt 0 view .LVU256
 1008 01fa 60E0      		ldi r22,0
 1009 01fc 70E0      		ldi r23,0
 1010 01fe CB01      		movw r24,r22
 1011 0200 D4FF      		sbrs r29,4
 1012 0202 00C0      		rjmp .L70
 487:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1013               		.loc 1 487 94 discriminator 1 view .LVU257
 1014 0204 6FE0      		ldi r22,lo8(15)
 1015 0206 70E0      		ldi r23,0
 1016 0208 80E0      		ldi r24,0
 1017 020a 90E0      		ldi r25,0
 1018 020c 00C0      		rjmp 2f
 1019               		1:
 1020 020e 660F      		lsl r22
 1021 0210 771F      		rol r23
 1022 0212 881F      		rol r24
 1023 0214 991F      		rol r25
 1024               		2:
 1025 0216 4A95      		dec r20
 1026 0218 02F4      		brpl 1b
 487:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1027               		.loc 1 487 104 discriminator 1 view .LVU258
 1028 021a 6095      		com r22
 1029 021c 7095      		com r23
 1030 021e 8095      		com r24
 1031 0220 9095      		com r25
 1032               	.L70:
 1033               	.LVL96:
 488:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1034               		.loc 1 488 21 is_stmt 1 discriminator 4 view .LVU259
 488:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1035               		.loc 1 488 47 is_stmt 0 discriminator 4 view .LVU260
 1036 0222 C695      		lsr r28
 1037 0224 C695      		lsr r28
 1038               	.LVL97:
 488:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1039               		.loc 1 488 47 discriminator 4 view .LVU261
 1040 0226 C370      		andi r28,lo8(3)
 1041 0228 602B      		or r22,r16
 1042               	.LVL98:
 488:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1043               		.loc 1 488 47 discriminator 4 view .LVU262
 1044 022a 712B      		or r23,r17
 1045 022c 822B      		or r24,r18
 1046 022e 932B      		or r25,r19
 1047 0230 C230      		cpi r28,lo8(2)
 1048 0232 01F0      		breq .L71
 1049 0234 00F4      		brsh .L72
 1050 0236 C130      		cpi r28,lo8(1)
 1051 0238 01F0      		breq .L73
 490:tmk_core/common/action.c ****                             break;
 1052               		.loc 1 490 29 is_stmt 1 view .LVU263
 1053 023a 0E94 0000 		call default_layer_and
 1054               	.LVL99:
 491:tmk_core/common/action.c ****                         case OP_BIT_OR:
 1055               		.loc 1 491 29 view .LVU264
 1056 023e 00C0      		rjmp .L36
 1057               	.L73:
 493:tmk_core/common/action.c ****                             break;
 1058               		.loc 1 493 29 view .LVU265
 1059 0240 0E94 0000 		call default_layer_or
 1060               	.LVL100:
 494:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 1061               		.loc 1 494 29 view .LVU266
 1062 0244 00C0      		rjmp .L36
 1063               	.L71:
 496:tmk_core/common/action.c ****                             break;
 1064               		.loc 1 496 29 view .LVU267
 1065 0246 0E94 0000 		call default_layer_xor
 1066               	.LVL101:
 497:tmk_core/common/action.c ****                         case OP_BIT_SET:
 1067               		.loc 1 497 29 view .LVU268
 1068 024a 00C0      		rjmp .L36
 1069               	.L72:
 499:tmk_core/common/action.c ****                             break;
 1070               		.loc 1 499 29 view .LVU269
 1071 024c 0E94 0000 		call default_layer_set
 1072               	.LVL102:
 500:tmk_core/common/action.c ****                     }
 1073               		.loc 1 500 29 view .LVU270
 1074 0250 00C0      		rjmp .L36
 1075               	.LVL103:
 1076               	.L69:
 500:tmk_core/common/action.c ****                     }
 1077               		.loc 1 500 29 is_stmt 0 view .LVU271
 1078               	.LBE30:
 505:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1079               		.loc 1 505 17 is_stmt 1 view .LVU272
 505:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1080               		.loc 1 505 21 is_stmt 0 view .LVU273
 1081 0252 8695      		lsr r24
 1082 0254 0023      		tst r16
 1083 0256 01F0      		breq .L75
 505:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1084               		.loc 1 505 21 discriminator 1 view .LVU274
 1085 0258 8C2F      		mov r24,r28
 1086 025a 8170      		andi r24,lo8(1)
 1087               	.L75:
 505:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1088               		.loc 1 505 20 discriminator 4 view .LVU275
 1089 025c 8823      		tst r24
 1090 025e 01F4      		brne .+2
 1091 0260 00C0      		rjmp .L36
 1092               	.LBB31:
 506:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1093               		.loc 1 506 21 is_stmt 1 view .LVU276
 1094               	.LVL104:
 507:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1095               		.loc 1 507 21 view .LVU277
 506:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1096               		.loc 1 506 61 is_stmt 0 view .LVU278
 1097 0262 4D2F      		mov r20,r29
 1098 0264 4295      		swap r20
 1099 0266 4695      		lsr r20
 1100 0268 4770      		andi r20,lo8(7)
 506:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1101               		.loc 1 506 35 view .LVU279
 1102 026a 440F      		lsl r20
 1103 026c 440F      		lsl r20
 507:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1104               		.loc 1 507 77 view .LVU280
 1105 026e 0D2F      		mov r16,r29
 1106               	.LVL105:
 507:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1107               		.loc 1 507 77 view .LVU281
 1108 0270 0F70      		andi r16,lo8(15)
 507:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1109               		.loc 1 507 44 view .LVU282
 1110 0272 10E0      		ldi r17,0
 1111               	.LVL106:
 507:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1112               		.loc 1 507 44 view .LVU283
 1113 0274 30E0      		ldi r19,0
 1114 0276 20E0      		ldi r18,0
 507:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1115               		.loc 1 507 35 view .LVU284
 1116 0278 042E      		mov r0,r20
 1117 027a 00C0      		rjmp 2f
 1118               		1:
 1119 027c 000F      		lsl r16
 1120 027e 111F      		rol r17
 1121 0280 221F      		rol r18
 1122 0282 331F      		rol r19
 1123               		2:
 1124 0284 0A94      		dec r0
 1125 0286 02F4      		brpl 1b
 1126               	.LVL107:
 508:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1127               		.loc 1 508 21 is_stmt 1 view .LVU285
 508:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1128               		.loc 1 508 104 is_stmt 0 view .LVU286
 1129 0288 60E0      		ldi r22,0
 1130 028a 70E0      		ldi r23,0
 1131 028c CB01      		movw r24,r22
 1132 028e D4FF      		sbrs r29,4
 1133 0290 00C0      		rjmp .L76
 508:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1134               		.loc 1 508 94 discriminator 1 view .LVU287
 1135 0292 6FE0      		ldi r22,lo8(15)
 1136 0294 70E0      		ldi r23,0
 1137 0296 80E0      		ldi r24,0
 1138 0298 90E0      		ldi r25,0
 1139 029a 00C0      		rjmp 2f
 1140               		1:
 1141 029c 660F      		lsl r22
 1142 029e 771F      		rol r23
 1143 02a0 881F      		rol r24
 1144 02a2 991F      		rol r25
 1145               		2:
 1146 02a4 4A95      		dec r20
 1147 02a6 02F4      		brpl 1b
 508:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1148               		.loc 1 508 104 discriminator 1 view .LVU288
 1149 02a8 6095      		com r22
 1150 02aa 7095      		com r23
 1151 02ac 8095      		com r24
 1152 02ae 9095      		com r25
 1153               	.L76:
 1154               	.LVL108:
 509:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1155               		.loc 1 509 21 is_stmt 1 discriminator 4 view .LVU289
 509:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1156               		.loc 1 509 47 is_stmt 0 discriminator 4 view .LVU290
 1157 02b0 C695      		lsr r28
 1158 02b2 C695      		lsr r28
 1159               	.LVL109:
 509:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1160               		.loc 1 509 47 discriminator 4 view .LVU291
 1161 02b4 C370      		andi r28,lo8(3)
 1162 02b6 602B      		or r22,r16
 1163               	.LVL110:
 509:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1164               		.loc 1 509 47 discriminator 4 view .LVU292
 1165 02b8 712B      		or r23,r17
 1166 02ba 822B      		or r24,r18
 1167 02bc 932B      		or r25,r19
 1168 02be C230      		cpi r28,lo8(2)
 1169 02c0 01F0      		breq .L77
 1170 02c2 00F4      		brsh .L78
 1171 02c4 C130      		cpi r28,lo8(1)
 1172 02c6 01F0      		breq .L79
 511:tmk_core/common/action.c ****                             break;
 1173               		.loc 1 511 29 is_stmt 1 view .LVU293
 1174 02c8 0E94 0000 		call layer_and
 1175               	.LVL111:
 512:tmk_core/common/action.c ****                         case OP_BIT_OR:
 1176               		.loc 1 512 29 view .LVU294
 1177 02cc 00C0      		rjmp .L36
 1178               	.L79:
 514:tmk_core/common/action.c ****                             break;
 1179               		.loc 1 514 29 view .LVU295
 1180 02ce 0E94 0000 		call layer_or
 1181               	.LVL112:
 515:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 1182               		.loc 1 515 29 view .LVU296
 1183 02d2 00C0      		rjmp .L36
 1184               	.L77:
 517:tmk_core/common/action.c ****                             break;
 1185               		.loc 1 517 29 view .LVU297
 1186 02d4 0E94 0000 		call layer_xor
 1187               	.LVL113:
 518:tmk_core/common/action.c ****                         case OP_BIT_SET:
 1188               		.loc 1 518 29 view .LVU298
 1189 02d8 00C0      		rjmp .L36
 1190               	.L78:
 520:tmk_core/common/action.c ****                             break;
 1191               		.loc 1 520 29 view .LVU299
 1192 02da 0E94 0000 		call layer_state_set
 1193               	.LVL114:
 521:tmk_core/common/action.c ****                     }
 1194               		.loc 1 521 29 view .LVU300
 1195 02de 00C0      		rjmp .L36
 1196               	.LVL115:
 1197               	.L39:
 521:tmk_core/common/action.c ****                     }
 1198               		.loc 1 521 29 is_stmt 0 view .LVU301
 1199               	.LBE31:
 527:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 1200               		.loc 1 527 13 is_stmt 1 view .LVU302
 1201 02e0 CF70      		andi r28,lo8(15)
 1202               	.LVL116:
 527:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 1203               		.loc 1 527 16 is_stmt 0 view .LVU303
 1204 02e2 0023      		tst r16
 1205 02e4 01F0      		breq .L80
 528:tmk_core/common/action.c ****                 register_mods(action.layer_mods.mods);
 1206               		.loc 1 528 17 is_stmt 1 view .LVU304
 1207 02e6 8C2F      		mov r24,r28
 1208 02e8 0E94 0000 		call layer_on
 1209               	.LVL117:
 529:tmk_core/common/action.c ****             } else {
 1210               		.loc 1 529 17 view .LVU305
 1211 02ec 8D2F      		mov r24,r29
 1212 02ee 00C0      		rjmp .L134
 1213               	.L80:
 531:tmk_core/common/action.c ****                 layer_off(action.layer_mods.layer);
 1214               		.loc 1 531 17 view .LVU306
 1215 02f0 8D2F      		mov r24,r29
 1216 02f2 0E94 0000 		call unregister_mods
 1217               	.LVL118:
 532:tmk_core/common/action.c ****             }
 1218               		.loc 1 532 17 view .LVU307
 1219 02f6 8C2F      		mov r24,r28
 1220               	.LVL119:
 1221               	.L133:
 619:tmk_core/common/action.c ****                         }
 1222               		.loc 1 619 29 is_stmt 0 view .LVU308
 1223 02f8 0E94 0000 		call layer_off
 1224               	.LVL120:
 1225 02fc 00C0      		rjmp .L36
 1226               	.L37:
 538:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 1227               		.loc 1 538 13 is_stmt 1 view .LVU309
 1228 02fe D23F      		cpi r29,lo8(-14)
 1229 0300 01F0      		breq .L81
 1230 0302 00F4      		brsh .L82
 1231 0304 D03F      		cpi r29,lo8(-16)
 1232 0306 01F0      		breq .L83
 1233 0308 D13F      		cpi r29,lo8(-15)
 1234 030a 01F0      		breq .L84
 1235               	.L85:
 600:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1236               		.loc 1 600 21 view .LVU310
 600:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1237               		.loc 1 600 24 is_stmt 0 view .LVU311
 1238 030c 0023      		tst r16
 1239 030e 01F4      		brne .+2
 1240 0310 00C0      		rjmp .L94
 601:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1241               		.loc 1 601 25 is_stmt 1 view .LVU312
 601:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1242               		.loc 1 601 28 is_stmt 0 view .LVU313
 1243 0312 1111      		cpse r17,__zero_reg__
 1244 0314 00C0      		rjmp .L135
 605:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 1245               		.loc 1 605 76 is_stmt 1 view .LVU314
 606:tmk_core/common/action.c ****                         }
 1246               		.loc 1 606 29 view .LVU315
 1247 0316 8C2F      		mov r24,r28
 1248 0318 8F71      		andi r24,lo8(31)
 1249 031a 00C0      		rjmp .L132
 1250               	.L82:
 1251 031c D33F      		cpi r29,lo8(-13)
 1252 031e 01F0      		breq .L86
 1253 0320 D43F      		cpi r29,lo8(-12)
 1254 0322 01F4      		brne .L85
 586:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1255               		.loc 1 586 21 view .LVU316
 586:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1256               		.loc 1 586 24 is_stmt 0 view .LVU317
 1257 0324 0023      		tst r16
 1258 0326 01F0      		breq .L93
 587:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1259               		.loc 1 587 25 is_stmt 1 view .LVU318
 587:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1260               		.loc 1 587 50 is_stmt 0 view .LVU319
 1261 0328 CF71      		andi r28,lo8(31)
 1262               	.LVL121:
 587:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1263               		.loc 1 587 25 view .LVU320
 1264 032a 8C2F      		mov r24,r28
 1265 032c 0E94 0000 		call layer_on
 1266               	.LVL122:
 588:tmk_core/common/action.c ****                     } else {
 1267               		.loc 1 588 25 is_stmt 1 view .LVU321
 1268 0330 63E0      		ldi r22,lo8(3)
 1269 0332 8C2F      		mov r24,r28
 1270 0334 0E94 0000 		call set_oneshot_layer
 1271               	.LVL123:
 1272 0338 00C0      		rjmp .L36
 1273               	.LVL124:
 1274               	.L83:
 541:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1275               		.loc 1 541 21 view .LVU322
 541:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1276               		.loc 1 541 24 is_stmt 0 view .LVU323
 1277 033a 0023      		tst r16
 1278 033c 01F0      		breq .L88
 542:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1279               		.loc 1 542 25 is_stmt 1 view .LVU324
 542:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1280               		.loc 1 542 28 is_stmt 0 view .LVU325
 1281 033e 1530      		cpi r17,lo8(5)
 1282 0340 00F0      		brlo .+2
 1283 0342 00C0      		rjmp .L36
 1284               	.L89:
 543:tmk_core/common/action.c ****                         }
 1285               		.loc 1 543 29 is_stmt 1 view .LVU326
 1286 0344 8C2F      		mov r24,r28
 1287 0346 8F71      		andi r24,lo8(31)
 1288 0348 0E94 0000 		call layer_invert
 1289               	.LVL125:
 1290 034c 00C0      		rjmp .L36
 1291               	.L88:
 546:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1292               		.loc 1 546 25 view .LVU327
 546:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1293               		.loc 1 546 28 is_stmt 0 view .LVU328
 1294 034e 1630      		cpi r17,lo8(6)
 1295 0350 00F0      		brlo .+2
 1296 0352 00C0      		rjmp .L36
 1297 0354 00C0      		rjmp .L89
 1298               	.L84:
 552:tmk_core/common/action.c ****                     break;
 1299               		.loc 1 552 21 is_stmt 1 view .LVU329
 1300 0356 8C2F      		mov r24,r28
 1301 0358 8F71      		andi r24,lo8(31)
 552:tmk_core/common/action.c ****                     break;
 1302               		.loc 1 552 68 is_stmt 0 view .LVU330
 1303 035a 0023      		tst r16
 1304 035c 01F0      		breq .L133
 1305               	.L132:
 606:tmk_core/common/action.c ****                         }
 1306               		.loc 1 606 29 view .LVU331
 1307 035e 0E94 0000 		call layer_on
 1308               	.LVL126:
 1309 0362 00C0      		rjmp .L36
 1310               	.L81:
 555:tmk_core/common/action.c ****                     break;
 1311               		.loc 1 555 21 is_stmt 1 view .LVU332
 1312 0364 8C2F      		mov r24,r28
 1313 0366 8F71      		andi r24,lo8(31)
 555:tmk_core/common/action.c ****                     break;
 1314               		.loc 1 555 69 is_stmt 0 view .LVU333
 1315 0368 0023      		tst r16
 1316 036a 01F0      		breq .L132
 1317 036c 00C0      		rjmp .L133
 1318               	.L86:
 558:tmk_core/common/action.c ****                     break;
 1319               		.loc 1 558 21 is_stmt 1 view .LVU334
 558:tmk_core/common/action.c ****                     break;
 1320               		.loc 1 558 70 is_stmt 0 view .LVU335
 1321 036e 0023      		tst r16
 1322 0370 01F0      		breq .L92
 558:tmk_core/common/action.c ****                     break;
 1323               		.loc 1 558 37 discriminator 1 view .LVU336
 1324 0372 8C2F      		mov r24,r28
 1325 0374 8F71      		andi r24,lo8(31)
 1326 0376 0E94 0000 		call layer_move
 1327               	.LVL127:
 1328 037a 00C0      		rjmp .L36
 1329               	.L92:
 558:tmk_core/common/action.c ****                     break;
 1330               		.loc 1 558 72 discriminator 2 view .LVU337
 1331 037c 0E94 0000 		call layer_clear
 1332               	.LVL128:
 1333 0380 00C0      		rjmp .L36
 1334               	.L93:
 590:tmk_core/common/action.c ****                         if (tap_count > 1) {
 1335               		.loc 1 590 25 is_stmt 1 view .LVU338
 1336 0382 81E0      		ldi r24,lo8(1)
 1337 0384 0E94 0000 		call clear_oneshot_layer_state
 1338               	.LVL129:
 591:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1339               		.loc 1 591 25 view .LVU339
 591:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1340               		.loc 1 591 28 is_stmt 0 view .LVU340
 1341 0388 1230      		cpi r17,lo8(2)
 1342 038a 00F4      		brsh .+2
 1343 038c 00C0      		rjmp .L36
 592:tmk_core/common/action.c ****                         }
 1344               		.loc 1 592 29 is_stmt 1 view .LVU341
 1345 038e 82E0      		ldi r24,lo8(2)
 1346 0390 0E94 0000 		call clear_oneshot_layer_state
 1347               	.LVL130:
 1348 0394 00C0      		rjmp .L36
 1349               	.L94:
 609:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1350               		.loc 1 609 25 view .LVU342
 609:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1351               		.loc 1 609 28 is_stmt 0 view .LVU343
 1352 0396 1123      		tst r17
 1353 0398 01F0      		breq .L96
 610:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 1354               		.loc 1 610 77 is_stmt 1 view .LVU344
 611:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1355               		.loc 1 611 29 view .LVU345
 611:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1356               		.loc 1 611 32 is_stmt 0 view .LVU346
 1357 039a D933      		cpi r29,lo8(57)
 1358 039c 01F0      		breq .+2
 1359 039e 00C0      		rjmp .L98
 612:tmk_core/common/action.c ****                             } else {
 1360               		.loc 1 612 33 is_stmt 1 view .LVU347
 1361               	.LVL131:
 1362               	.LBB32:
 1363               	.LBI27:
 166:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** {
 1364               		.loc 2 166 1 view .LVU348
 1365               	.LBB29:
 168:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1366               		.loc 2 168 2 view .LVU349
 172:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1367               		.loc 2 172 2 view .LVU350
 173:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1368               		.loc 2 173 2 view .LVU351
 174:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 
 1369               		.loc 2 174 2 view .LVU352
 184:/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/util/delay.h **** 	#endif
 1370               		.loc 2 184 3 view .LVU353
 1371               		.loc 2 187 2 view .LVU354
 1372 03a0 8FEF      		ldi r24,lo8(255999)
 1373 03a2 97EE      		ldi r25,hi8(255999)
 1374 03a4 E3E0      		ldi r30,hlo8(255999)
 1375 03a6 8150      	1:	subi r24,1
 1376 03a8 9040      		sbci r25,0
 1377 03aa E040      		sbci r30,0
 1378 03ac 01F4      		brne 1b
 1379 03ae 00C0      		rjmp .L137
 1380               	.LVL132:
 1381               	.L96:
 1382               		.loc 2 187 2 is_stmt 0 view .LVU355
 1383               	.LBE29:
 1384               	.LBE32:
 618:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 1385               		.loc 1 618 79 is_stmt 1 view .LVU356
 619:tmk_core/common/action.c ****                         }
 1386               		.loc 1 619 29 view .LVU357
 1387 03b0 8C2F      		mov r24,r28
 1388 03b2 8F71      		andi r24,lo8(31)
 1389 03b4 00C0      		rjmp .L133
 1390               	.LVL133:
 1391               	.L32:
 1392               	/* epilogue start */
 777:tmk_core/common/action.c **** 
 1393               		.loc 1 777 1 is_stmt 0 view .LVU358
 1394 03b6 DF91      		pop r29
 1395               	.LVL134:
 777:tmk_core/common/action.c **** 
 1396               		.loc 1 777 1 view .LVU359
 1397 03b8 CF91      		pop r28
 777:tmk_core/common/action.c **** 
 1398               		.loc 1 777 1 view .LVU360
 1399 03ba 1F91      		pop r17
 1400 03bc 0F91      		pop r16
 1401 03be FF90      		pop r15
 1402 03c0 EF90      		pop r14
 1403               	.LVL135:
 777:tmk_core/common/action.c **** 
 1404               		.loc 1 777 1 view .LVU361
 1405 03c2 DF90      		pop r13
 1406 03c4 CF90      		pop r12
 1407               	.LVL136:
 777:tmk_core/common/action.c **** 
 1408               		.loc 1 777 1 view .LVU362
 1409 03c6 BF90      		pop r11
 1410 03c8 0895      		ret
 1411               		.cfi_endproc
 1412               	.LFE22:
 1414               		.section	.text.process_record_handler,"ax",@progbits
 1415               	.global	process_record_handler
 1417               	process_record_handler:
 1418               	.LVL137:
 1419               	.LFB21:
 216:tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 1420               		.loc 1 216 50 is_stmt 1 view -0
 1421               		.cfi_startproc
 216:tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 1422               		.loc 1 216 50 is_stmt 0 view .LVU364
 1423 0000 0F93      		push r16
 1424               	.LCFI15:
 1425               		.cfi_def_cfa_offset 3
 1426               		.cfi_offset 16, -2
 1427 0002 1F93      		push r17
 1428               	.LCFI16:
 1429               		.cfi_def_cfa_offset 4
 1430               		.cfi_offset 17, -3
 1431 0004 CF93      		push r28
 1432               	.LCFI17:
 1433               		.cfi_def_cfa_offset 5
 1434               		.cfi_offset 28, -4
 1435 0006 DF93      		push r29
 1436               	.LCFI18:
 1437               		.cfi_def_cfa_offset 6
 1438               		.cfi_offset 29, -5
 1439               	/* prologue: function */
 1440               	/* frame size = 0 */
 1441               	/* stack size = 4 */
 1442               	.L__stack_usage = 4
 1443 0008 EC01      		movw r28,r24
 217:tmk_core/common/action.c ****     dprint("ACTION: ");
 1444               		.loc 1 217 5 is_stmt 1 view .LVU365
 217:tmk_core/common/action.c ****     dprint("ACTION: ");
 1445               		.loc 1 217 23 is_stmt 0 view .LVU366
 1446 000a 6881      		ld r22,Y
 1447 000c 7981      		ldd r23,Y+1
 1448 000e 8A81      		ldd r24,Y+2
 1449               	.LVL138:
 217:tmk_core/common/action.c ****     dprint("ACTION: ");
 1450               		.loc 1 217 23 view .LVU367
 1451 0010 0E94 0000 		call store_or_get_action
 1452               	.LVL139:
 1453 0014 8C01      		movw r16,r24
 1454               	.LVL140:
 218:tmk_core/common/action.c ****     debug_action(action);
 1455               		.loc 1 218 23 is_stmt 1 view .LVU368
 219:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 1456               		.loc 1 219 5 view .LVU369
 221:tmk_core/common/action.c ****     layer_debug();
 1457               		.loc 1 221 29 view .LVU370
 222:tmk_core/common/action.c ****     dprint(" default_layer_state: ");
 1458               		.loc 1 222 5 view .LVU371
 1459 0016 0E94 0000 		call layer_debug
 1460               	.LVL141:
 223:tmk_core/common/action.c ****     default_layer_debug();
 1461               		.loc 1 223 37 view .LVU372
 224:tmk_core/common/action.c **** #endif
 1462               		.loc 1 224 5 view .LVU373
 1463 001a 0E94 0000 		call default_layer_debug
 1464               	.LVL142:
 226:tmk_core/common/action.c **** 
 1465               		.loc 1 226 15 view .LVU374
 228:tmk_core/common/action.c **** }
 1466               		.loc 1 228 5 view .LVU375
 228:tmk_core/common/action.c **** }
 1467               		.loc 1 228 5 is_stmt 0 view .LVU376
 1468 001e B801      		movw r22,r16
 1469 0020 CE01      		movw r24,r28
 1470               	/* epilogue start */
 229:tmk_core/common/action.c **** 
 1471               		.loc 1 229 1 view .LVU377
 1472 0022 DF91      		pop r29
 1473 0024 CF91      		pop r28
 1474               	.LVL143:
 229:tmk_core/common/action.c **** 
 1475               		.loc 1 229 1 view .LVU378
 1476 0026 1F91      		pop r17
 1477 0028 0F91      		pop r16
 1478               	.LVL144:
 228:tmk_core/common/action.c **** }
 1479               		.loc 1 228 5 view .LVU379
 1480 002a 0C94 0000 		jmp process_action
 1481               	.LVL145:
 228:tmk_core/common/action.c **** }
 1482               		.loc 1 228 5 view .LVU380
 1483               		.cfi_endproc
 1484               	.LFE21:
 1486               		.section	.text.process_record,"ax",@progbits
 1487               	.global	process_record
 1489               	process_record:
 1490               	.LVL146:
 1491               	.LFB20:
 198:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1492               		.loc 1 198 42 is_stmt 1 view -0
 1493               		.cfi_startproc
 198:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1494               		.loc 1 198 42 is_stmt 0 view .LVU382
 1495 0000 CF93      		push r28
 1496               	.LCFI19:
 1497               		.cfi_def_cfa_offset 3
 1498               		.cfi_offset 28, -2
 1499 0002 DF93      		push r29
 1500               	.LCFI20:
 1501               		.cfi_def_cfa_offset 4
 1502               		.cfi_offset 29, -3
 1503               	/* prologue: function */
 1504               	/* frame size = 0 */
 1505               	/* stack size = 2 */
 1506               	.L__stack_usage = 2
 1507 0004 EC01      		movw r28,r24
 199:tmk_core/common/action.c ****         return;
 1508               		.loc 1 199 5 is_stmt 1 view .LVU383
 1509               	.LBB35:
 1510               	.LBI35:
 1511               		.file 3 "tmk_core/common/keyboard.h"
   1:tmk_core/common/keyboard.h **** /*
   2:tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.h **** 
   4:tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.h **** (at your option) any later version.
   8:tmk_core/common/keyboard.h **** 
   9:tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.h **** 
  14:tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.h **** */
  17:tmk_core/common/keyboard.h **** 
  18:tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:tmk_core/common/keyboard.h **** 
  21:tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:tmk_core/common/keyboard.h **** #include <stdint.h>
  23:tmk_core/common/keyboard.h **** 
  24:tmk_core/common/keyboard.h **** #ifdef __cplusplus
  25:tmk_core/common/keyboard.h **** extern "C" {
  26:tmk_core/common/keyboard.h **** #endif
  27:tmk_core/common/keyboard.h **** 
  28:tmk_core/common/keyboard.h **** /* key matrix position */
  29:tmk_core/common/keyboard.h **** typedef struct {
  30:tmk_core/common/keyboard.h ****     uint8_t col;
  31:tmk_core/common/keyboard.h ****     uint8_t row;
  32:tmk_core/common/keyboard.h **** } keypos_t;
  33:tmk_core/common/keyboard.h **** 
  34:tmk_core/common/keyboard.h **** /* key event */
  35:tmk_core/common/keyboard.h **** typedef struct {
  36:tmk_core/common/keyboard.h ****     keypos_t key;
  37:tmk_core/common/keyboard.h ****     bool     pressed;
  38:tmk_core/common/keyboard.h ****     uint16_t time;
  39:tmk_core/common/keyboard.h **** } keyevent_t;
  40:tmk_core/common/keyboard.h **** 
  41:tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  42:tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb) ((keya).row == (keyb).row && (keya).col == (keyb).col)
  43:tmk_core/common/keyboard.h **** 
  44:tmk_core/common/keyboard.h **** /* Rules for No Event:
  45:tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  46:tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  47:tmk_core/common/keyboard.h ****  */
  48:tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 1512               		.loc 3 48 20 view .LVU384
 1513               	.LBB36:
 1514               		.loc 3 48 51 view .LVU385
 1515               		.loc 3 48 74 is_stmt 0 view .LVU386
 1516 0006 8B81      		ldd r24,Y+3
 1517 0008 9C81      		ldd r25,Y+4
 1518               	.LVL147:
 1519               		.loc 3 48 74 view .LVU387
 1520 000a 892B      		or r24,r25
 1521 000c 01F0      		breq .L139
 1522 000e 8881      		ld r24,Y
 1523 0010 9981      		ldd r25,Y+1
 1524 0012 8923      		and r24,r25
 1525 0014 8F3F      		cpi r24,lo8(-1)
 1526 0016 01F4      		brne .L155
 1527               	.L139:
 1528               	/* epilogue start */
 1529               	.LBE36:
 1530               	.LBE35:
 214:tmk_core/common/action.c **** 
 1531               		.loc 1 214 1 view .LVU388
 1532 0018 DF91      		pop r29
 1533 001a CF91      		pop r28
 1534               	.LVL148:
 214:tmk_core/common/action.c **** 
 1535               		.loc 1 214 1 view .LVU389
 1536 001c 0895      		ret
 1537               	.LVL149:
 1538               	.L144:
 212:tmk_core/common/action.c ****     post_process_record_quantum(record);
 1539               		.loc 1 212 5 is_stmt 1 view .LVU390
 1540 001e CE01      		movw r24,r28
 1541 0020 0E94 0000 		call process_record_handler
 1542               	.LVL150:
 213:tmk_core/common/action.c **** }
 1543               		.loc 1 213 5 view .LVU391
 1544 0024 CE01      		movw r24,r28
 1545               	/* epilogue start */
 214:tmk_core/common/action.c **** 
 1546               		.loc 1 214 1 is_stmt 0 view .LVU392
 1547 0026 DF91      		pop r29
 1548 0028 CF91      		pop r28
 1549               	.LVL151:
 213:tmk_core/common/action.c **** }
 1550               		.loc 1 213 5 view .LVU393
 1551 002a 0C94 0000 		jmp post_process_record_quantum
 1552               	.LVL152:
 1553               	.L155:
 203:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 1554               		.loc 1 203 5 is_stmt 1 view .LVU394
 203:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 1555               		.loc 1 203 10 is_stmt 0 view .LVU395
 1556 002e CE01      		movw r24,r28
 1557 0030 0E94 0000 		call process_record_quantum
 1558               	.LVL153:
 203:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 1559               		.loc 1 203 8 view .LVU396
 1560 0034 8111      		cpse r24,__zero_reg__
 1561 0036 00C0      		rjmp .L144
 205:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1562               		.loc 1 205 9 is_stmt 1 view .LVU397
 205:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1563               		.loc 1 205 13 is_stmt 0 view .LVU398
 1564 0038 0E94 0000 		call is_oneshot_layer_active
 1565               	.LVL154:
 205:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1566               		.loc 1 205 12 view .LVU399
 1567 003c 8823      		tst r24
 1568 003e 01F0      		breq .L139
 205:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1569               		.loc 1 205 39 discriminator 1 view .LVU400
 1570 0040 8A81      		ldd r24,Y+2
 1571 0042 8823      		tst r24
 1572 0044 01F0      		breq .L139
 206:tmk_core/common/action.c ****         }
 1573               		.loc 1 206 13 is_stmt 1 view .LVU401
 1574 0046 82E0      		ldi r24,lo8(2)
 1575               	/* epilogue start */
 214:tmk_core/common/action.c **** 
 1576               		.loc 1 214 1 is_stmt 0 view .LVU402
 1577 0048 DF91      		pop r29
 1578 004a CF91      		pop r28
 1579               	.LVL155:
 206:tmk_core/common/action.c ****         }
 1580               		.loc 1 206 13 view .LVU403
 1581 004c 0C94 0000 		jmp clear_oneshot_layer_state
 1582               	.LVL156:
 1583               		.cfi_endproc
 1584               	.LFE20:
 1586               		.section	.text.process_record_nocache,"ax",@progbits
 1587               	.global	process_record_nocache
 1589               	process_record_nocache:
 1590               	.LVL157:
 1591               	.LFB16:
 156:tmk_core/common/action.c ****     disable_action_cache = true;
 1592               		.loc 1 156 50 is_stmt 1 view -0
 1593               		.cfi_startproc
 1594               	/* prologue: function */
 1595               	/* frame size = 0 */
 1596               	/* stack size = 0 */
 1597               	.L__stack_usage = 0
 157:tmk_core/common/action.c ****     process_record(record);
 1598               		.loc 1 157 5 view .LVU405
 157:tmk_core/common/action.c ****     process_record(record);
 1599               		.loc 1 157 26 is_stmt 0 view .LVU406
 1600 0000 21E0      		ldi r18,lo8(1)
 1601 0002 2093 0000 		sts disable_action_cache,r18
 158:tmk_core/common/action.c ****     disable_action_cache = false;
 1602               		.loc 1 158 5 is_stmt 1 view .LVU407
 1603 0006 0E94 0000 		call process_record
 1604               	.LVL158:
 159:tmk_core/common/action.c **** }
 1605               		.loc 1 159 5 view .LVU408
 159:tmk_core/common/action.c **** }
 1606               		.loc 1 159 26 is_stmt 0 view .LVU409
 1607 000a 1092 0000 		sts disable_action_cache,__zero_reg__
 1608               	/* epilogue start */
 160:tmk_core/common/action.c **** #else
 1609               		.loc 1 160 1 view .LVU410
 1610 000e 0895      		ret
 1611               		.cfi_endproc
 1612               	.LFE16:
 1614               		.section	.text.register_weak_mods,"ax",@progbits
 1615               	.global	register_weak_mods
 1617               	register_weak_mods:
 1618               	.LVL159:
 1619               	.LFB28:
 974:tmk_core/common/action.c **** 
 975:tmk_core/common/action.c **** /** \brief Adds the given weak modifiers and sends a keyboard report immediately.
 976:tmk_core/common/action.c ****  *
 977:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to register.
 978:tmk_core/common/action.c ****  */
 979:tmk_core/common/action.c **** void register_weak_mods(uint8_t mods) {
 1620               		.loc 1 979 39 is_stmt 1 view -0
 1621               		.cfi_startproc
 1622               	/* prologue: function */
 1623               	/* frame size = 0 */
 1624               	/* stack size = 0 */
 1625               	.L__stack_usage = 0
 980:tmk_core/common/action.c ****     if (mods) {
 1626               		.loc 1 980 5 view .LVU412
 1627               		.loc 1 980 8 is_stmt 0 view .LVU413
 1628 0000 8823      		tst r24
 1629 0002 01F0      		breq .L158
 981:tmk_core/common/action.c ****         add_weak_mods(mods);
 1630               		.loc 1 981 9 is_stmt 1 view .LVU414
 1631 0004 0E94 0000 		call add_weak_mods
 1632               	.LVL160:
 982:tmk_core/common/action.c ****         send_keyboard_report();
 1633               		.loc 1 982 9 view .LVU415
 1634 0008 0C94 0000 		jmp send_keyboard_report
 1635               	.LVL161:
 1636               	.L158:
 1637               	/* epilogue start */
 983:tmk_core/common/action.c ****     }
 984:tmk_core/common/action.c **** }
 1638               		.loc 1 984 1 is_stmt 0 view .LVU416
 1639 000c 0895      		ret
 1640               		.cfi_endproc
 1641               	.LFE28:
 1643               		.section	.text.unregister_weak_mods,"ax",@progbits
 1644               	.global	unregister_weak_mods
 1646               	unregister_weak_mods:
 1647               	.LVL162:
 1648               	.LFB29:
 985:tmk_core/common/action.c **** 
 986:tmk_core/common/action.c **** /** \brief Removes the given weak modifiers and sends a keyboard report immediately.
 987:tmk_core/common/action.c ****  *
 988:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to unregister.
 989:tmk_core/common/action.c ****  */
 990:tmk_core/common/action.c **** void unregister_weak_mods(uint8_t mods) {
 1649               		.loc 1 990 41 is_stmt 1 view -0
 1650               		.cfi_startproc
 1651               	/* prologue: function */
 1652               	/* frame size = 0 */
 1653               	/* stack size = 0 */
 1654               	.L__stack_usage = 0
 991:tmk_core/common/action.c ****     if (mods) {
 1655               		.loc 1 991 5 view .LVU418
 1656               		.loc 1 991 8 is_stmt 0 view .LVU419
 1657 0000 8823      		tst r24
 1658 0002 01F0      		breq .L160
 992:tmk_core/common/action.c ****         del_weak_mods(mods);
 1659               		.loc 1 992 9 is_stmt 1 view .LVU420
 1660 0004 0E94 0000 		call del_weak_mods
 1661               	.LVL163:
 993:tmk_core/common/action.c ****         send_keyboard_report();
 1662               		.loc 1 993 9 view .LVU421
 1663 0008 0C94 0000 		jmp send_keyboard_report
 1664               	.LVL164:
 1665               	.L160:
 1666               	/* epilogue start */
 994:tmk_core/common/action.c ****     }
 995:tmk_core/common/action.c **** }
 1667               		.loc 1 995 1 is_stmt 0 view .LVU422
 1668 000c 0895      		ret
 1669               		.cfi_endproc
 1670               	.LFE29:
 1672               		.section	.text.clear_keyboard_but_mods_and_keys,"ax",@progbits
 1673               	.global	clear_keyboard_but_mods_and_keys
 1675               	clear_keyboard_but_mods_and_keys:
 1676               	.LFB32:
 996:tmk_core/common/action.c **** 
 997:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 998:tmk_core/common/action.c ****  *
 999:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1000:tmk_core/common/action.c ****  */
1001:tmk_core/common/action.c **** void clear_keyboard(void) {
1002:tmk_core/common/action.c ****     clear_mods();
1003:tmk_core/common/action.c ****     clear_keyboard_but_mods();
1004:tmk_core/common/action.c **** }
1005:tmk_core/common/action.c **** 
1006:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
1007:tmk_core/common/action.c ****  *
1008:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1009:tmk_core/common/action.c ****  */
1010:tmk_core/common/action.c **** void clear_keyboard_but_mods(void) {
1011:tmk_core/common/action.c ****     clear_keys();
1012:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
1013:tmk_core/common/action.c **** }
1014:tmk_core/common/action.c **** 
1015:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
1016:tmk_core/common/action.c ****  *
1017:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1018:tmk_core/common/action.c ****  */
1019:tmk_core/common/action.c **** void clear_keyboard_but_mods_and_keys() {
 1677               		.loc 1 1019 41 is_stmt 1 view -0
 1678               		.cfi_startproc
 1679               	/* prologue: function */
 1680               	/* frame size = 0 */
 1681               	/* stack size = 0 */
 1682               	.L__stack_usage = 0
1020:tmk_core/common/action.c ****     clear_weak_mods();
 1683               		.loc 1 1020 5 view .LVU424
 1684 0000 0E94 0000 		call clear_weak_mods
 1685               	.LVL165:
1021:tmk_core/common/action.c ****     clear_macro_mods();
 1686               		.loc 1 1021 5 view .LVU425
 1687 0004 0E94 0000 		call clear_macro_mods
 1688               	.LVL166:
1022:tmk_core/common/action.c ****     send_keyboard_report();
 1689               		.loc 1 1022 5 view .LVU426
 1690 0008 0C94 0000 		jmp send_keyboard_report
 1691               	.LVL167:
 1692               		.cfi_endproc
 1693               	.LFE32:
 1695               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1696               	.global	clear_keyboard_but_mods
 1698               	clear_keyboard_but_mods:
 1699               	.LFB31:
1010:tmk_core/common/action.c ****     clear_keys();
 1700               		.loc 1 1010 36 view -0
 1701               		.cfi_startproc
 1702               	/* prologue: function */
 1703               	/* frame size = 0 */
 1704               	/* stack size = 0 */
 1705               	.L__stack_usage = 0
1011:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 1706               		.loc 1 1011 5 view .LVU428
 1707 0000 0E94 0000 		call clear_keys
 1708               	.LVL168:
1012:tmk_core/common/action.c **** }
 1709               		.loc 1 1012 5 view .LVU429
 1710 0004 0C94 0000 		jmp clear_keyboard_but_mods_and_keys
 1711               	.LVL169:
 1712               		.cfi_endproc
 1713               	.LFE31:
 1715               		.section	.text.clear_keyboard,"ax",@progbits
 1716               	.global	clear_keyboard
 1718               	clear_keyboard:
 1719               	.LFB30:
1001:tmk_core/common/action.c ****     clear_mods();
 1720               		.loc 1 1001 27 view -0
 1721               		.cfi_startproc
 1722               	/* prologue: function */
 1723               	/* frame size = 0 */
 1724               	/* stack size = 0 */
 1725               	.L__stack_usage = 0
1002:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1726               		.loc 1 1002 5 view .LVU431
 1727 0000 0E94 0000 		call clear_mods
 1728               	.LVL170:
1003:tmk_core/common/action.c **** }
 1729               		.loc 1 1003 5 view .LVU432
 1730 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1731               	.LVL171:
 1732               		.cfi_endproc
 1733               	.LFE30:
 1735               		.section	.text.is_tap_action,"ax",@progbits
 1736               	.global	is_tap_action
 1738               	is_tap_action:
 1739               	.LVL172:
 1740               	.LFB34:
1023:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
1024:tmk_core/common/action.c ****     mousekey_clear();
1025:tmk_core/common/action.c ****     mousekey_send();
1026:tmk_core/common/action.c **** #endif
1027:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
1028:tmk_core/common/action.c ****     host_system_send(0);
1029:tmk_core/common/action.c ****     host_consumer_send(0);
1030:tmk_core/common/action.c **** #endif
1031:tmk_core/common/action.c **** }
1032:tmk_core/common/action.c **** 
1033:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
1034:tmk_core/common/action.c ****  *
1035:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1036:tmk_core/common/action.c ****  */
1037:tmk_core/common/action.c **** bool is_tap_key(keypos_t key) {
1038:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
1039:tmk_core/common/action.c ****     return is_tap_action(action);
1040:tmk_core/common/action.c **** }
1041:tmk_core/common/action.c **** 
1042:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
1043:tmk_core/common/action.c ****  *
1044:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1045:tmk_core/common/action.c ****  */
1046:tmk_core/common/action.c **** bool is_tap_action(action_t action) {
 1741               		.loc 1 1046 37 view -0
 1742               		.cfi_startproc
 1743               	/* prologue: function */
 1744               	/* frame size = 0 */
 1745               	/* stack size = 0 */
 1746               	.L__stack_usage = 0
1047:tmk_core/common/action.c ****     switch (action.kind.id) {
 1747               		.loc 1 1047 5 view .LVU434
 1748               		.loc 1 1047 24 is_stmt 0 view .LVU435
 1749 0000 E92F      		mov r30,r25
 1750 0002 E295      		swap r30
 1751 0004 EF70      		andi r30,lo8(15)
 1752               		.loc 1 1047 5 view .LVU436
 1753 0006 E250      		subi r30,lo8(-(-2))
 1754 0008 EE30      		cpi r30,lo8(14)
 1755 000a 00F4      		brsh .L174
 1756 000c F0E0      		ldi r31,0
 1757 000e E050      		subi r30,lo8(-(gs(.L168)))
 1758 0010 F040      		sbci r31,hi8(-(gs(.L168)))
 1759 0012 0C94 0000 		jmp __tablejump2__
 1760               		.section	.jumptables.gcc.is_tap_action,"a",@progbits
 1761               		.p2align	1
 1762               	.L168:
 1763 0000 0000      		.word gs(.L169)
 1764 0002 0000      		.word gs(.L169)
 1765 0004 0000      		.word gs(.L174)
 1766 0006 0000      		.word gs(.L174)
 1767 0008 0000      		.word gs(.L170)
 1768 000a 0000      		.word gs(.L174)
 1769 000c 0000      		.word gs(.L174)
 1770 000e 0000      		.word gs(.L174)
 1771 0010 0000      		.word gs(.L169)
 1772 0012 0000      		.word gs(.L169)
 1773 0014 0000      		.word gs(.L167)
 1774 0016 0000      		.word gs(.L174)
 1775 0018 0000      		.word gs(.L174)
 1776 001a 0000      		.word gs(.L167)
 1777               		.section	.text.is_tap_action
 1778               	.L169:
1048:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
1049:tmk_core/common/action.c ****         case ACT_RMODS_TAP:
1050:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
1051:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
1052:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1779               		.loc 1 1052 13 is_stmt 1 view .LVU437
 1780 0016 803F      		cpi r24,lo8(-16)
 1781 0018 01F0      		breq .L177
 1782 001a 00F4      		brsh .L171
 1783 001c 883E      		cpi r24,lo8(-24)
 1784 001e 00F4      		brsh .L174
 1785               	.L177:
1053:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
1054:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
1055:tmk_core/common/action.c ****                 case OP_ONESHOT:
1056:tmk_core/common/action.c ****                     return true;
 1786               		.loc 1 1056 28 is_stmt 0 view .LVU438
 1787 0020 81E0      		ldi r24,lo8(1)
 1788               	.LVL173:
 1789               	/* epilogue start */
1057:tmk_core/common/action.c ****             }
1058:tmk_core/common/action.c ****             return false;
1059:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
1060:tmk_core/common/action.c ****             switch (action.swap.code) {
1061:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
1062:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
1063:tmk_core/common/action.c ****                     return true;
1064:tmk_core/common/action.c ****             }
1065:tmk_core/common/action.c ****             return false;
1066:tmk_core/common/action.c ****         case ACT_MACRO:
1067:tmk_core/common/action.c ****         case ACT_FUNCTION:
1068:tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) {
1069:tmk_core/common/action.c ****                 return true;
1070:tmk_core/common/action.c ****             }
1071:tmk_core/common/action.c ****             return false;
1072:tmk_core/common/action.c ****     }
1073:tmk_core/common/action.c ****     return false;
1074:tmk_core/common/action.c **** }
 1790               		.loc 1 1074 1 view .LVU439
 1791 0022 0895      		ret
 1792               	.LVL174:
 1793               	.L171:
 1794               		.loc 1 1074 1 view .LVU440
 1795 0024 843F      		cpi r24,lo8(-12)
 1796 0026 01F0      		breq .L177
 1797               	.L174:
1058:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 1798               		.loc 1 1058 20 view .LVU441
 1799 0028 80E0      		ldi r24,0
 1800               	.LVL175:
1058:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 1801               		.loc 1 1058 20 view .LVU442
 1802 002a 0895      		ret
 1803               	.LVL176:
 1804               	.L170:
1060:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 1805               		.loc 1 1060 13 is_stmt 1 view .LVU443
 1806 002c 883E      		cpi r24,lo8(-24)
 1807 002e 00F0      		brlo .L177
 1808 0030 813F      		cpi r24,lo8(-15)
 1809 0032 01F4      		brne .L174
 1810 0034 00C0      		rjmp .L177
 1811               	.L167:
1068:tmk_core/common/action.c ****                 return true;
 1812               		.loc 1 1068 13 view .LVU444
1068:tmk_core/common/action.c ****                 return true;
 1813               		.loc 1 1068 16 is_stmt 0 view .LVU445
 1814 0036 93FB      		bst r25,3
 1815 0038 8827      		clr r24
 1816 003a 80F9      		bld r24,0
 1817               	.LVL177:
1068:tmk_core/common/action.c ****                 return true;
 1818               		.loc 1 1068 16 view .LVU446
 1819 003c 0895      		ret
 1820               		.cfi_endproc
 1821               	.LFE34:
 1823               		.section	.text.is_tap_key,"ax",@progbits
 1824               	.global	is_tap_key
 1826               	is_tap_key:
 1827               	.LVL178:
 1828               	.LFB33:
1037:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1829               		.loc 1 1037 31 is_stmt 1 view -0
 1830               		.cfi_startproc
 1831               	/* prologue: function */
 1832               	/* frame size = 0 */
 1833               	/* stack size = 0 */
 1834               	.L__stack_usage = 0
1038:tmk_core/common/action.c ****     return is_tap_action(action);
 1835               		.loc 1 1038 5 view .LVU448
1038:tmk_core/common/action.c ****     return is_tap_action(action);
 1836               		.loc 1 1038 23 is_stmt 0 view .LVU449
 1837 0000 0E94 0000 		call layer_switch_get_action
 1838               	.LVL179:
1039:tmk_core/common/action.c **** }
 1839               		.loc 1 1039 5 is_stmt 1 view .LVU450
1039:tmk_core/common/action.c **** }
 1840               		.loc 1 1039 12 is_stmt 0 view .LVU451
 1841 0004 0C94 0000 		jmp is_tap_action
 1842               	.LVL180:
 1843               		.cfi_endproc
 1844               	.LFE33:
 1846               		.section	.text.debug_event,"ax",@progbits
 1847               	.global	debug_event
 1849               	debug_event:
 1850               	.LFB35:
1075:tmk_core/common/action.c **** 
1076:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1077:tmk_core/common/action.c ****  *
1078:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1079:tmk_core/common/action.c ****  */
1080:tmk_core/common/action.c **** void debug_event(keyevent_t event) { dprintf("%04X%c(%u)", (event.key.row << 8 | event.key.col), (e
 1851               		.loc 1 1080 36 is_stmt 1 view -0
 1852               		.cfi_startproc
 1853 0000 CF93      		push r28
 1854               	.LCFI21:
 1855               		.cfi_def_cfa_offset 3
 1856               		.cfi_offset 28, -2
 1857 0002 DF93      		push r29
 1858               	.LCFI22:
 1859               		.cfi_def_cfa_offset 4
 1860               		.cfi_offset 29, -3
 1861 0004 00D0      		rcall .
 1862 0006 00D0      		rcall .
 1863 0008 0F92      		push __tmp_reg__
 1864               	.LCFI23:
 1865               		.cfi_def_cfa_offset 9
 1866 000a CDB7      		in r28,__SP_L__
 1867 000c DEB7      		in r29,__SP_H__
 1868               	.LCFI24:
 1869               		.cfi_def_cfa_register 28
 1870               	/* prologue: function */
 1871               	/* frame size = 5 */
 1872               	/* stack size = 7 */
 1873               	.L__stack_usage = 7
 1874               		.loc 1 1080 138 view .LVU453
 1875               	/* epilogue start */
 1876               		.loc 1 1080 1 is_stmt 0 view .LVU454
 1877 000e 0F90      		pop __tmp_reg__
 1878 0010 0F90      		pop __tmp_reg__
 1879 0012 0F90      		pop __tmp_reg__
 1880 0014 0F90      		pop __tmp_reg__
 1881 0016 0F90      		pop __tmp_reg__
 1882 0018 DF91      		pop r29
 1883 001a CF91      		pop r28
 1884 001c 0895      		ret
 1885               		.cfi_endproc
 1886               	.LFE35:
 1888               		.section	.text.debug_record,"ax",@progbits
 1889               	.global	debug_record
 1891               	debug_record:
 1892               	.LFB36:
1081:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1082:tmk_core/common/action.c ****  *
1083:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1084:tmk_core/common/action.c ****  */
1085:tmk_core/common/action.c **** void debug_record(keyrecord_t record) {
 1893               		.loc 1 1085 39 is_stmt 1 view -0
 1894               		.cfi_startproc
 1895 0000 CF93      		push r28
 1896               	.LCFI25:
 1897               		.cfi_def_cfa_offset 3
 1898               		.cfi_offset 28, -2
 1899 0002 DF93      		push r29
 1900               	.LCFI26:
 1901               		.cfi_def_cfa_offset 4
 1902               		.cfi_offset 29, -3
 1903 0004 00D0      		rcall .
 1904 0006 00D0      		rcall .
 1905 0008 00D0      		rcall .
 1906               	.LCFI27:
 1907               		.cfi_def_cfa_offset 10
 1908 000a CDB7      		in r28,__SP_L__
 1909 000c DEB7      		in r29,__SP_H__
 1910               	.LCFI28:
 1911               		.cfi_def_cfa_register 28
 1912               	/* prologue: function */
 1913               	/* frame size = 6 */
 1914               	/* stack size = 8 */
 1915               	.L__stack_usage = 8
1086:tmk_core/common/action.c ****     debug_event(record.event);
 1916               		.loc 1 1086 5 view .LVU456
1087:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
1088:tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 1917               		.loc 1 1088 77 view .LVU457
 1918               	/* epilogue start */
1089:tmk_core/common/action.c **** #endif
1090:tmk_core/common/action.c **** }
 1919               		.loc 1 1090 1 is_stmt 0 view .LVU458
 1920 000e 2696      		adiw r28,6
 1921 0010 0FB6      		in __tmp_reg__,__SREG__
 1922 0012 F894      		cli
 1923 0014 DEBF      		out __SP_H__,r29
 1924 0016 0FBE      		out __SREG__,__tmp_reg__
 1925 0018 CDBF      		out __SP_L__,r28
 1926 001a DF91      		pop r29
 1927 001c CF91      		pop r28
 1928 001e 0895      		ret
 1929               		.cfi_endproc
 1930               	.LFE36:
 1932               		.section	.text.debug_action,"ax",@progbits
 1933               	.global	debug_action
 1935               	debug_action:
 1936               	.LVL181:
 1937               	.LFB37:
1091:tmk_core/common/action.c **** 
1092:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1093:tmk_core/common/action.c ****  *
1094:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1095:tmk_core/common/action.c ****  */
1096:tmk_core/common/action.c **** void debug_action(action_t action) {
 1938               		.loc 1 1096 36 is_stmt 1 view -0
 1939               		.cfi_startproc
 1940               	/* prologue: function */
 1941               	/* frame size = 0 */
 1942               	/* stack size = 0 */
 1943               	.L__stack_usage = 0
1097:tmk_core/common/action.c ****     switch (action.kind.id) {
 1944               		.loc 1 1097 5 view .LVU460
1098:tmk_core/common/action.c ****         case ACT_LMODS:
1099:tmk_core/common/action.c ****             dprint("ACT_LMODS");
1100:tmk_core/common/action.c ****             break;
1101:tmk_core/common/action.c ****         case ACT_RMODS:
1102:tmk_core/common/action.c ****             dprint("ACT_RMODS");
1103:tmk_core/common/action.c ****             break;
1104:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
1105:tmk_core/common/action.c ****             dprint("ACT_LMODS_TAP");
1106:tmk_core/common/action.c ****             break;
1107:tmk_core/common/action.c ****         case ACT_RMODS_TAP:
1108:tmk_core/common/action.c ****             dprint("ACT_RMODS_TAP");
1109:tmk_core/common/action.c ****             break;
1110:tmk_core/common/action.c ****         case ACT_USAGE:
1111:tmk_core/common/action.c ****             dprint("ACT_USAGE");
1112:tmk_core/common/action.c ****             break;
1113:tmk_core/common/action.c ****         case ACT_MOUSEKEY:
1114:tmk_core/common/action.c ****             dprint("ACT_MOUSEKEY");
1115:tmk_core/common/action.c ****             break;
1116:tmk_core/common/action.c ****         case ACT_LAYER:
1117:tmk_core/common/action.c ****             dprint("ACT_LAYER");
1118:tmk_core/common/action.c ****             break;
1119:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
1120:tmk_core/common/action.c ****             dprint("ACT_LAYER_MODS");
1121:tmk_core/common/action.c ****             break;
1122:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
1123:tmk_core/common/action.c ****             dprint("ACT_LAYER_TAP");
1124:tmk_core/common/action.c ****             break;
1125:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
1126:tmk_core/common/action.c ****             dprint("ACT_LAYER_TAP_EXT");
1127:tmk_core/common/action.c ****             break;
1128:tmk_core/common/action.c ****         case ACT_MACRO:
1129:tmk_core/common/action.c ****             dprint("ACT_MACRO");
1130:tmk_core/common/action.c ****             break;
1131:tmk_core/common/action.c ****         case ACT_FUNCTION:
1132:tmk_core/common/action.c ****             dprint("ACT_FUNCTION");
1133:tmk_core/common/action.c ****             break;
1134:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
1135:tmk_core/common/action.c ****             dprint("ACT_SWAP_HANDS");
1136:tmk_core/common/action.c ****             break;
1137:tmk_core/common/action.c ****         default:
1138:tmk_core/common/action.c ****             dprint("UNKNOWN");
1139:tmk_core/common/action.c ****             break;
1140:tmk_core/common/action.c ****     }
1141:tmk_core/common/action.c ****     dprintf("[%X:%02X]", action.kind.param >> 8, action.kind.param & 0xff);
 1945               		.loc 1 1141 75 view .LVU461
 1946               	/* epilogue start */
1142:tmk_core/common/action.c **** }
 1947               		.loc 1 1142 1 is_stmt 0 view .LVU462
 1948 0000 0895      		ret
 1949               		.cfi_endproc
 1950               	.LFE37:
 1952               	.global	disable_action_cache
 1953               		.section	.bss.disable_action_cache,"aw",@nobits
 1956               	disable_action_cache:
 1957 0000 00        		.zero	1
 1958               		.comm	tp_buttons,2,1
 1959               		.text
 1960               	.Letext0:
 1961               		.file 4 "/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/stdint.h"
 1962               		.file 5 "tmk_core/common/keycode.h"
 1963               		.file 6 "tmk_core/common/report.h"
 1964               		.file 7 "tmk_core/common/host.h"
 1965               		.file 8 "tmk_core/common/mousekey.h"
 1966               		.file 9 "tmk_core/common/command.h"
 1967               		.file 10 "tmk_core/common/action_code.h"
 1968               		.file 11 "tmk_core/common/action.h"
 1969               		.file 12 "tmk_core/common/action_layer.h"
 1970               		.file 13 "tmk_core/common/action_util.h"
 1971               		.file 14 "tmk_core/common/debug.h"
 1972               		.file 15 "tmk_core/common/led.h"
 1973               		.file 16 "tmk_core/common/action_tapping.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:4      *ABS*:000000000000003f __SREG__
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:13     .text.action_exec:0000000000000000 action_exec
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:16     .text.action_exec:0000000000000000 .Loc.0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:17     .text.action_exec:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:48     .text.action_exec:000000000000001e .Loc.1
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:49     .text.action_exec:000000000000001e .Loc.2
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:50     .text.action_exec:000000000000001e .Loc.3
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:51     .text.action_exec:000000000000001e .Loc.4
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:64     .text.action_exec:0000000000000034 .Loc.5
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:67     .text.action_exec:0000000000000036 .Loc.6
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:70     .text.action_exec:0000000000000038 .Loc.7
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:76     .text.action_exec:0000000000000040 .Loc.8
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:85     .text.action_exec:0000000000000050 .Loc.9
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:88     .text.action_exec:0000000000000054 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:94     .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:97     .text.process_record_quantum:0000000000000000 .Loc.10
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:98     .text.process_record_quantum:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:103    .text.process_record_quantum:0000000000000000 .Loc.11
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:104    .text.process_record_quantum:0000000000000000 .Loc.12
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:108    .text.process_record_quantum:0000000000000002 .Loc.13
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:110    .text.process_record_quantum:0000000000000004 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:116    .text.post_process_record_quantum:0000000000000000 post_process_record_quantum
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:119    .text.post_process_record_quantum:0000000000000000 .Loc.14
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:120    .text.post_process_record_quantum:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:125    .text.post_process_record_quantum:0000000000000000 .Loc.15
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:127    .text.post_process_record_quantum:0000000000000000 .Loc.16
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:129    .text.post_process_record_quantum:0000000000000002 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:135    .text.process_record_tap_hint:0000000000000000 process_record_tap_hint
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:138    .text.process_record_tap_hint:0000000000000000 .Loc.17
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:139    .text.process_record_tap_hint:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:144    .text.process_record_tap_hint:0000000000000000 .Loc.18
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:145    .text.process_record_tap_hint:0000000000000000 .Loc.19
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:150    .text.process_record_tap_hint:0000000000000006 .Loc.20
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:153    .text.process_record_tap_hint:000000000000000a .Loc.21
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:154    .text.process_record_tap_hint:000000000000000a L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:160    .text.register_code:0000000000000000 register_code
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:163    .text.register_code:0000000000000000 .Loc.22
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:164    .text.register_code:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:165    .text.register_code:0000000000000000 .Loc.23
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:175    .text.register_code:0000000000000004 .Loc.24
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:176    .text.register_code:0000000000000004 .Loc.25
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:179    .text.register_code:0000000000000008 .Loc.26
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:180    .text.register_code:0000000000000008 .Loc.27
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:183    .text.register_code:000000000000000a .Loc.28
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:187    .text.register_code:0000000000000010 .Loc.29
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:188    .text.register_code:0000000000000010 .Loc.30
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:189    .text.register_code:0000000000000010 .Loc.31
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:195    .text.register_code:000000000000001e .Loc.32
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:198    .text.register_code:0000000000000022 .Loc.33
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:202    .text.register_code:0000000000000028 .Loc.34
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:206    .text.register_code:000000000000002c .Loc.35
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:210    .text.register_code:0000000000000032 .Loc.36
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:212    .text.register_code:0000000000000032 .Loc.37
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:214    .text.register_code:0000000000000032 .Loc.38
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:216    .text.register_code:0000000000000034 .Loc.39
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:220    .text.register_code:0000000000000038 .Loc.40
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:221    .text.register_code:0000000000000038 .Loc.41
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:226    .text.register_code:0000000000000040 .Loc.42
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:227    .text.register_code:0000000000000040 .Loc.43
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:230    .text.register_code:0000000000000042 .Loc.44
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:244    .text.register_code:0000000000000052 .Loc.45
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:247    .text.register_code:0000000000000054 .Loc.46
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:249    .text.register_code:0000000000000056 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:255    .text.unregister_code:0000000000000000 unregister_code
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:258    .text.unregister_code:0000000000000000 .Loc.47
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:259    .text.unregister_code:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:264    .text.unregister_code:0000000000000000 .Loc.48
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:265    .text.unregister_code:0000000000000000 .Loc.49
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:268    .text.unregister_code:0000000000000004 .Loc.50
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:269    .text.unregister_code:0000000000000004 .Loc.51
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:274    .text.unregister_code:000000000000000c .Loc.52
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:277    .text.unregister_code:0000000000000010 .Loc.53
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:279    .text.unregister_code:0000000000000010 .Loc.54
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:283    .text.unregister_code:0000000000000014 .Loc.55
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:284    .text.unregister_code:0000000000000014 .Loc.56
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:289    .text.unregister_code:000000000000001c .Loc.57
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:290    .text.unregister_code:000000000000001c .Loc.58
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:293    .text.unregister_code:000000000000001e .Loc.59
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:307    .text.unregister_code:0000000000000030 .Loc.60
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:308    .text.unregister_code:0000000000000030 .Loc.61
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:313    .text.unregister_code:0000000000000038 .Loc.62
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:317    .text.unregister_code:000000000000003c .Loc.63
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:321    .text.unregister_code:0000000000000040 .Loc.64
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:322    .text.unregister_code:0000000000000040 .Loc.65
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:325    .text.unregister_code:0000000000000042 .Loc.66
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:328    .text.unregister_code:0000000000000046 .Loc.67
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:332    .text.unregister_code:000000000000004a .Loc.68
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:337    .text.unregister_code:000000000000004e .Loc.69
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:339    .text.unregister_code:0000000000000050 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:345    .text.tap_code:0000000000000000 tap_code
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:348    .text.tap_code:0000000000000000 .Loc.70
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:349    .text.tap_code:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:350    .text.tap_code:0000000000000000 .Loc.71
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:360    .text.tap_code:0000000000000004 .Loc.72
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:363    .text.tap_code:0000000000000008 .Loc.73
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:364    .text.tap_code:0000000000000008 .Loc.74
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:367    .text.tap_code:000000000000000c .Loc.75
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:372    .text.tap_code:000000000000000c .Loc.76
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:374    .text.tap_code:000000000000000c .Loc.77
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:375    .text.tap_code:000000000000000c .Loc.78
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:376    .text.tap_code:000000000000000c .Loc.79
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:377    .text.tap_code:000000000000000c .Loc.80
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:378    .text.tap_code:000000000000000c .Loc.81
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:379    .text.tap_code:000000000000000c .Loc.82
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:387    .text.tap_code:000000000000001c L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:391    .text.tap_code:000000000000001e .Loc.83
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:394    .text.tap_code:000000000000001e .Loc.84
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:397    .text.tap_code:0000000000000020 .Loc.85
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:400    .text.tap_code:0000000000000022 .Loc.86
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:403    .text.tap_code:0000000000000026 .Loc.87
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:404    .text.tap_code:0000000000000026 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:410    .text.register_mods:0000000000000000 register_mods
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:413    .text.register_mods:0000000000000000 .Loc.88
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:414    .text.register_mods:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:419    .text.register_mods:0000000000000000 .Loc.89
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:420    .text.register_mods:0000000000000000 .Loc.90
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:423    .text.register_mods:0000000000000004 .Loc.91
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:426    .text.register_mods:0000000000000008 .Loc.92
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:431    .text.register_mods:000000000000000c .Loc.93
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:433    .text.register_mods:000000000000000e L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:439    .text.unregister_mods:0000000000000000 unregister_mods
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:442    .text.unregister_mods:0000000000000000 .Loc.94
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:443    .text.unregister_mods:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:448    .text.unregister_mods:0000000000000000 .Loc.95
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:449    .text.unregister_mods:0000000000000000 .Loc.96
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:452    .text.unregister_mods:0000000000000004 .Loc.97
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:455    .text.unregister_mods:0000000000000008 .Loc.98
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:460    .text.unregister_mods:000000000000000c .Loc.99
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:462    .text.unregister_mods:000000000000000e L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:468    .text.process_action:0000000000000000 process_action
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:471    .text.process_action:0000000000000000 .Loc.100
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:472    .text.process_action:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:473    .text.process_action:0000000000000000 .Loc.101
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:516    .text.process_action:0000000000000016 .Loc.102
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:518    .text.process_action:0000000000000018 .Loc.103
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:520    .text.process_action:0000000000000018 .Loc.104
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:521    .text.process_action:0000000000000018 .Loc.105
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:527    .text.process_action:0000000000000020 .Loc.106
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:528    .text.process_action:0000000000000020 .Loc.107
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:530    .text.process_action:0000000000000022 .Loc.108
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:532    .text.process_action:0000000000000024 .Loc.109
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:536    .text.process_action:0000000000000028 .Loc.110
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:537    .text.process_action:0000000000000028 .Loc.111
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:538    .text.process_action:0000000000000028 .Loc.112
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:541    .text.process_action:000000000000002c .Loc.113
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:543    .text.process_action:000000000000002e .Loc.114
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:546    .text.process_action:0000000000000032 .Loc.115
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:549    .text.process_action:0000000000000036 .Loc.116
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:552    .text.process_action:000000000000003a .Loc.117
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:555    .text.process_action:000000000000003e .Loc.118
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:558    .text.process_action:0000000000000040 .Loc.119
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:560    .text.process_action:0000000000000042 .Loc.120
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:564    .text.process_action:0000000000000046 .Loc.121
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:568    .text.process_action:000000000000004c .Loc.122
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:569    .text.process_action:000000000000004c .Loc.123
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:572    .text.process_action:0000000000000050 .Loc.124
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:578    .text.process_action:0000000000000056 .Loc.125
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:579    .text.process_action:0000000000000056 .Loc.126
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:584    .text.process_action:000000000000005e .Loc.127
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:611    .text.process_action:0000000000000070 .Loc.128
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:617    .text.process_action:0000000000000074 .Loc.129
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:620    .text.process_action:0000000000000076 .Loc.130
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:622    .text.process_action:0000000000000078 .Loc.131
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:625    .text.process_action:000000000000007a .Loc.132
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:627    .text.process_action:000000000000007c .Loc.133
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:632    .text.process_action:0000000000000080 .Loc.134
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:633    .text.process_action:0000000000000080 .Loc.135
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:636    .text.process_action:0000000000000084 .Loc.136
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:637    .text.process_action:0000000000000084 .Loc.137
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:640    .text.process_action:0000000000000088 .Loc.138
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:641    .text.process_action:0000000000000088 .Loc.139
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:644    .text.process_action:000000000000008c .Loc.140
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:647    .text.process_action:0000000000000090 .Loc.141
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:651    .text.process_action:0000000000000094 .Loc.142
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:656    .text.process_action:000000000000009a .Loc.143
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:659    .text.process_action:000000000000009e .Loc.144
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:661    .text.process_action:000000000000009e .Loc.145
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:663    .text.process_action:000000000000009e .Loc.146
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:664    .text.process_action:000000000000009e .Loc.147
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:672    .text.process_action:00000000000000a6 .Loc.148
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:678    .text.process_action:00000000000000ae .Loc.149
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:682    .text.process_action:00000000000000b4 .Loc.150
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:683    .text.process_action:00000000000000b4 .Loc.151
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:686    .text.process_action:00000000000000b8 .Loc.152
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:687    .text.process_action:00000000000000b8 .Loc.153
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:690    .text.process_action:00000000000000bc .Loc.154
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:693    .text.process_action:00000000000000c0 .Loc.155
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:697    .text.process_action:00000000000000c4 .Loc.156
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:702    .text.process_action:00000000000000ca .Loc.157
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:706    .text.process_action:00000000000000ce .Loc.158
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:708    .text.process_action:00000000000000ce .Loc.159
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:715    .text.process_action:00000000000000da .Loc.160
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:720    .text.process_action:00000000000000e2 .Loc.161
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:722    .text.process_action:00000000000000e2 .Loc.162
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:723    .text.process_action:00000000000000e2 .Loc.163
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:725    .text.process_action:00000000000000e6 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:727    .text.process_action:00000000000000e8 .Loc.164
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:730    .text.process_action:00000000000000ec .Loc.165
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:733    .text.process_action:00000000000000f0 .Loc.166
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:734    .text.process_action:00000000000000f0 .Loc.167
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:737    .text.process_action:00000000000000f4 .Loc.168
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:742    .text.process_action:00000000000000fc .Loc.169
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1489   .text.process_record:0000000000000000 process_record
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:746    .text.process_action:0000000000000102 .Loc.170
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:750    .text.process_action:0000000000000106 .Loc.171
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:753    .text.process_action:0000000000000108 .Loc.172
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:755    .text.process_action:000000000000010a .Loc.173
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:761    .text.process_action:0000000000000112 .Loc.174
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:765    .text.process_action:0000000000000116 .Loc.175
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:767    .text.process_action:0000000000000118 .Loc.176
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:772    .text.process_action:000000000000011c .Loc.177
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:779    .text.process_action:0000000000000124 .Loc.178
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:782    .text.process_action:0000000000000124 .Loc.179
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:786    .text.process_action:000000000000012a .Loc.180
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:789    .text.process_action:000000000000012c .Loc.181
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:792    .text.process_action:0000000000000130 .Loc.182
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:798    .text.process_action:0000000000000136 .Loc.183
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:803    .text.process_action:000000000000013e .Loc.184
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:804    .text.process_action:000000000000013e .Loc.185
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:807    .text.process_action:0000000000000142 .Loc.186
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:808    .text.process_action:0000000000000142 .Loc.187
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:811    .text.process_action:0000000000000146 .Loc.188
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:812    .text.process_action:0000000000000146 .Loc.189
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:815    .text.process_action:000000000000014a .Loc.190
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:818    .text.process_action:000000000000014e .Loc.191
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:819    .text.process_action:000000000000014e .Loc.192
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:820    .text.process_action:000000000000014e .Loc.193
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:823    .text.process_action:0000000000000152 .Loc.194
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:826    .text.process_action:0000000000000154 .Loc.195
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:827    .text.process_action:0000000000000154 .Loc.196
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:830    .text.process_action:0000000000000158 .Loc.197
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:831    .text.process_action:0000000000000158 .Loc.198
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:835    .text.process_action:000000000000015c .Loc.199
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:836    .text.process_action:000000000000015c .Loc.200
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:839    .text.process_action:0000000000000160 .Loc.201
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:843    .text.process_action:0000000000000162 .Loc.202
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:845    .text.process_action:0000000000000162 .Loc.203
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:852    .text.process_action:0000000000000168 .Loc.204
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:853    .text.process_action:0000000000000168 .Loc.205
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:856    .text.process_action:000000000000016c .Loc.206
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:857    .text.process_action:000000000000016c .Loc.207
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:858    .text.process_action:000000000000016c .Loc.208
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:861    .text.process_action:0000000000000170 .Loc.209
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:867    .text.process_action:0000000000000178 .Loc.210
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:868    .text.process_action:0000000000000178 .Loc.211
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:872    .text.process_action:000000000000017c .Loc.212
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:875    .text.process_action:0000000000000180 .Loc.213
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:877    .text.process_action:0000000000000180 .Loc.214
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:878    .text.process_action:0000000000000180 .Loc.215
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:884    .text.process_action:0000000000000188 .Loc.216
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:885    .text.process_action:0000000000000188 .Loc.217
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:887    .text.process_action:000000000000018c L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:891    .text.process_action:0000000000000190 .Loc.218
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:892    .text.process_action:0000000000000190 .Loc.219
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:895    .text.process_action:0000000000000194 .Loc.220
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:896    .text.process_action:0000000000000194 .Loc.221
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:898    .text.process_action:0000000000000198 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:901    .text.process_action:000000000000019a .Loc.222
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:902    .text.process_action:000000000000019a .Loc.223
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:906    .text.process_action:000000000000019e .Loc.224
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:907    .text.process_action:000000000000019e .Loc.225
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:909    .text.process_action:00000000000001a2 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:913    .text.process_action:00000000000001a6 .Loc.226
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:914    .text.process_action:00000000000001a6 .Loc.227
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:917    .text.process_action:00000000000001aa .Loc.228
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:918    .text.process_action:00000000000001aa .Loc.229
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:919    .text.process_action:00000000000001aa .Loc.230
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:922    .text.process_action:00000000000001ae .Loc.231
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:926    .text.process_action:00000000000001ae .Loc.232
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:928    .text.process_action:00000000000001ae .Loc.233
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:929    .text.process_action:00000000000001ae .Loc.234
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:930    .text.process_action:00000000000001ae .Loc.235
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:931    .text.process_action:00000000000001ae .Loc.236
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:932    .text.process_action:00000000000001ae .Loc.237
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:933    .text.process_action:00000000000001ae .Loc.238
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:943    .text.process_action:00000000000001bc .Loc.239
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:949    .text.process_action:00000000000001be L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:954    .text.process_action:00000000000001c0 .Loc.240
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:960    .text.process_action:00000000000001c8 .Loc.241
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:961    .text.process_action:00000000000001c8 .Loc.242
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:964    .text.process_action:00000000000001cc .Loc.243
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:965    .text.process_action:00000000000001ce L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:967    .text.process_action:00000000000001d0 .Loc.244
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:968    .text.process_action:00000000000001d0 .Loc.245
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:972    .text.process_action:00000000000001d4 .Loc.246
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:974    .text.process_action:00000000000001d4 .Loc.247
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:975    .text.process_action:00000000000001d4 .Loc.248
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:980    .text.process_action:00000000000001dc .Loc.249
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:983    .text.process_action:00000000000001e0 .Loc.250
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:986    .text.process_action:00000000000001e2 .Loc.251
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:988    .text.process_action:00000000000001e4 .Loc.252
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:991    .text.process_action:00000000000001e6 .Loc.253
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:994    .text.process_action:00000000000001ea .Loc.254
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1006   .text.process_action:00000000000001fa .Loc.255
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1007   .text.process_action:00000000000001fa .Loc.256
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1013   .text.process_action:0000000000000204 .Loc.257
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1027   .text.process_action:000000000000021a .Loc.258
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1034   .text.process_action:0000000000000222 .Loc.259
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1035   .text.process_action:0000000000000222 .Loc.260
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1039   .text.process_action:0000000000000226 .Loc.261
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1043   .text.process_action:000000000000022a .Loc.262
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1052   .text.process_action:000000000000023a .Loc.263
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1055   .text.process_action:000000000000023e .Loc.264
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1058   .text.process_action:0000000000000240 .Loc.265
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1061   .text.process_action:0000000000000244 .Loc.266
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1064   .text.process_action:0000000000000246 .Loc.267
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1067   .text.process_action:000000000000024a .Loc.268
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1070   .text.process_action:000000000000024c .Loc.269
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1073   .text.process_action:0000000000000250 .Loc.270
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1077   .text.process_action:0000000000000252 .Loc.271
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1079   .text.process_action:0000000000000252 .Loc.272
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1080   .text.process_action:0000000000000252 .Loc.273
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1084   .text.process_action:0000000000000258 .Loc.274
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1088   .text.process_action:000000000000025c .Loc.275
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1090   .text.process_action:0000000000000260 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1093   .text.process_action:0000000000000262 .Loc.276
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1095   .text.process_action:0000000000000262 .Loc.277
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1096   .text.process_action:0000000000000262 .Loc.278
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1101   .text.process_action:000000000000026a .Loc.279
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1104   .text.process_action:000000000000026e .Loc.280
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1107   .text.process_action:0000000000000270 .Loc.281
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1109   .text.process_action:0000000000000272 .Loc.282
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1112   .text.process_action:0000000000000274 .Loc.283
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1115   .text.process_action:0000000000000278 .Loc.284
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1127   .text.process_action:0000000000000288 .Loc.285
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1128   .text.process_action:0000000000000288 .Loc.286
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1134   .text.process_action:0000000000000292 .Loc.287
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1148   .text.process_action:00000000000002a8 .Loc.288
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1155   .text.process_action:00000000000002b0 .Loc.289
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1156   .text.process_action:00000000000002b0 .Loc.290
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1160   .text.process_action:00000000000002b4 .Loc.291
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1164   .text.process_action:00000000000002b8 .Loc.292
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1173   .text.process_action:00000000000002c8 .Loc.293
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1176   .text.process_action:00000000000002cc .Loc.294
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1179   .text.process_action:00000000000002ce .Loc.295
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1182   .text.process_action:00000000000002d2 .Loc.296
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1185   .text.process_action:00000000000002d4 .Loc.297
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1188   .text.process_action:00000000000002d8 .Loc.298
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1191   .text.process_action:00000000000002da .Loc.299
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1194   .text.process_action:00000000000002de .Loc.300
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1198   .text.process_action:00000000000002e0 .Loc.301
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1200   .text.process_action:00000000000002e0 .Loc.302
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1203   .text.process_action:00000000000002e2 .Loc.303
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1206   .text.process_action:00000000000002e6 .Loc.304
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1210   .text.process_action:00000000000002ec .Loc.305
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1214   .text.process_action:00000000000002f0 .Loc.306
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1218   .text.process_action:00000000000002f6 .Loc.307
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1222   .text.process_action:00000000000002f8 .Loc.308
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1227   .text.process_action:00000000000002fe .Loc.309
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1236   .text.process_action:000000000000030c .Loc.310
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1237   .text.process_action:000000000000030c .Loc.311
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1239   .text.process_action:0000000000000310 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1241   .text.process_action:0000000000000312 .Loc.312
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1242   .text.process_action:0000000000000312 .Loc.313
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1245   .text.process_action:0000000000000316 .Loc.314
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1246   .text.process_action:0000000000000316 .Loc.315
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1255   .text.process_action:0000000000000324 .Loc.316
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1256   .text.process_action:0000000000000324 .Loc.317
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1259   .text.process_action:0000000000000328 .Loc.318
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1260   .text.process_action:0000000000000328 .Loc.319
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1263   .text.process_action:000000000000032a .Loc.320
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1267   .text.process_action:0000000000000330 .Loc.321
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1275   .text.process_action:000000000000033a .Loc.322
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1276   .text.process_action:000000000000033a .Loc.323
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1279   .text.process_action:000000000000033e .Loc.324
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1280   .text.process_action:000000000000033e .Loc.325
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1282   .text.process_action:0000000000000342 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1285   .text.process_action:0000000000000344 .Loc.326
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1292   .text.process_action:000000000000034e .Loc.327
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1293   .text.process_action:000000000000034e .Loc.328
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1295   .text.process_action:0000000000000352 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1299   .text.process_action:0000000000000356 .Loc.329
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1302   .text.process_action:000000000000035a .Loc.330
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1306   .text.process_action:000000000000035e .Loc.331
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1311   .text.process_action:0000000000000364 .Loc.332
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1314   .text.process_action:0000000000000368 .Loc.333
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1319   .text.process_action:000000000000036e .Loc.334
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1320   .text.process_action:000000000000036e .Loc.335
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1323   .text.process_action:0000000000000372 .Loc.336
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1330   .text.process_action:000000000000037c .Loc.337
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1335   .text.process_action:0000000000000382 .Loc.338
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1339   .text.process_action:0000000000000388 .Loc.339
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1340   .text.process_action:0000000000000388 .Loc.340
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1342   .text.process_action:000000000000038c L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1344   .text.process_action:000000000000038e .Loc.341
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1350   .text.process_action:0000000000000396 .Loc.342
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1351   .text.process_action:0000000000000396 .Loc.343
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1354   .text.process_action:000000000000039a .Loc.344
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1355   .text.process_action:000000000000039a .Loc.345
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1356   .text.process_action:000000000000039a .Loc.346
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1358   .text.process_action:000000000000039e L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1360   .text.process_action:00000000000003a0 .Loc.347
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1364   .text.process_action:00000000000003a0 .Loc.348
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1366   .text.process_action:00000000000003a0 .Loc.349
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1367   .text.process_action:00000000000003a0 .Loc.350
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1368   .text.process_action:00000000000003a0 .Loc.351
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1369   .text.process_action:00000000000003a0 .Loc.352
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1370   .text.process_action:00000000000003a0 .Loc.353
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1371   .text.process_action:00000000000003a0 .Loc.354
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1382   .text.process_action:00000000000003b0 .Loc.355
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1385   .text.process_action:00000000000003b0 .Loc.356
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1386   .text.process_action:00000000000003b0 .Loc.357
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1393   .text.process_action:00000000000003b6 .Loc.358
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1396   .text.process_action:00000000000003b8 .Loc.359
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1398   .text.process_action:00000000000003ba .Loc.360
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1404   .text.process_action:00000000000003c2 .Loc.361
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1408   .text.process_action:00000000000003c6 .Loc.362
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1411   .text.process_action:00000000000003ca L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1417   .text.process_record_handler:0000000000000000 process_record_handler
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1420   .text.process_record_handler:0000000000000000 .Loc.363
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1421   .text.process_record_handler:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1422   .text.process_record_handler:0000000000000000 .Loc.364
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1444   .text.process_record_handler:000000000000000a .Loc.365
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1445   .text.process_record_handler:000000000000000a .Loc.366
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1450   .text.process_record_handler:0000000000000010 .Loc.367
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1455   .text.process_record_handler:0000000000000016 .Loc.368
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1456   .text.process_record_handler:0000000000000016 .Loc.369
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1457   .text.process_record_handler:0000000000000016 .Loc.370
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1458   .text.process_record_handler:0000000000000016 .Loc.371
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1461   .text.process_record_handler:000000000000001a .Loc.372
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1462   .text.process_record_handler:000000000000001a .Loc.373
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1465   .text.process_record_handler:000000000000001e .Loc.374
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1466   .text.process_record_handler:000000000000001e .Loc.375
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1467   .text.process_record_handler:000000000000001e .Loc.376
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1471   .text.process_record_handler:0000000000000022 .Loc.377
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1475   .text.process_record_handler:0000000000000026 .Loc.378
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1479   .text.process_record_handler:000000000000002a .Loc.379
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1482   .text.process_record_handler:000000000000002e .Loc.380
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1483   .text.process_record_handler:000000000000002e L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1492   .text.process_record:0000000000000000 .Loc.381
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1493   .text.process_record:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1494   .text.process_record:0000000000000000 .Loc.382
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1508   .text.process_record:0000000000000006 .Loc.383
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1512   .text.process_record:0000000000000006 .Loc.384
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1514   .text.process_record:0000000000000006 .Loc.385
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1515   .text.process_record:0000000000000006 .Loc.386
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1519   .text.process_record:000000000000000a .Loc.387
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1531   .text.process_record:0000000000000018 .Loc.388
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1535   .text.process_record:000000000000001c .Loc.389
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1539   .text.process_record:000000000000001e .Loc.390
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1543   .text.process_record:0000000000000024 .Loc.391
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1546   .text.process_record:0000000000000026 .Loc.392
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1550   .text.process_record:000000000000002a .Loc.393
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1554   .text.process_record:000000000000002e .Loc.394
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1555   .text.process_record:000000000000002e .Loc.395
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1559   .text.process_record:0000000000000034 .Loc.396
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1562   .text.process_record:0000000000000038 .Loc.397
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1563   .text.process_record:0000000000000038 .Loc.398
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1566   .text.process_record:000000000000003c .Loc.399
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1569   .text.process_record:0000000000000040 .Loc.400
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1573   .text.process_record:0000000000000046 .Loc.401
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1576   .text.process_record:0000000000000048 .Loc.402
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1580   .text.process_record:000000000000004c .Loc.403
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1583   .text.process_record:0000000000000050 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1589   .text.process_record_nocache:0000000000000000 process_record_nocache
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1592   .text.process_record_nocache:0000000000000000 .Loc.404
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1593   .text.process_record_nocache:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1598   .text.process_record_nocache:0000000000000000 .Loc.405
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1599   .text.process_record_nocache:0000000000000000 .Loc.406
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1956   .bss.disable_action_cache:0000000000000000 disable_action_cache
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1602   .text.process_record_nocache:0000000000000006 .Loc.407
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1605   .text.process_record_nocache:000000000000000a .Loc.408
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1606   .text.process_record_nocache:000000000000000a .Loc.409
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1609   .text.process_record_nocache:000000000000000e .Loc.410
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1611   .text.process_record_nocache:0000000000000010 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1617   .text.register_weak_mods:0000000000000000 register_weak_mods
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1620   .text.register_weak_mods:0000000000000000 .Loc.411
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1621   .text.register_weak_mods:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1626   .text.register_weak_mods:0000000000000000 .Loc.412
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1627   .text.register_weak_mods:0000000000000000 .Loc.413
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1630   .text.register_weak_mods:0000000000000004 .Loc.414
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1633   .text.register_weak_mods:0000000000000008 .Loc.415
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1638   .text.register_weak_mods:000000000000000c .Loc.416
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1640   .text.register_weak_mods:000000000000000e L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1646   .text.unregister_weak_mods:0000000000000000 unregister_weak_mods
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1649   .text.unregister_weak_mods:0000000000000000 .Loc.417
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1650   .text.unregister_weak_mods:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1655   .text.unregister_weak_mods:0000000000000000 .Loc.418
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1656   .text.unregister_weak_mods:0000000000000000 .Loc.419
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1659   .text.unregister_weak_mods:0000000000000004 .Loc.420
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1662   .text.unregister_weak_mods:0000000000000008 .Loc.421
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1667   .text.unregister_weak_mods:000000000000000c .Loc.422
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1669   .text.unregister_weak_mods:000000000000000e L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1675   .text.clear_keyboard_but_mods_and_keys:0000000000000000 clear_keyboard_but_mods_and_keys
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1677   .text.clear_keyboard_but_mods_and_keys:0000000000000000 .Loc.423
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1678   .text.clear_keyboard_but_mods_and_keys:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1683   .text.clear_keyboard_but_mods_and_keys:0000000000000000 .Loc.424
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1686   .text.clear_keyboard_but_mods_and_keys:0000000000000004 .Loc.425
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1689   .text.clear_keyboard_but_mods_and_keys:0000000000000008 .Loc.426
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1692   .text.clear_keyboard_but_mods_and_keys:000000000000000c L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1698   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1700   .text.clear_keyboard_but_mods:0000000000000000 .Loc.427
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1701   .text.clear_keyboard_but_mods:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1706   .text.clear_keyboard_but_mods:0000000000000000 .Loc.428
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1709   .text.clear_keyboard_but_mods:0000000000000004 .Loc.429
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1712   .text.clear_keyboard_but_mods:0000000000000008 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1718   .text.clear_keyboard:0000000000000000 clear_keyboard
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1720   .text.clear_keyboard:0000000000000000 .Loc.430
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1721   .text.clear_keyboard:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1726   .text.clear_keyboard:0000000000000000 .Loc.431
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1729   .text.clear_keyboard:0000000000000004 .Loc.432
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1732   .text.clear_keyboard:0000000000000008 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1738   .text.is_tap_action:0000000000000000 is_tap_action
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1741   .text.is_tap_action:0000000000000000 .Loc.433
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1742   .text.is_tap_action:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1747   .text.is_tap_action:0000000000000000 .Loc.434
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1748   .text.is_tap_action:0000000000000000 .Loc.435
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1752   .text.is_tap_action:0000000000000006 .Loc.436
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1779   .text.is_tap_action:0000000000000016 .Loc.437
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1786   .text.is_tap_action:0000000000000020 .Loc.438
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1790   .text.is_tap_action:0000000000000022 .Loc.439
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1794   .text.is_tap_action:0000000000000024 .Loc.440
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1798   .text.is_tap_action:0000000000000028 .Loc.441
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1801   .text.is_tap_action:000000000000002a .Loc.442
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1805   .text.is_tap_action:000000000000002c .Loc.443
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1812   .text.is_tap_action:0000000000000036 .Loc.444
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1813   .text.is_tap_action:0000000000000036 .Loc.445
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1818   .text.is_tap_action:000000000000003c .Loc.446
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1820   .text.is_tap_action:000000000000003e L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1826   .text.is_tap_key:0000000000000000 is_tap_key
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1829   .text.is_tap_key:0000000000000000 .Loc.447
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1830   .text.is_tap_key:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1835   .text.is_tap_key:0000000000000000 .Loc.448
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1836   .text.is_tap_key:0000000000000000 .Loc.449
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1839   .text.is_tap_key:0000000000000004 .Loc.450
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1840   .text.is_tap_key:0000000000000004 .Loc.451
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1843   .text.is_tap_key:0000000000000008 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1849   .text.debug_event:0000000000000000 debug_event
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1851   .text.debug_event:0000000000000000 .Loc.452
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1852   .text.debug_event:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1861   .text.debug_event:0000000000000006 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1862   .text.debug_event:0000000000000008 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1874   .text.debug_event:000000000000000e .Loc.453
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1876   .text.debug_event:000000000000000e .Loc.454
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1885   .text.debug_event:000000000000001e L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1891   .text.debug_record:0000000000000000 debug_record
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1893   .text.debug_record:0000000000000000 .Loc.455
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1894   .text.debug_record:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1903   .text.debug_record:0000000000000006 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1904   .text.debug_record:0000000000000008 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1905   .text.debug_record:000000000000000a L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1916   .text.debug_record:000000000000000e .Loc.456
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1917   .text.debug_record:000000000000000e .Loc.457
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1919   .text.debug_record:000000000000000e .Loc.458
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1929   .text.debug_record:0000000000000020 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1935   .text.debug_action:0000000000000000 debug_action
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1938   .text.debug_action:0000000000000000 .Loc.459
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1939   .text.debug_action:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1944   .text.debug_action:0000000000000000 .Loc.460
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1945   .text.debug_action:0000000000000000 .Loc.461
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1947   .text.debug_action:0000000000000000 .Loc.462
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1949   .text.debug_action:0000000000000002 L0
                            *COM*:0000000000000002 tp_buttons
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:91     .text.action_exec:0000000000000054 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:113    .text.process_record_quantum:0000000000000004 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:132    .text.post_process_record_quantum:0000000000000002 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:157    .text.process_record_tap_hint:000000000000000a L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:252    .text.register_code:0000000000000056 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:342    .text.unregister_code:0000000000000050 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:407    .text.tap_code:0000000000000026 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:436    .text.register_mods:000000000000000e L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:465    .text.unregister_mods:000000000000000e L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1414   .text.process_action:00000000000003ca L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1486   .text.process_record_handler:000000000000002e L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1586   .text.process_record:0000000000000050 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1614   .text.process_record_nocache:0000000000000010 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1643   .text.register_weak_mods:000000000000000e L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1672   .text.unregister_weak_mods:000000000000000e L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1695   .text.clear_keyboard_but_mods_and_keys:000000000000000c L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1715   .text.clear_keyboard_but_mods:0000000000000008 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1735   .text.clear_keyboard:0000000000000008 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1823   .text.is_tap_action:000000000000003e L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1846   .text.is_tap_key:0000000000000008 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1888   .text.debug_event:000000000000001e L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1932   .text.debug_record:0000000000000020 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1953   .text.debug_action:0000000000000002 L0
                     .debug_frame:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:59     .text.action_exec:000000000000002c .L1
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:242    .text.register_code:0000000000000052 .L5
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:219    .text.register_code:0000000000000038 .L7
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:205    .text.register_code:000000000000002c .L8
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:235    .text.register_code:0000000000000048 .L21
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:233    .text.register_code:0000000000000046 .L11
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:211    .text.register_code:0000000000000032 .L15
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:335    .text.unregister_code:000000000000004e .L16
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:282    .text.unregister_code:0000000000000014 .L18
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:306    .text.unregister_code:0000000000000030 .L19
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:298    .text.unregister_code:0000000000000024 .L22
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:296    .text.unregister_code:0000000000000022 .L12
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:278    .text.unregister_code:0000000000000010 .L24
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:320    .text.unregister_code:0000000000000040 .L20
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:390    .text.tap_code:000000000000001e .L27
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:383    .text.tap_code:0000000000000012 .L13
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:429    .text.register_mods:000000000000000c .L28
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:458    .text.unregister_mods:000000000000000c .L30
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:577    .text.process_action:0000000000000056 .L34
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:610    .text.process_action:0000000000000070 .L104
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:563    .text.process_action:0000000000000046 .L35
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:705    .text.process_action:00000000000000ce .L36
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:595    .jumptables.gcc.process_action:0000000000000000 .L38
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:630    .text.process_action:0000000000000080 .L43
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:677    .text.process_action:00000000000000ae .L44
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:660    .text.process_action:000000000000009e .L135
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:650    .text.process_action:0000000000000094 .L46
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:670    .text.process_action:00000000000000a6 .L47
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:655    .text.process_action:000000000000009a .L48
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:696    .text.process_action:00000000000000c4 .L50
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:770    .text.process_action:000000000000011c .L51
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:721    .text.process_action:00000000000000e2 .L99
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1391   .text.process_action:00000000000003b6 .L32
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:701    .text.process_action:00000000000000ca .L52
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:796    .text.process_action:0000000000000136 .L53
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:825    .text.process_action:0000000000000154 .L54
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:890    .text.process_action:0000000000000190 .L55
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:912    .text.process_action:00000000000001a6 .L63
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:900    .text.process_action:000000000000019a .L64
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:866    .text.process_action:0000000000000178 .L57
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:850    .text.process_action:0000000000000168 .L58
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:834    .text.process_action:000000000000015c .L59
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:883    .text.process_action:0000000000000188 .L60
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:871    .text.process_action:000000000000017c .L136
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:905    .text.process_action:000000000000019e .L62
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:842    .text.process_action:0000000000000162 .L134
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:876    .text.process_action:0000000000000180 .L66
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:951    .text.process_action:00000000000001c0 .L98
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:937    .text.process_action:00000000000001b4 .L14
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1076   .text.process_action:0000000000000252 .L69
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1002   .text.process_action:00000000000001f6 .L23
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:997    .text.process_action:00000000000001ee .L15
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1032   .text.process_action:0000000000000222 .L70
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1024   .text.process_action:0000000000000216 .L24
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1019   .text.process_action:000000000000020e .L16
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1063   .text.process_action:0000000000000246 .L71
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1069   .text.process_action:000000000000024c .L72
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1057   .text.process_action:0000000000000240 .L73
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1087   .text.process_action:000000000000025c .L75
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1123   .text.process_action:0000000000000284 .L25
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1118   .text.process_action:000000000000027c .L17
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1153   .text.process_action:00000000000002b0 .L76
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1145   .text.process_action:00000000000002a4 .L26
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1140   .text.process_action:000000000000029c .L18
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1184   .text.process_action:00000000000002d4 .L77
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1190   .text.process_action:00000000000002da .L78
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1178   .text.process_action:00000000000002ce .L79
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1213   .text.process_action:00000000000002f0 .L80
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1310   .text.process_action:0000000000000364 .L81
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1250   .text.process_action:000000000000031c .L82
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1274   .text.process_action:000000000000033a .L83
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1298   .text.process_action:0000000000000356 .L84
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1349   .text.process_action:0000000000000396 .L94
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1305   .text.process_action:000000000000035e .L132
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1318   .text.process_action:000000000000036e .L86
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1235   .text.process_action:000000000000030c .L85
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1334   .text.process_action:0000000000000382 .L93
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1291   .text.process_action:000000000000034e .L88
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1284   .text.process_action:0000000000000344 .L89
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1221   .text.process_action:00000000000002f8 .L133
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1329   .text.process_action:000000000000037c .L92
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1381   .text.process_action:00000000000003b0 .L96
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1375   .text.process_action:00000000000003a6 .L19
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:942    .text.process_action:00000000000001bc .L137
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:615    .text.process_action:0000000000000074 .L42
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:778    .text.process_action:0000000000000124 .L41
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:959    .text.process_action:00000000000001c8 .L40
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1197   .text.process_action:00000000000002e0 .L39
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1226   .text.process_action:00000000000002fe .L37
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1527   .text.process_record:0000000000000018 .L139
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1553   .text.process_record:000000000000002e .L155
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1538   .text.process_record:000000000000001e .L144
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1636   .text.register_weak_mods:000000000000000c .L158
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1665   .text.unregister_weak_mods:000000000000000c .L160
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1797   .text.is_tap_action:0000000000000028 .L174
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1762   .jumptables.gcc.is_tap_action:0000000000000000 .L168
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1785   .text.is_tap_action:0000000000000020 .L177
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1793   .text.is_tap_action:0000000000000024 .L171
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1778   .text.is_tap_action:0000000000000016 .L169
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1804   .text.is_tap_action:000000000000002c .L170
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1811   .text.is_tap_action:0000000000000036 .L167
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:5668   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:8207   .debug_ranges:0000000000000000 .Ldebug_ranges0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:8277   .debug_line:0000000000000000 .Ldebug_line0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1937   .text.debug_action:0000000000000000 .LFB37
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1950   .text.debug_action:0000000000000002 .LFE37
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1892   .text.debug_record:0000000000000000 .LFB36
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1930   .text.debug_record:0000000000000020 .LFE36
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:6752   .debug_loc:0000000000000000 .LLST43
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1850   .text.debug_event:0000000000000000 .LFB35
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1886   .text.debug_event:000000000000001e .LFE35
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:6784   .debug_loc:0000000000000048 .LLST42
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1740   .text.is_tap_action:0000000000000000 .LFB34
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1821   .text.is_tap_action:000000000000003e .LFE34
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:6827   .debug_loc:000000000000009a .LLST40
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:6816   .debug_loc:0000000000000090 .LVUS40
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1828   .text.is_tap_key:0000000000000000 .LFB33
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1844   .text.is_tap_key:0000000000000008 .LFE33
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:6875   .debug_loc:00000000000000f1 .LLST41
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:6872   .debug_loc:00000000000000ef .LVUS41
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1838   .text.is_tap_key:0000000000000004 .LVL179
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1842   .text.is_tap_key:0000000000000008 .LVL180
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1676   .text.clear_keyboard_but_mods_and_keys:0000000000000000 .LFB32
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1693   .text.clear_keyboard_but_mods_and_keys:000000000000000c .LFE32
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1685   .text.clear_keyboard_but_mods_and_keys:0000000000000004 .LVL165
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1688   .text.clear_keyboard_but_mods_and_keys:0000000000000008 .LVL166
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1691   .text.clear_keyboard_but_mods_and_keys:000000000000000c .LVL167
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1699   .text.clear_keyboard_but_mods:0000000000000000 .LFB31
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1713   .text.clear_keyboard_but_mods:0000000000000008 .LFE31
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1708   .text.clear_keyboard_but_mods:0000000000000004 .LVL168
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1711   .text.clear_keyboard_but_mods:0000000000000008 .LVL169
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1719   .text.clear_keyboard:0000000000000000 .LFB30
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1733   .text.clear_keyboard:0000000000000008 .LFE30
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1728   .text.clear_keyboard:0000000000000004 .LVL170
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1731   .text.clear_keyboard:0000000000000008 .LVL171
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1648   .text.unregister_weak_mods:0000000000000000 .LFB29
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1670   .text.unregister_weak_mods:000000000000000e .LFE29
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:6894   .debug_loc:000000000000010f .LLST39
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:6887   .debug_loc:0000000000000109 .LVUS39
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1661   .text.unregister_weak_mods:0000000000000008 .LVL163
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1664   .text.unregister_weak_mods:000000000000000c .LVL164
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1619   .text.register_weak_mods:0000000000000000 .LFB28
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1641   .text.register_weak_mods:000000000000000e .LFE28
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:6919   .debug_loc:0000000000000141 .LLST38
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:6912   .debug_loc:000000000000013b .LVUS38
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1632   .text.register_weak_mods:0000000000000008 .LVL160
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1635   .text.register_weak_mods:000000000000000c .LVL161
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:441    .text.unregister_mods:0000000000000000 .LFB27
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:463    .text.unregister_mods:000000000000000e .LFE27
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:6944   .debug_loc:0000000000000173 .LLST13
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:6937   .debug_loc:000000000000016d .LVUS13
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:454    .text.unregister_mods:0000000000000008 .LVL42
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:457    .text.unregister_mods:000000000000000c .LVL43
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:412    .text.register_mods:0000000000000000 .LFB26
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:434    .text.register_mods:000000000000000e .LFE26
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:6969   .debug_loc:00000000000001a5 .LLST12
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:6962   .debug_loc:000000000000019f .LVUS12
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:425    .text.register_mods:0000000000000008 .LVL39
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:428    .text.register_mods:000000000000000c .LVL40
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:347    .text.tap_code:0000000000000000 .LFB25
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:405    .text.tap_code:0000000000000026 .LFE25
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:6987   .debug_loc:00000000000001d1 .LLST7
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7011   .debug_loc:00000000000001fb .LLST8
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7002   .debug_loc:00000000000001f3 .LVUS8
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:370    .text.tap_code:000000000000000c .LBI18
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:369    .text.tap_code:000000000000000c .LBB18
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:393    .text.tap_code:000000000000001e .LBE18
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7036   .debug_loc:0000000000000234 .LLST9
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7033   .debug_loc:0000000000000232 .LVUS9
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:373    .text.tap_code:000000000000000c .LBB19
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:392    .text.tap_code:000000000000001e .LBE19
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7048   .debug_loc:000000000000024e .LLST10
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7045   .debug_loc:000000000000024c .LVUS10
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7060   .debug_loc:0000000000000268 .LLST11
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7057   .debug_loc:0000000000000266 .LVUS11
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:362    .text.tap_code:0000000000000008 .LVL33
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:402    .text.tap_code:0000000000000026 .LVL37
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:257    .text.unregister_code:0000000000000000 .LFB24
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:340    .text.unregister_code:0000000000000050 .LFE24
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7088   .debug_loc:0000000000000292 .LLST6
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7069   .debug_loc:0000000000000280 .LVUS6
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:276    .text.unregister_code:0000000000000010 .LVL22
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:281    .text.unregister_code:0000000000000014 .LVL23
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:303    .text.unregister_code:000000000000002e .LVL25
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:319    .text.unregister_code:0000000000000040 .LVL28
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:334    .text.unregister_code:000000000000004e .LVL31
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:162    .text.register_code:0000000000000000 .LFB23
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:250    .text.register_code:0000000000000056 .LFE23
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7141   .debug_loc:000000000000030c .LLST4
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7171   .debug_loc:000000000000033c .LLST5
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7156   .debug_loc:000000000000032e .LVUS5
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:194    .text.register_code:000000000000001e .LVL12
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:201    .text.register_code:0000000000000028 .LVL13
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:204    .text.register_code:000000000000002c .LVL14
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:209    .text.register_code:0000000000000032 .LVL15
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:218    .text.register_code:0000000000000038 .LVL16
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:239    .text.register_code:0000000000000050 .LVL18
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:470    .text.process_action:0000000000000000 .LFB22
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1412   .text.process_action:00000000000003ca .LFE22
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7211   .debug_loc:000000000000039a .LLST14
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7285   .debug_loc:000000000000042e .LLST15
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7274   .debug_loc:0000000000000424 .LVUS15
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7352   .debug_loc:0000000000000498 .LLST16
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7329   .debug_loc:0000000000000482 .LVUS16
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7465   .debug_loc:000000000000055a .LLST17
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7454   .debug_loc:0000000000000550 .LVUS17
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7528   .debug_loc:00000000000005c0 .LLST18
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7519   .debug_loc:00000000000005b8 .LVUS18
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7558   .debug_loc:00000000000005fe .LLST19
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7547   .debug_loc:00000000000005f4 .LVUS19
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7590   .debug_loc:0000000000000645 .LLST20
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7583   .debug_loc:000000000000063f .LVUS20
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:654    .text.process_action:000000000000009a .LVL58
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:658    .text.process_action:000000000000009e .LVL59
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:675    .text.process_action:00000000000000ac .LVL62
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:681    .text.process_action:00000000000000b4 .LVL63
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:700    .text.process_action:00000000000000ca .LVL64
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:704    .text.process_action:00000000000000ce .LVL65
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:775    .text.process_action:0000000000000122 .LVL77
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7610   .debug_loc:0000000000000672 .LLST21
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7605   .debug_loc:000000000000066e .LVUS21
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:925    .text.process_action:00000000000001ae .LBI24
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:924    .text.process_action:00000000000001ae .LBB24
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:945    .text.process_action:00000000000001bc .LBE24
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7624   .debug_loc:0000000000000692 .LLST22
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7621   .debug_loc:0000000000000690 .LVUS22
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:927    .text.process_action:00000000000001ae .LBB25
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:944    .text.process_action:00000000000001bc .LBE25
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7636   .debug_loc:00000000000006ac .LLST23
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7633   .debug_loc:00000000000006aa .LVUS23
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7648   .debug_loc:00000000000006c6 .LLST24
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7645   .debug_loc:00000000000006c4 .LVUS24
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:838    .text.process_action:0000000000000160 .LVL81
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:860    .text.process_action:0000000000000170 .LVL85
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:864    .text.process_action:0000000000000176 .LVL86
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:874    .text.process_action:0000000000000180 .LVL87
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:881    .text.process_action:0000000000000186 .LVL88
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:971    .text.process_action:00000000000001d4 .LBB30
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1078   .text.process_action:0000000000000252 .LBE30
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7660   .debug_loc:00000000000006e0 .LLST28
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7657   .debug_loc:00000000000006de .LVUS28
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7681   .debug_loc:0000000000000700 .LLST29
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7678   .debug_loc:00000000000006fe .LVUS29
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1054   .text.process_action:000000000000023e .LVL99
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1060   .text.process_action:0000000000000244 .LVL100
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1066   .text.process_action:000000000000024a .LVL101
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1072   .text.process_action:0000000000000250 .LVL102
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1092   .text.process_action:0000000000000262 .LBB31
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1199   .text.process_action:00000000000002e0 .LBE31
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7702   .debug_loc:0000000000000720 .LLST30
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7699   .debug_loc:000000000000071e .LVUS30
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7723   .debug_loc:0000000000000740 .LLST31
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7720   .debug_loc:000000000000073e .LVUS31
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1175   .text.process_action:00000000000002cc .LVL111
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1181   .text.process_action:00000000000002d2 .LVL112
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1187   .text.process_action:00000000000002d8 .LVL113
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1193   .text.process_action:00000000000002de .LVL114
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1363   .text.process_action:00000000000003a0 .LBI27
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7744   .debug_loc:0000000000000760 .LLST25
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7741   .debug_loc:000000000000075e .LVUS25
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7756   .debug_loc:000000000000077a .LLST26
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7753   .debug_loc:0000000000000778 .LVUS26
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7768   .debug_loc:0000000000000794 .LLST27
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7765   .debug_loc:0000000000000792 .LVUS27
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:534    .text.process_action:0000000000000028 .LVL47
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:540    .text.process_action:000000000000002c .LVL48
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:567    .text.process_action:000000000000004c .LVL50
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:571    .text.process_action:0000000000000050 .LVL51
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:667    .text.process_action:00000000000000a4 .LVL60
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:717    .text.process_action:00000000000000de .LVL66
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:719    .text.process_action:00000000000000e2 .LVL67
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:729    .text.process_action:00000000000000ec .LVL68
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:739    .text.process_action:00000000000000f8 .LVL69
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:741    .text.process_action:00000000000000fc .LVL70
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:745    .text.process_action:0000000000000102 .LVL71
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:748    .text.process_action:0000000000000106 .LVL72
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:769    .text.process_action:000000000000011c .LVL76
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:847    .text.process_action:0000000000000166 .LVL83
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:957    .text.process_action:00000000000001c6 .LVL91
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1209   .text.process_action:00000000000002ec .LVL117
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1217   .text.process_action:00000000000002f6 .LVL118
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1224   .text.process_action:00000000000002fc .LVL120
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1266   .text.process_action:0000000000000330 .LVL122
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1271   .text.process_action:0000000000000338 .LVL123
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1289   .text.process_action:000000000000034c .LVL125
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1308   .text.process_action:0000000000000362 .LVL126
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1327   .text.process_action:000000000000037a .LVL127
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1332   .text.process_action:0000000000000380 .LVL128
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1338   .text.process_action:0000000000000388 .LVL129
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1347   .text.process_action:0000000000000394 .LVL130
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1419   .text.process_record_handler:0000000000000000 .LFB21
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1484   .text.process_record_handler:000000000000002e .LFE21
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7777   .debug_loc:00000000000007ac .LLST32
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7819   .debug_loc:00000000000007fd .LLST33
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7810   .debug_loc:00000000000007f5 .LVUS33
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7859   .debug_loc:0000000000000845 .LLST34
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7856   .debug_loc:0000000000000843 .LVUS34
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1452   .text.process_record_handler:0000000000000014 .LVL139
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1460   .text.process_record_handler:000000000000001a .LVL141
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1464   .text.process_record_handler:000000000000001e .LVL142
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1481   .text.process_record_handler:000000000000002e .LVL145
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1491   .text.process_record:0000000000000000 .LFB20
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1584   .text.process_record:0000000000000050 .LFE20
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7871   .debug_loc:000000000000085d .LLST35
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7909   .debug_loc:000000000000089c .LLST36
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7892   .debug_loc:000000000000088c .LVUS36
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1510   .text.process_record:0000000000000006 .LBI35
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1509   .text.process_record:0000000000000006 .LBB35
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1530   .text.process_record:0000000000000018 .LBE35
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1542   .text.process_record:0000000000000024 .LVL150
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1552   .text.process_record:000000000000002e .LVL152
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1558   .text.process_record:0000000000000034 .LVL153
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1565   .text.process_record:000000000000003c .LVL154
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1582   .text.process_record:0000000000000050 .LVL156
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:137    .text.process_record_tap_hint:0000000000000000 .LFB19
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:155    .text.process_record_tap_hint:000000000000000a .LFE19
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7985   .debug_loc:0000000000000924 .LLST3
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:7978   .debug_loc:000000000000091e .LVUS3
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:152    .text.process_record_tap_hint:000000000000000a .LVL9
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:118    .text.post_process_record_quantum:0000000000000000 .LFB18
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:130    .text.post_process_record_quantum:0000000000000002 .LFE18
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:96     .text.process_record_quantum:0000000000000000 .LFB17
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:111    .text.process_record_quantum:0000000000000004 .LFE17
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:8018   .debug_loc:000000000000095e .LLST2
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:8013   .debug_loc:000000000000095a .LVUS2
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1591   .text.process_record_nocache:0000000000000000 .LFB16
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1612   .text.process_record_nocache:0000000000000010 .LFE16
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:8042   .debug_loc:0000000000000988 .LLST37
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:8037   .debug_loc:0000000000000984 .LVUS37
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1604   .text.process_record_nocache:000000000000000a .LVL158
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:14     .text.action_exec:0000000000000000 .LFB15
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:89     .text.action_exec:0000000000000054 .LFE15
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:8061   .debug_loc:00000000000009ae .LLST0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:8099   .debug_loc:00000000000009fb .LLST1
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:8092   .debug_loc:00000000000009f5 .LVUS1
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:87     .text.action_exec:0000000000000054 .LVL3
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1896   .text.debug_record:0000000000000002 .LCFI25
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1900   .text.debug_record:0000000000000004 .LCFI26
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1906   .text.debug_record:000000000000000a .LCFI27
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1910   .text.debug_record:000000000000000e .LCFI28
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1854   .text.debug_event:0000000000000002 .LCFI21
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1858   .text.debug_event:0000000000000004 .LCFI22
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1864   .text.debug_event:000000000000000a .LCFI23
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1868   .text.debug_event:000000000000000e .LCFI24
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1739   .text.is_tap_action:0000000000000000 .LVL172
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1788   .text.is_tap_action:0000000000000022 .LVL173
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1792   .text.is_tap_action:0000000000000024 .LVL174
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1800   .text.is_tap_action:000000000000002a .LVL175
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1803   .text.is_tap_action:000000000000002c .LVL176
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1817   .text.is_tap_action:000000000000003c .LVL177
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1827   .text.is_tap_key:0000000000000000 .LVL178
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1647   .text.unregister_weak_mods:0000000000000000 .LVL162
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1618   .text.register_weak_mods:0000000000000000 .LVL159
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:440    .text.unregister_mods:0000000000000000 .LVL41
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:411    .text.register_mods:0000000000000000 .LVL38
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:352    .text.tap_code:0000000000000002 .LCFI5
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:346    .text.tap_code:0000000000000000 .LVL32
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:399    .text.tap_code:0000000000000022 .LVL36
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:368    .text.tap_code:000000000000000c .LVL34
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:389    .text.tap_code:000000000000001e .LVL35
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:256    .text.unregister_code:0000000000000000 .LVL21
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:292    .text.unregister_code:000000000000001e .LVL24
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:305    .text.unregister_code:0000000000000030 .LVL26
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:316    .text.unregister_code:000000000000003c .LVL27
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:324    .text.unregister_code:0000000000000042 .LVL29
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:331    .text.unregister_code:000000000000004a .LVL30
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:167    .text.register_code:0000000000000002 .LCFI4
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:161    .text.register_code:0000000000000000 .LVL10
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:182    .text.register_code:000000000000000a .LVL11
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:229    .text.register_code:0000000000000042 .LVL17
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:241    .text.register_code:0000000000000052 .LVL19
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:246    .text.register_code:0000000000000054 .LVL20
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:475    .text.process_action:0000000000000002 .LCFI6
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:479    .text.process_action:0000000000000004 .LCFI7
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:483    .text.process_action:0000000000000006 .LCFI8
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:487    .text.process_action:0000000000000008 .LCFI9
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:491    .text.process_action:000000000000000a .LCFI10
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:495    .text.process_action:000000000000000c .LCFI11
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:499    .text.process_action:000000000000000e .LCFI12
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:503    .text.process_action:0000000000000010 .LCFI13
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:507    .text.process_action:0000000000000012 .LCFI14
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:469    .text.process_action:0000000000000000 .LVL44
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:764    .text.process_action:0000000000000116 .LVL75
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1407   .text.process_action:00000000000003c6 .LVL136
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:557    .text.process_action:0000000000000040 .LVL49
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:624    .text.process_action:000000000000007a .LVL56
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:669    .text.process_action:00000000000000a6 .LVL61
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:752    .text.process_action:0000000000000108 .LVL73
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:777    .text.process_action:0000000000000124 .LVL78
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:788    .text.process_action:000000000000012c .LVL79
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:941    .text.process_action:00000000000001bc .LVL90
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1038   .text.process_action:0000000000000226 .LVL97
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1075   .text.process_action:0000000000000252 .LVL103
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1159   .text.process_action:00000000000002b4 .LVL109
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1196   .text.process_action:00000000000002e0 .LVL115
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1202   .text.process_action:00000000000002e2 .LVL116
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1220   .text.process_action:00000000000002f8 .LVL119
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1262   .text.process_action:000000000000032a .LVL121
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1273   .text.process_action:000000000000033a .LVL124
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1395   .text.process_action:00000000000003b8 .LVL134
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:519    .text.process_action:0000000000000018 .LVL45
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:985    .text.process_action:00000000000001e2 .LVL93
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1106   .text.process_action:0000000000000270 .LVL105
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1390   .text.process_action:00000000000003b6 .LVL133
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:526    .text.process_action:0000000000000020 .LVL46
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:619    .text.process_action:0000000000000076 .LVL55
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:990    .text.process_action:00000000000001e6 .LVL94
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1111   .text.process_action:0000000000000274 .LVL106
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:576    .text.process_action:0000000000000056 .LVL52
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:609    .text.process_action:0000000000000070 .LVL53
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:614    .text.process_action:0000000000000074 .LVL54
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:760    .text.process_action:0000000000000112 .LVL74
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1403   .text.process_action:00000000000003c2 .LVL135
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:631    .text.process_action:0000000000000080 .LVL57
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:797    .text.process_action:0000000000000136 .LVL80
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:841    .text.process_action:0000000000000162 .LVL82
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:849    .text.process_action:0000000000000168 .LVL84
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:923    .text.process_action:00000000000001ae .LVL89
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1005   .text.process_action:00000000000001fa .LVL95
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1033   .text.process_action:0000000000000222 .LVL96
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1042   .text.process_action:000000000000022a .LVL98
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1126   .text.process_action:0000000000000288 .LVL107
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1154   .text.process_action:00000000000002b0 .LVL108
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1163   .text.process_action:00000000000002b8 .LVL110
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1361   .text.process_action:00000000000003a0 .LVL131
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1380   .text.process_action:00000000000003b0 .LVL132
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1424   .text.process_record_handler:0000000000000002 .LCFI15
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1428   .text.process_record_handler:0000000000000004 .LCFI16
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1432   .text.process_record_handler:0000000000000006 .LCFI17
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1436   .text.process_record_handler:0000000000000008 .LCFI18
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1418   .text.process_record_handler:0000000000000000 .LVL137
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1449   .text.process_record_handler:0000000000000010 .LVL138
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1474   .text.process_record_handler:0000000000000026 .LVL143
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1478   .text.process_record_handler:000000000000002a .LVL144
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1496   .text.process_record:0000000000000002 .LCFI19
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1500   .text.process_record:0000000000000004 .LCFI20
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1490   .text.process_record:0000000000000000 .LVL146
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1518   .text.process_record:000000000000000a .LVL147
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1534   .text.process_record:000000000000001c .LVL148
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1537   .text.process_record:000000000000001e .LVL149
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1549   .text.process_record:000000000000002a .LVL151
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1579   .text.process_record:000000000000004c .LVL155
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:136    .text.process_record_tap_hint:0000000000000000 .LVL7
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:149    .text.process_record_tap_hint:0000000000000006 .LVL8
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:95     .text.process_record_quantum:0000000000000000 .LVL4
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:106    .text.process_record_quantum:0000000000000002 .LVL5
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1590   .text.process_record_nocache:0000000000000000 .LVL157
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:19     .text.action_exec:0000000000000002 .LCFI0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:23     .text.action_exec:0000000000000004 .LCFI1
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:28     .text.action_exec:0000000000000008 .LCFI2
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:31     .text.action_exec:000000000000000a .LCFI3
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:47     .text.action_exec:000000000000001e .LVL0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:66     .text.action_exec:0000000000000036 .LVL1
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:69     .text.action_exec:0000000000000038 .LVL2
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1975   .debug_info:0000000000000000 .Ldebug_info0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:616    .text.process_action:0000000000000074 .LBB20
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:662    .text.process_action:000000000000009e .LBE20
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:671    .text.process_action:00000000000000a6 .LBB21
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:707    .text.process_action:00000000000000ce .LBE21
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:771    .text.process_action:000000000000011c .LBB22
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:780    .text.process_action:0000000000000124 .LBE22
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:781    .text.process_action:0000000000000124 .LBB23
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:844    .text.process_action:0000000000000162 .LBE23
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:851    .text.process_action:0000000000000168 .LBB26
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:946    .text.process_action:00000000000001bc .LBE26
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:947    .text.process_action:00000000000001bc .LBB27
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:953    .text.process_action:00000000000001c0 .LBE27
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1362   .text.process_action:00000000000003a0 .LBB32
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccVey84l.s:1384   .text.process_action:00000000000003b0 .LBE32

UNDEFINED SYMBOLS
action_tapping_process
layer_switch_get_action
keyboard_report
is_key_pressed
del_key
send_keyboard_report
add_key
add_mods
del_mods
host_system_send
host_consumer_send
clear_weak_mods
is_oneshot_layer_active
clear_oneshot_layer_state
__tablejump2__
add_weak_mods
host_keyboard_leds
led_set
get_oneshot_layer_state
get_oneshot_layer
layer_on
layer_off
del_weak_mods
get_oneshot_mods
set_oneshot_mods
clear_oneshot_mods
default_layer_and
default_layer_or
default_layer_xor
default_layer_set
layer_and
layer_or
layer_xor
layer_state_set
set_oneshot_layer
layer_invert
layer_move
layer_clear
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
clear_keys
clear_mods
__do_clear_bss
