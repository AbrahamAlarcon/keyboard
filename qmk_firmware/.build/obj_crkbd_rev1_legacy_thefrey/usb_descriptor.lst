   1               		.file	"usb_descriptor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.get_usb_descriptor,"ax",@progbits
  11               	.global	get_usb_descriptor
  13               	get_usb_descriptor:
  14               	.LVL0:
  15               	.LFB102:
  16               		.file 1 "tmk_core/protocol/usb_descriptor.c"
   1:tmk_core/protocol/usb_descriptor.c **** /*
   2:tmk_core/protocol/usb_descriptor.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/usb_descriptor.c ****  * This file is based on:
   4:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/usb_descriptor.c ****  */
   7:tmk_core/protocol/usb_descriptor.c **** 
   8:tmk_core/protocol/usb_descriptor.c **** /*
   9:tmk_core/protocol/usb_descriptor.c ****                          LUFA Library
  10:tmk_core/protocol/usb_descriptor.c ****          Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/usb_descriptor.c **** 
  12:tmk_core/protocol/usb_descriptor.c ****     dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/usb_descriptor.c ****                      www.lufa-lib.org
  14:tmk_core/protocol/usb_descriptor.c **** */
  15:tmk_core/protocol/usb_descriptor.c **** 
  16:tmk_core/protocol/usb_descriptor.c **** /*
  17:tmk_core/protocol/usb_descriptor.c ****     Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/usb_descriptor.c ****     Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/usb_descriptor.c **** 
  20:tmk_core/protocol/usb_descriptor.c ****     Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/usb_descriptor.c ****     software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/usb_descriptor.c ****     without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/usb_descriptor.c ****     all copies and that both that the copyright notice and this
  24:tmk_core/protocol/usb_descriptor.c ****     permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/usb_descriptor.c ****     documentation, and that the name of the author not be used in
  26:tmk_core/protocol/usb_descriptor.c ****     advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/usb_descriptor.c ****     software without specific, written prior permission.
  28:tmk_core/protocol/usb_descriptor.c **** 
  29:tmk_core/protocol/usb_descriptor.c ****     The author disclaim all warranties with regard to this
  30:tmk_core/protocol/usb_descriptor.c ****     software, including all implied warranties of merchantability
  31:tmk_core/protocol/usb_descriptor.c ****     and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/usb_descriptor.c ****     special, indirect or consequential damages or any damages
  33:tmk_core/protocol/usb_descriptor.c ****     whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/usb_descriptor.c ****     in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/usb_descriptor.c ****     arising out of or in connection with the use or performance of
  36:tmk_core/protocol/usb_descriptor.c ****     this software.
  37:tmk_core/protocol/usb_descriptor.c **** */
  38:tmk_core/protocol/usb_descriptor.c **** 
  39:tmk_core/protocol/usb_descriptor.c **** #include "util.h"
  40:tmk_core/protocol/usb_descriptor.c **** #include "report.h"
  41:tmk_core/protocol/usb_descriptor.c **** #include "usb_descriptor.h"
  42:tmk_core/protocol/usb_descriptor.c **** #include "usb_descriptor_common.h"
  43:tmk_core/protocol/usb_descriptor.c **** 
  44:tmk_core/protocol/usb_descriptor.c **** #ifdef JOYSTICK_ENABLE
  45:tmk_core/protocol/usb_descriptor.c **** #    include "joystick.h"
  46:tmk_core/protocol/usb_descriptor.c **** #endif
  47:tmk_core/protocol/usb_descriptor.c **** 
  48:tmk_core/protocol/usb_descriptor.c **** // clang-format off
  49:tmk_core/protocol/usb_descriptor.c **** 
  50:tmk_core/protocol/usb_descriptor.c **** /*
  51:tmk_core/protocol/usb_descriptor.c ****  * HID report descriptors
  52:tmk_core/protocol/usb_descriptor.c ****  */
  53:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  54:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
  55:tmk_core/protocol/usb_descriptor.c **** #    define SHARED_REPORT_STARTED
  56:tmk_core/protocol/usb_descriptor.c **** #else
  57:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM KeyboardReport[] = {
  58:tmk_core/protocol/usb_descriptor.c **** #endif
  59:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),        // Generic Desktop
  60:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06),             // Keyboard
  61:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),        // Application
  62:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  63:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_KEYBOARD),
  64:tmk_core/protocol/usb_descriptor.c **** #endif
  65:tmk_core/protocol/usb_descriptor.c ****         // Modifiers (8 bits)
  66:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
  67:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), // Keyboard Left Control
  68:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), // Keyboard Right GUI
  69:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  70:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
  71:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
  72:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  73:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
  74:tmk_core/protocol/usb_descriptor.c ****         // Reserved (1 byte)
  75:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  76:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  77:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_CONSTANT),
  78:tmk_core/protocol/usb_descriptor.c ****         // Keycodes (6 bytes)
  79:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
  80:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00),
  81:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xFF),
  82:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  83:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
  84:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x06),
  85:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  86:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
  87:tmk_core/protocol/usb_descriptor.c **** 
  88:tmk_core/protocol/usb_descriptor.c ****         // Status LEDs (5 bits)
  89:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08),    // LED
  90:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), // Num Lock
  91:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), // Kana
  92:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
  93:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  94:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
  95:tmk_core/protocol/usb_descriptor.c ****         // LED padding (3 bits)
  96:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  97:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
  98:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
  99:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 100:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 101:tmk_core/protocol/usb_descriptor.c **** };
 102:tmk_core/protocol/usb_descriptor.c **** #endif
 103:tmk_core/protocol/usb_descriptor.c **** 
 104:tmk_core/protocol/usb_descriptor.c **** #ifdef MOUSE_ENABLE
 105:tmk_core/protocol/usb_descriptor.c **** #    ifndef MOUSE_SHARED_EP
 106:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MouseReport[] = {
 107:tmk_core/protocol/usb_descriptor.c **** #    elif !defined(SHARED_REPORT_STARTED)
 108:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 109:tmk_core/protocol/usb_descriptor.c **** #        define SHARED_REPORT_STARTED
 110:tmk_core/protocol/usb_descriptor.c **** #    endif
 111:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),            // Generic Desktop
 112:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x02),                 // Mouse
 113:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),            // Application
 114:tmk_core/protocol/usb_descriptor.c **** #    ifdef MOUSE_SHARED_EP
 115:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_MOUSE),
 116:tmk_core/protocol/usb_descriptor.c **** #    endif
 117:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x01),             // Pointer
 118:tmk_core/protocol/usb_descriptor.c ****         HID_RI_COLLECTION(8, 0x00),        // Physical
 119:tmk_core/protocol/usb_descriptor.c ****             // Buttons (5 bits)
 120:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x09),    // Button
 121:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MINIMUM(8, 0x01), // Button 1
 122:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MAXIMUM(8, 0x05), // Button 5
 123:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, 0x00),
 124:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 125:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x05),
 126:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 127:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 128:tmk_core/protocol/usb_descriptor.c ****             // Button padding (3 bits)
 129:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 130:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x03),
 131:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_CONSTANT),
 132:tmk_core/protocol/usb_descriptor.c **** 
 133:tmk_core/protocol/usb_descriptor.c ****             // X/Y position (2 bytes)
 134:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x01),    // Generic Desktop
 135:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x30),         // X
 136:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x31),         // Y
 137:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 138:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 139:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x02),
 140:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 141:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 142:tmk_core/protocol/usb_descriptor.c **** 
 143:tmk_core/protocol/usb_descriptor.c ****             // Vertical wheel (1 byte)
 144:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x38),         // Wheel
 145:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 146:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 147:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 148:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 149:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 150:tmk_core/protocol/usb_descriptor.c ****             // Horizontal wheel (1 byte)
 151:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x0C),    // Consumer
 152:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(16, 0x0238),      // AC Pan
 153:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 154:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 155:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 156:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 157:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 158:tmk_core/protocol/usb_descriptor.c ****         HID_RI_END_COLLECTION(0),
 159:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 160:tmk_core/protocol/usb_descriptor.c **** #    ifndef MOUSE_SHARED_EP
 161:tmk_core/protocol/usb_descriptor.c **** };
 162:tmk_core/protocol/usb_descriptor.c **** #    endif
 163:tmk_core/protocol/usb_descriptor.c **** #endif
 164:tmk_core/protocol/usb_descriptor.c **** 
 165:tmk_core/protocol/usb_descriptor.c **** #if defined(SHARED_EP_ENABLE) && !defined(SHARED_REPORT_STARTED)
 166:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 167:tmk_core/protocol/usb_descriptor.c **** #endif
 168:tmk_core/protocol/usb_descriptor.c **** 
 169:tmk_core/protocol/usb_descriptor.c **** #ifdef EXTRAKEY_ENABLE
 170:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),           // Generic Desktop
 171:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x80),                // System Control
 172:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),           // Application
 173:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_SYSTEM),
 174:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01),    // Pointer
 175:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x00B7), // System Display LCD Autoscale
 176:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x01),
 177:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00B7),
 178:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 179:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 180:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 181:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 182:tmk_core/protocol/usb_descriptor.c **** 
 183:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C),           // Consumer
 184:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x01),                // Consumer Control
 185:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),           // Application
 186:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_CONSUMER),
 187:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01),    // Consumer Control
 188:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x02A0), // AC Desktop Show All Applications
 189:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x01),
 190:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x02A0),
 191:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 192:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 193:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 194:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 195:tmk_core/protocol/usb_descriptor.c **** #endif
 196:tmk_core/protocol/usb_descriptor.c **** 
 197:tmk_core/protocol/usb_descriptor.c **** #ifdef NKRO_ENABLE
 198:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),        // Generic Desktop
 199:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06),             // Keyboard
 200:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),        // Application
 201:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_NKRO),
 202:tmk_core/protocol/usb_descriptor.c ****         // Modifiers (8 bits)
 203:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
 204:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), // Keyboard Left Control
 205:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), // Keyboard Right GUI
 206:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 207:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 208:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
 209:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 210:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 211:tmk_core/protocol/usb_descriptor.c ****         // Keycodes
 212:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
 213:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00),
 214:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, KEYBOARD_REPORT_BITS * 8 - 1),
 215:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 216:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 217:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, KEYBOARD_REPORT_BITS * 8),
 218:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 219:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 220:tmk_core/protocol/usb_descriptor.c **** 
 221:tmk_core/protocol/usb_descriptor.c ****         // Status LEDs (5 bits)
 222:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08),    // LED
 223:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), // Num Lock
 224:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), // Kana
 225:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
 226:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 227:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 228:tmk_core/protocol/usb_descriptor.c ****         // LED padding (3 bits)
 229:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
 230:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
 231:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
 232:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 233:tmk_core/protocol/usb_descriptor.c **** #endif
 234:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 235:tmk_core/protocol/usb_descriptor.c **** };
 236:tmk_core/protocol/usb_descriptor.c **** #endif
 237:tmk_core/protocol/usb_descriptor.c **** 
 238:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 239:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM RawReport[] = {
 240:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, RAW_USAGE_PAGE), // Vendor Defined
 241:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, RAW_USAGE_ID),         // Vendor Defined
 242:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),    // Application
 243:tmk_core/protocol/usb_descriptor.c ****         // Data to host
 244:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x62),     // Vendor Defined
 245:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 246:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 247:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 248:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 249:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 250:tmk_core/protocol/usb_descriptor.c **** 
 251:tmk_core/protocol/usb_descriptor.c ****         // Data from host
 252:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x63),     // Vendor Defined
 253:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 254:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 255:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 256:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 257:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 258:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 259:tmk_core/protocol/usb_descriptor.c **** };
 260:tmk_core/protocol/usb_descriptor.c **** #endif
 261:tmk_core/protocol/usb_descriptor.c **** 
 262:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 263:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ConsoleReport[] = {
 264:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF31), // Vendor Defined (PJRC Teensy compatible)
 265:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x74),         // Vendor Defined (PJRC Teensy compatible)
 266:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),    // Application
 267:tmk_core/protocol/usb_descriptor.c ****         // Data to host
 268:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x75),     // Vendor Defined
 269:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 270:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 271:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 272:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 273:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 274:tmk_core/protocol/usb_descriptor.c **** 
 275:tmk_core/protocol/usb_descriptor.c ****         // Data from host
 276:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x76),     // Vendor Defined
 277:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 278:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 279:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 280:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 281:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 282:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 283:tmk_core/protocol/usb_descriptor.c **** };
 284:tmk_core/protocol/usb_descriptor.c **** #endif
 285:tmk_core/protocol/usb_descriptor.c **** 
 286:tmk_core/protocol/usb_descriptor.c **** #ifdef JOYSTICK_ENABLE
 287:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT == 0 && JOYSTICK_BUTTON_COUNT == 0
 288:tmk_core/protocol/usb_descriptor.c **** #        error Need at least one axis or button for joystick
 289:tmk_core/protocol/usb_descriptor.c **** #    endif
 290:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM JoystickReport[] = {
 291:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),         // Generic Desktop
 292:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x04),              // Joystick
 293:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),         // Application
 294:tmk_core/protocol/usb_descriptor.c ****         HID_RI_COLLECTION(8, 0x00),     // Physical
 295:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x01), // Generic Desktop
 296:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 1
 297:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x30),      // X
 298:tmk_core/protocol/usb_descriptor.c **** #    endif
 299:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 2
 300:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x31),      // Y
 301:tmk_core/protocol/usb_descriptor.c **** #    endif
 302:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 3
 303:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x32),      // Z
 304:tmk_core/protocol/usb_descriptor.c **** #    endif
 305:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 4
 306:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x33),      // Rx
 307:tmk_core/protocol/usb_descriptor.c **** #    endif
 308:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 5
 309:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x34),      // Ry
 310:tmk_core/protocol/usb_descriptor.c **** #    endif
 311:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 6
 312:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x35),      // Rz
 313:tmk_core/protocol/usb_descriptor.c **** #    endif
 314:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 1
 315:tmk_core/protocol/usb_descriptor.c ****      # if JOYSTICK_AXES_RESOLUTION == 8
 316:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -JOYSTICK_RESOLUTION),
 317:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, JOYSTICK_RESOLUTION),
 318:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, JOYSTICK_AXES_COUNT),
 319:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 320:tmk_core/protocol/usb_descriptor.c ****      # else
 321:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(16, -JOYSTICK_RESOLUTION),
 322:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(16, JOYSTICK_RESOLUTION),
 323:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, JOYSTICK_AXES_COUNT),
 324:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x10),
 325:tmk_core/protocol/usb_descriptor.c ****      # endif
 326:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 327:tmk_core/protocol/usb_descriptor.c **** #    endif
 328:tmk_core/protocol/usb_descriptor.c **** 
 329:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_BUTTON_COUNT >= 1
 330:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x09), // Button
 331:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MINIMUM(8, 0x01),
 332:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MAXIMUM(8, JOYSTICK_BUTTON_COUNT),
 333:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, 0x00),
 334:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 335:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, JOYSTICK_BUTTON_COUNT),
 336:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 337:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 338:tmk_core/protocol/usb_descriptor.c **** 
 339:tmk_core/protocol/usb_descriptor.c **** #        if (JOYSTICK_BUTTON_COUNT % 8) != 0
 340:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 8 - (JOYSTICK_BUTTON_COUNT % 8)),
 341:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 342:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_CONSTANT),
 343:tmk_core/protocol/usb_descriptor.c **** #        endif
 344:tmk_core/protocol/usb_descriptor.c **** #    endif
 345:tmk_core/protocol/usb_descriptor.c ****         HID_RI_END_COLLECTION(0),
 346:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0)
 347:tmk_core/protocol/usb_descriptor.c **** };
 348:tmk_core/protocol/usb_descriptor.c **** #endif
 349:tmk_core/protocol/usb_descriptor.c **** 
 350:tmk_core/protocol/usb_descriptor.c **** /*
 351:tmk_core/protocol/usb_descriptor.c ****  * Device descriptor
 352:tmk_core/protocol/usb_descriptor.c ****  */
 353:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor = {
 354:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 355:tmk_core/protocol/usb_descriptor.c ****         .Size                   = sizeof(USB_Descriptor_Device_t),
 356:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_Device
 357:tmk_core/protocol/usb_descriptor.c ****     },
 358:tmk_core/protocol/usb_descriptor.c ****     .USBSpecification           = VERSION_BCD(1, 1, 0),
 359:tmk_core/protocol/usb_descriptor.c ****     
 360:tmk_core/protocol/usb_descriptor.c **** #if VIRTSER_ENABLE
 361:tmk_core/protocol/usb_descriptor.c ****     .Class                      = USB_CSCP_IADDeviceClass,
 362:tmk_core/protocol/usb_descriptor.c ****     .SubClass                   = USB_CSCP_IADDeviceSubclass,
 363:tmk_core/protocol/usb_descriptor.c ****     .Protocol                   = USB_CSCP_IADDeviceProtocol,
 364:tmk_core/protocol/usb_descriptor.c **** #else
 365:tmk_core/protocol/usb_descriptor.c ****     .Class                      = USB_CSCP_NoDeviceClass,
 366:tmk_core/protocol/usb_descriptor.c ****     .SubClass                   = USB_CSCP_NoDeviceSubclass,
 367:tmk_core/protocol/usb_descriptor.c ****     .Protocol                   = USB_CSCP_NoDeviceProtocol,
 368:tmk_core/protocol/usb_descriptor.c **** #endif
 369:tmk_core/protocol/usb_descriptor.c **** 
 370:tmk_core/protocol/usb_descriptor.c ****     .Endpoint0Size              = FIXED_CONTROL_ENDPOINT_SIZE,
 371:tmk_core/protocol/usb_descriptor.c ****     // Specified in config.h
 372:tmk_core/protocol/usb_descriptor.c ****     .VendorID                   = VENDOR_ID,
 373:tmk_core/protocol/usb_descriptor.c ****     .ProductID                  = PRODUCT_ID,
 374:tmk_core/protocol/usb_descriptor.c ****     .ReleaseNumber              = DEVICE_VER,
 375:tmk_core/protocol/usb_descriptor.c ****     .ManufacturerStrIndex       = 0x01,
 376:tmk_core/protocol/usb_descriptor.c ****     .ProductStrIndex            = 0x02,
 377:tmk_core/protocol/usb_descriptor.c **** #if defined(SERIAL_NUMBER)
 378:tmk_core/protocol/usb_descriptor.c ****     .SerialNumStrIndex          = 0x03,
 379:tmk_core/protocol/usb_descriptor.c **** #else
 380:tmk_core/protocol/usb_descriptor.c ****     .SerialNumStrIndex          = 0x00,
 381:tmk_core/protocol/usb_descriptor.c **** #endif
 382:tmk_core/protocol/usb_descriptor.c ****     .NumberOfConfigurations     = FIXED_NUM_CONFIGURATIONS
 383:tmk_core/protocol/usb_descriptor.c **** };
 384:tmk_core/protocol/usb_descriptor.c **** 
 385:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_MAX_POWER_CONSUMPTION
 386:tmk_core/protocol/usb_descriptor.c **** #    define USB_MAX_POWER_CONSUMPTION 500
 387:tmk_core/protocol/usb_descriptor.c **** #endif
 388:tmk_core/protocol/usb_descriptor.c **** 
 389:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_POLLING_INTERVAL_MS
 390:tmk_core/protocol/usb_descriptor.c **** #    define USB_POLLING_INTERVAL_MS 10
 391:tmk_core/protocol/usb_descriptor.c **** #endif
 392:tmk_core/protocol/usb_descriptor.c **** 
 393:tmk_core/protocol/usb_descriptor.c **** /*
 394:tmk_core/protocol/usb_descriptor.c ****  * Configuration descriptors
 395:tmk_core/protocol/usb_descriptor.c ****  */
 396:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor = {
 397:tmk_core/protocol/usb_descriptor.c ****     .Config = {
 398:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 399:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Configuration_Header_t),
 400:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Configuration
 401:tmk_core/protocol/usb_descriptor.c ****         },
 402:tmk_core/protocol/usb_descriptor.c ****         .TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 403:tmk_core/protocol/usb_descriptor.c ****         .TotalInterfaces        = TOTAL_INTERFACES,
 404:tmk_core/protocol/usb_descriptor.c ****         .ConfigurationNumber    = 1,
 405:tmk_core/protocol/usb_descriptor.c ****         .ConfigurationStrIndex  = NO_DESCRIPTOR,
 406:tmk_core/protocol/usb_descriptor.c ****         .ConfigAttributes       = (USB_CONFIG_ATTR_RESERVED | USB_CONFIG_ATTR_REMOTEWAKEUP),
 407:tmk_core/protocol/usb_descriptor.c ****         .MaxPowerConsumption    = USB_CONFIG_POWER_MA(USB_MAX_POWER_CONSUMPTION)
 408:tmk_core/protocol/usb_descriptor.c ****     },
 409:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 410:tmk_core/protocol/usb_descriptor.c ****     /*
 411:tmk_core/protocol/usb_descriptor.c ****      * Keyboard
 412:tmk_core/protocol/usb_descriptor.c ****      */
 413:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_Interface = {
 414:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 415:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 416:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 417:tmk_core/protocol/usb_descriptor.c ****         },
 418:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = KEYBOARD_INTERFACE,
 419:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 420:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 421:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 422:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_BootSubclass,
 423:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_KeyboardBootProtocol,
 424:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 425:tmk_core/protocol/usb_descriptor.c ****     },
 426:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_HID = {
 427:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 428:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 429:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 430:tmk_core/protocol/usb_descriptor.c ****         },
 431:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 432:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 433:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 434:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 435:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(KeyboardReport)
 436:tmk_core/protocol/usb_descriptor.c ****     },
 437:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_INEndpoint = {
 438:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 439:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 440:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 441:tmk_core/protocol/usb_descriptor.c ****         },
 442:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | KEYBOARD_IN_EPNUM),
 443:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 444:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = KEYBOARD_EPSIZE,
 445:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 446:tmk_core/protocol/usb_descriptor.c ****     },
 447:tmk_core/protocol/usb_descriptor.c **** #endif
 448:tmk_core/protocol/usb_descriptor.c **** 
 449:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 450:tmk_core/protocol/usb_descriptor.c ****     /*
 451:tmk_core/protocol/usb_descriptor.c ****      * Raw HID
 452:tmk_core/protocol/usb_descriptor.c ****      */
 453:tmk_core/protocol/usb_descriptor.c ****     .Raw_Interface = {
 454:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 455:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 456:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 457:tmk_core/protocol/usb_descriptor.c ****         },
 458:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = RAW_INTERFACE,
 459:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 460:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 461:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 462:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 463:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 464:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 465:tmk_core/protocol/usb_descriptor.c ****     },
 466:tmk_core/protocol/usb_descriptor.c ****     .Raw_HID = {
 467:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 468:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 469:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 470:tmk_core/protocol/usb_descriptor.c ****         },
 471:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 472:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 473:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 474:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 475:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(RawReport)
 476:tmk_core/protocol/usb_descriptor.c ****     },
 477:tmk_core/protocol/usb_descriptor.c ****     .Raw_INEndpoint = {
 478:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 479:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 480:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 481:tmk_core/protocol/usb_descriptor.c ****         },
 482:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | RAW_IN_EPNUM),
 483:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 484:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = RAW_EPSIZE,
 485:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 486:tmk_core/protocol/usb_descriptor.c ****     },
 487:tmk_core/protocol/usb_descriptor.c ****     .Raw_OUTEndpoint = {
 488:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 489:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 490:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 491:tmk_core/protocol/usb_descriptor.c ****         },
 492:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_OUT | RAW_OUT_EPNUM),
 493:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 494:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = RAW_EPSIZE,
 495:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 496:tmk_core/protocol/usb_descriptor.c ****     },
 497:tmk_core/protocol/usb_descriptor.c **** #endif
 498:tmk_core/protocol/usb_descriptor.c **** 
 499:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 500:tmk_core/protocol/usb_descriptor.c ****     /*
 501:tmk_core/protocol/usb_descriptor.c ****      * Mouse
 502:tmk_core/protocol/usb_descriptor.c ****      */
 503:tmk_core/protocol/usb_descriptor.c ****     .Mouse_Interface  = {
 504:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 505:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 506:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 507:tmk_core/protocol/usb_descriptor.c ****         },
 508:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = MOUSE_INTERFACE,
 509:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 510:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 511:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 512:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_BootSubclass,
 513:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_MouseBootProtocol,
 514:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 515:tmk_core/protocol/usb_descriptor.c ****     },
 516:tmk_core/protocol/usb_descriptor.c ****     .Mouse_HID = {
 517:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 518:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 519:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 520:tmk_core/protocol/usb_descriptor.c ****         },
 521:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 522:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 523:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 524:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 525:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(MouseReport)
 526:tmk_core/protocol/usb_descriptor.c ****     },
 527:tmk_core/protocol/usb_descriptor.c ****     .Mouse_INEndpoint = {
 528:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 529:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 530:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 531:tmk_core/protocol/usb_descriptor.c ****         },
 532:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | MOUSE_IN_EPNUM),
 533:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 534:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = MOUSE_EPSIZE,
 535:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 536:tmk_core/protocol/usb_descriptor.c ****     },
 537:tmk_core/protocol/usb_descriptor.c **** #endif
 538:tmk_core/protocol/usb_descriptor.c **** 
 539:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 540:tmk_core/protocol/usb_descriptor.c ****     /*
 541:tmk_core/protocol/usb_descriptor.c ****      * Shared
 542:tmk_core/protocol/usb_descriptor.c ****      */
 543:tmk_core/protocol/usb_descriptor.c ****     .Shared_Interface = {
 544:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 545:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 546:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 547:tmk_core/protocol/usb_descriptor.c ****         },
 548:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = SHARED_INTERFACE,
 549:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 550:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 551:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 552:tmk_core/protocol/usb_descriptor.c **** #    ifdef KEYBOARD_SHARED_EP
 553:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_BootSubclass,
 554:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_KeyboardBootProtocol,
 555:tmk_core/protocol/usb_descriptor.c **** #    else
 556:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 557:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 558:tmk_core/protocol/usb_descriptor.c **** #    endif
 559:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 560:tmk_core/protocol/usb_descriptor.c ****     },
 561:tmk_core/protocol/usb_descriptor.c ****     .Shared_HID = {
 562:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 563:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 564:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 565:tmk_core/protocol/usb_descriptor.c ****         },
 566:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 567:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 568:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 569:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 570:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(SharedReport)
 571:tmk_core/protocol/usb_descriptor.c ****     },
 572:tmk_core/protocol/usb_descriptor.c ****     .Shared_INEndpoint = {
 573:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 574:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 575:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 576:tmk_core/protocol/usb_descriptor.c ****         },
 577:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | SHARED_IN_EPNUM),
 578:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 579:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = SHARED_EPSIZE,
 580:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 581:tmk_core/protocol/usb_descriptor.c ****     },
 582:tmk_core/protocol/usb_descriptor.c **** #endif
 583:tmk_core/protocol/usb_descriptor.c **** 
 584:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 585:tmk_core/protocol/usb_descriptor.c ****     /*
 586:tmk_core/protocol/usb_descriptor.c ****      * Console
 587:tmk_core/protocol/usb_descriptor.c ****      */
 588:tmk_core/protocol/usb_descriptor.c ****     .Console_Interface = {
 589:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 590:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 591:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 592:tmk_core/protocol/usb_descriptor.c ****         },
 593:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = CONSOLE_INTERFACE,
 594:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 595:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 596:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 597:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 598:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 599:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 600:tmk_core/protocol/usb_descriptor.c ****     },
 601:tmk_core/protocol/usb_descriptor.c ****     .Console_HID = {
 602:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 603:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 604:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 605:tmk_core/protocol/usb_descriptor.c ****         },
 606:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 607:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 608:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 609:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 610:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(ConsoleReport)
 611:tmk_core/protocol/usb_descriptor.c ****     },
 612:tmk_core/protocol/usb_descriptor.c ****     .Console_INEndpoint = {
 613:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 614:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 615:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 616:tmk_core/protocol/usb_descriptor.c ****         },
 617:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | CONSOLE_IN_EPNUM),
 618:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 619:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CONSOLE_EPSIZE,
 620:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 621:tmk_core/protocol/usb_descriptor.c ****     },
 622:tmk_core/protocol/usb_descriptor.c ****     .Console_OUTEndpoint = {
 623:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 624:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 625:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 626:tmk_core/protocol/usb_descriptor.c ****         },
 627:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_OUT | CONSOLE_OUT_EPNUM),
 628:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 629:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CONSOLE_EPSIZE,
 630:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 631:tmk_core/protocol/usb_descriptor.c ****     },
 632:tmk_core/protocol/usb_descriptor.c **** #endif
 633:tmk_core/protocol/usb_descriptor.c **** 
 634:tmk_core/protocol/usb_descriptor.c **** #ifdef MIDI_ENABLE
 635:tmk_core/protocol/usb_descriptor.c ****     /*
 636:tmk_core/protocol/usb_descriptor.c ****      * MIDI
 637:tmk_core/protocol/usb_descriptor.c ****      */
 638:tmk_core/protocol/usb_descriptor.c ****     .Audio_Interface_Association = {
 639:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 640:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_Association_t),
 641:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_InterfaceAssociation
 642:tmk_core/protocol/usb_descriptor.c ****         },
 643:tmk_core/protocol/usb_descriptor.c ****         .FirstInterfaceIndex    = AC_INTERFACE,
 644:tmk_core/protocol/usb_descriptor.c ****         .TotalInterfaces        = 2,
 645:tmk_core/protocol/usb_descriptor.c ****         .Class                  = AUDIO_CSCP_AudioClass,
 646:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = AUDIO_CSCP_ControlSubclass,
 647:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = AUDIO_CSCP_ControlProtocol,
 648:tmk_core/protocol/usb_descriptor.c ****         .IADStrIndex            = NO_DESCRIPTOR,
 649:tmk_core/protocol/usb_descriptor.c ****     },
 650:tmk_core/protocol/usb_descriptor.c ****     .Audio_ControlInterface = {
 651:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 652:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 653:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 654:tmk_core/protocol/usb_descriptor.c ****         },
 655:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = AC_INTERFACE,
 656:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 657:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 0,
 658:tmk_core/protocol/usb_descriptor.c ****         .Class                  = AUDIO_CSCP_AudioClass,
 659:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = AUDIO_CSCP_ControlSubclass,
 660:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = AUDIO_CSCP_ControlProtocol,
 661:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 662:tmk_core/protocol/usb_descriptor.c ****     },
 663:tmk_core/protocol/usb_descriptor.c ****     .Audio_ControlInterface_SPC = {
 664:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 665:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 666:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 667:tmk_core/protocol/usb_descriptor.c ****         },
 668:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_Header,
 669:tmk_core/protocol/usb_descriptor.c ****         .ACSpecification        = VERSION_BCD(1, 0, 0),
 670:tmk_core/protocol/usb_descriptor.c ****         .TotalLength            = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 671:tmk_core/protocol/usb_descriptor.c ****         .InCollection           = 1,
 672:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = AS_INTERFACE,
 673:tmk_core/protocol/usb_descriptor.c ****     },
 674:tmk_core/protocol/usb_descriptor.c ****     .Audio_StreamInterface = {
 675:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 676:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 677:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 678:tmk_core/protocol/usb_descriptor.c ****         },
 679:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = AS_INTERFACE,
 680:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 681:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 682:tmk_core/protocol/usb_descriptor.c ****         .Class                  = AUDIO_CSCP_AudioClass,
 683:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = AUDIO_CSCP_MIDIStreamingSubclass,
 684:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = AUDIO_CSCP_StreamingProtocol,
 685:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 686:tmk_core/protocol/usb_descriptor.c ****     },
 687:tmk_core/protocol/usb_descriptor.c ****     .Audio_StreamInterface_SPC = {
 688:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 689:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_AudioInterface_AS_t),
 690:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 691:tmk_core/protocol/usb_descriptor.c ****         },
 692:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_General,
 693:tmk_core/protocol/usb_descriptor.c ****         .AudioSpecification     = VERSION_BCD(1, 0, 0),
 694:tmk_core/protocol/usb_descriptor.c ****         .TotalLength            = offsetof(USB_Descriptor_Configuration_t, MIDI_Out_Jack_Endpoint_S
 695:tmk_core/protocol/usb_descriptor.c ****     },
 696:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Emb = {
 697:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 698:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_InputJack_t),
 699:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 700:tmk_core/protocol/usb_descriptor.c ****         },
 701:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 702:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_Embedded,
 703:tmk_core/protocol/usb_descriptor.c ****         .JackID = 0x01,
 704:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 705:tmk_core/protocol/usb_descriptor.c ****     },
 706:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Ext = {
 707:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 708:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_InputJack_t),
 709:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 710:tmk_core/protocol/usb_descriptor.c ****         },
 711:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 712:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_External,
 713:tmk_core/protocol/usb_descriptor.c ****         .JackID                 = 0x02,
 714:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 715:tmk_core/protocol/usb_descriptor.c ****     },
 716:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Emb = {
 717:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 718:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_OutputJack_t),
 719:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 720:tmk_core/protocol/usb_descriptor.c ****         },
 721:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 722:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_Embedded,
 723:tmk_core/protocol/usb_descriptor.c ****         .JackID                 = 0x03,
 724:tmk_core/protocol/usb_descriptor.c ****         .NumberOfPins           = 1,
 725:tmk_core/protocol/usb_descriptor.c ****         .SourceJackID           = {0x02},
 726:tmk_core/protocol/usb_descriptor.c ****         .SourcePinID            = {0x01},
 727:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 728:tmk_core/protocol/usb_descriptor.c ****     },
 729:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Ext = {
 730:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 731:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_OutputJack_t),
 732:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 733:tmk_core/protocol/usb_descriptor.c ****         },
 734:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 735:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_External,
 736:tmk_core/protocol/usb_descriptor.c ****         .JackID                 = 0x04,
 737:tmk_core/protocol/usb_descriptor.c ****         .NumberOfPins           = 1,
 738:tmk_core/protocol/usb_descriptor.c ****         .SourceJackID           = {0x01},
 739:tmk_core/protocol/usb_descriptor.c ****         .SourcePinID            = {0x01},
 740:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 741:tmk_core/protocol/usb_descriptor.c ****     },
 742:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Endpoint = {
 743:tmk_core/protocol/usb_descriptor.c ****         .Endpoint = {
 744:tmk_core/protocol/usb_descriptor.c ****             .Header = {
 745:tmk_core/protocol/usb_descriptor.c ****                 .Size           = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_t),
 746:tmk_core/protocol/usb_descriptor.c ****                 .Type           = DTYPE_Endpoint
 747:tmk_core/protocol/usb_descriptor.c ****             },
 748:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress    = (ENDPOINT_DIR_OUT | MIDI_STREAM_OUT_EPNUM),
 749:tmk_core/protocol/usb_descriptor.c ****             .Attributes         = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 750:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize       = MIDI_STREAM_EPSIZE,
 751:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS  = 0x05
 752:tmk_core/protocol/usb_descriptor.c ****         },
 753:tmk_core/protocol/usb_descriptor.c ****         .Refresh                = 0,
 754:tmk_core/protocol/usb_descriptor.c ****         .SyncEndpointNumber     = 0
 755:tmk_core/protocol/usb_descriptor.c ****     },
 756:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Endpoint_SPC = {
 757:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 758:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t),
 759:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSEndpoint
 760:tmk_core/protocol/usb_descriptor.c ****         },
 761:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSEndpoint_General,
 762:tmk_core/protocol/usb_descriptor.c ****         .TotalEmbeddedJacks     = 0x01,
 763:tmk_core/protocol/usb_descriptor.c ****         .AssociatedJackID       = {0x01}
 764:tmk_core/protocol/usb_descriptor.c ****     },
 765:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Endpoint = {
 766:tmk_core/protocol/usb_descriptor.c ****         .Endpoint = {
 767:tmk_core/protocol/usb_descriptor.c ****             .Header = {
 768:tmk_core/protocol/usb_descriptor.c ****                 .Size           = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_t),
 769:tmk_core/protocol/usb_descriptor.c ****                 .Type           = DTYPE_Endpoint
 770:tmk_core/protocol/usb_descriptor.c ****             },
 771:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress    = (ENDPOINT_DIR_IN | MIDI_STREAM_IN_EPNUM),
 772:tmk_core/protocol/usb_descriptor.c ****             .Attributes         = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 773:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize       = MIDI_STREAM_EPSIZE,
 774:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS  = 0x05
 775:tmk_core/protocol/usb_descriptor.c ****         },
 776:tmk_core/protocol/usb_descriptor.c ****         .Refresh                = 0,
 777:tmk_core/protocol/usb_descriptor.c ****         .SyncEndpointNumber     = 0
 778:tmk_core/protocol/usb_descriptor.c ****     },
 779:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Endpoint_SPC = {
 780:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 781:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t),
 782:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSEndpoint
 783:tmk_core/protocol/usb_descriptor.c ****         },
 784:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSEndpoint_General,
 785:tmk_core/protocol/usb_descriptor.c ****         .TotalEmbeddedJacks     = 0x01,
 786:tmk_core/protocol/usb_descriptor.c ****         .AssociatedJackID       = {0x03}
 787:tmk_core/protocol/usb_descriptor.c ****     },
 788:tmk_core/protocol/usb_descriptor.c **** #endif
 789:tmk_core/protocol/usb_descriptor.c **** 
 790:tmk_core/protocol/usb_descriptor.c **** #ifdef VIRTSER_ENABLE
 791:tmk_core/protocol/usb_descriptor.c ****     /*
 792:tmk_core/protocol/usb_descriptor.c ****      * Virtual Serial
 793:tmk_core/protocol/usb_descriptor.c ****      */
 794:tmk_core/protocol/usb_descriptor.c ****     .CDC_Interface_Association = {
 795:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 796:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_Association_t),
 797:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_InterfaceAssociation
 798:tmk_core/protocol/usb_descriptor.c ****         },
 799:tmk_core/protocol/usb_descriptor.c ****         .FirstInterfaceIndex    = CCI_INTERFACE,
 800:tmk_core/protocol/usb_descriptor.c ****         .TotalInterfaces        = 2,
 801:tmk_core/protocol/usb_descriptor.c ****         .Class                  = CDC_CSCP_CDCClass,
 802:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = CDC_CSCP_ACMSubclass,
 803:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = CDC_CSCP_ATCommandProtocol,
 804:tmk_core/protocol/usb_descriptor.c ****         .IADStrIndex            = NO_DESCRIPTOR,
 805:tmk_core/protocol/usb_descriptor.c ****     },
 806:tmk_core/protocol/usb_descriptor.c ****     .CDC_CCI_Interface = {
 807:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 808:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 809:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 810:tmk_core/protocol/usb_descriptor.c ****         },
 811:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = CCI_INTERFACE,
 812:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 813:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 814:tmk_core/protocol/usb_descriptor.c ****         .Class                  = CDC_CSCP_CDCClass,
 815:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = CDC_CSCP_ACMSubclass,
 816:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = CDC_CSCP_ATCommandProtocol,
 817:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 818:tmk_core/protocol/usb_descriptor.c ****     },
 819:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_Header = {
 820:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 821:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_CDC_Descriptor_FunctionalHeader_t),
 822:tmk_core/protocol/usb_descriptor.c ****             .Type               = CDC_DTYPE_CSInterface
 823:tmk_core/protocol/usb_descriptor.c ****         },
 824:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = 0x00,
 825:tmk_core/protocol/usb_descriptor.c ****         .CDCSpecification       = VERSION_BCD(1, 1, 0),
 826:tmk_core/protocol/usb_descriptor.c ****     },
 827:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_ACM = {
 828:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 829:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_CDC_Descriptor_FunctionalACM_t),
 830:tmk_core/protocol/usb_descriptor.c ****             .Type               = CDC_DTYPE_CSInterface
 831:tmk_core/protocol/usb_descriptor.c ****         },
 832:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = 0x02,
 833:tmk_core/protocol/usb_descriptor.c ****         .Capabilities           = 0x02,
 834:tmk_core/protocol/usb_descriptor.c ****     },
 835:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_Union = {
 836:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 837:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_CDC_Descriptor_FunctionalUnion_t),
 838:tmk_core/protocol/usb_descriptor.c ****             .Type               = CDC_DTYPE_CSInterface
 839:tmk_core/protocol/usb_descriptor.c ****         },
 840:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = 0x06,
 841:tmk_core/protocol/usb_descriptor.c ****         .MasterInterfaceNumber  = CCI_INTERFACE,
 842:tmk_core/protocol/usb_descriptor.c ****         .SlaveInterfaceNumber   = CDI_INTERFACE,
 843:tmk_core/protocol/usb_descriptor.c ****     },
 844:tmk_core/protocol/usb_descriptor.c ****     .CDC_NotificationEndpoint = {
 845:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 846:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 847:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 848:tmk_core/protocol/usb_descriptor.c ****         },
 849:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM),
 850:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 851:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 852:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0xFF
 853:tmk_core/protocol/usb_descriptor.c ****     },
 854:tmk_core/protocol/usb_descriptor.c ****     .CDC_DCI_Interface = {
 855:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 856:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 857:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 858:tmk_core/protocol/usb_descriptor.c ****         },
 859:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = CDI_INTERFACE,
 860:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 861:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 862:tmk_core/protocol/usb_descriptor.c ****         .Class                  = CDC_CSCP_CDCDataClass,
 863:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = CDC_CSCP_NoDataSubclass,
 864:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = CDC_CSCP_NoDataProtocol,
 865:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 866:tmk_core/protocol/usb_descriptor.c ****     },
 867:tmk_core/protocol/usb_descriptor.c ****     .CDC_DataOutEndpoint = {
 868:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 869:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 870:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 871:tmk_core/protocol/usb_descriptor.c ****         },
 872:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_OUT | CDC_OUT_EPNUM),
 873:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 874:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CDC_EPSIZE,
 875:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x05
 876:tmk_core/protocol/usb_descriptor.c ****     },
 877:tmk_core/protocol/usb_descriptor.c ****     .CDC_DataInEndpoint = {
 878:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 879:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 880:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 881:tmk_core/protocol/usb_descriptor.c ****         },
 882:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | CDC_IN_EPNUM),
 883:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 884:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CDC_EPSIZE,
 885:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x05
 886:tmk_core/protocol/usb_descriptor.c ****     },
 887:tmk_core/protocol/usb_descriptor.c **** #endif
 888:tmk_core/protocol/usb_descriptor.c **** 
 889:tmk_core/protocol/usb_descriptor.c ****     /*
 890:tmk_core/protocol/usb_descriptor.c ****      * Joystick
 891:tmk_core/protocol/usb_descriptor.c ****      */
 892:tmk_core/protocol/usb_descriptor.c **** #ifdef JOYSTICK_ENABLE
 893:tmk_core/protocol/usb_descriptor.c ****     .Joystick_Interface = {
 894:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 895:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 896:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 897:tmk_core/protocol/usb_descriptor.c ****         },
 898:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = JOYSTICK_INTERFACE,
 899:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 900:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 901:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 902:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 903:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 904:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 905:tmk_core/protocol/usb_descriptor.c ****     },
 906:tmk_core/protocol/usb_descriptor.c ****     .Joystick_HID = {
 907:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 908:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 909:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 910:tmk_core/protocol/usb_descriptor.c ****         },
 911:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 912:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 913:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 914:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 915:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(JoystickReport)
 916:tmk_core/protocol/usb_descriptor.c ****     },
 917:tmk_core/protocol/usb_descriptor.c ****     .Joystick_INEndpoint = {
 918:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 919:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 920:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 921:tmk_core/protocol/usb_descriptor.c ****         },
 922:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | JOYSTICK_IN_EPNUM),
 923:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 924:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = JOYSTICK_EPSIZE,
 925:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 926:tmk_core/protocol/usb_descriptor.c ****     }
 927:tmk_core/protocol/usb_descriptor.c **** #endif
 928:tmk_core/protocol/usb_descriptor.c **** };
 929:tmk_core/protocol/usb_descriptor.c **** 
 930:tmk_core/protocol/usb_descriptor.c **** /*
 931:tmk_core/protocol/usb_descriptor.c ****  * String descriptors
 932:tmk_core/protocol/usb_descriptor.c ****  */
 933:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM LanguageString = {
 934:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 935:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(1),
 936:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 937:tmk_core/protocol/usb_descriptor.c ****     },
 938:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = {LANGUAGE_ID_ENG}
 939:tmk_core/protocol/usb_descriptor.c **** };
 940:tmk_core/protocol/usb_descriptor.c **** 
 941:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString = {
 942:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 943:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(sizeof(STR(MANUFACTURER)) - 1), // Subtract 1 for 
 944:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 945:tmk_core/protocol/usb_descriptor.c ****     },
 946:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = LSTR(MANUFACTURER)
 947:tmk_core/protocol/usb_descriptor.c **** };
 948:tmk_core/protocol/usb_descriptor.c **** 
 949:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ProductString = {
 950:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 951:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(sizeof(STR(PRODUCT)) - 1), // Subtract 1 for null 
 952:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 953:tmk_core/protocol/usb_descriptor.c ****     },
 954:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = LSTR(PRODUCT)
 955:tmk_core/protocol/usb_descriptor.c **** };
 956:tmk_core/protocol/usb_descriptor.c **** 
 957:tmk_core/protocol/usb_descriptor.c **** #if defined(SERIAL_NUMBER)
 958:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM SerialNumberString = {
 959:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 960:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(sizeof(STR(SERIAL_NUMBER)) - 1), // Subtract 1 for
 961:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 962:tmk_core/protocol/usb_descriptor.c ****     },
 963:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = LSTR(SERIAL_NUMBER)
 964:tmk_core/protocol/usb_descriptor.c **** };
 965:tmk_core/protocol/usb_descriptor.c **** #endif
 966:tmk_core/protocol/usb_descriptor.c **** 
 967:tmk_core/protocol/usb_descriptor.c **** // clang-format on
 968:tmk_core/protocol/usb_descriptor.c **** 
 969:tmk_core/protocol/usb_descriptor.c **** /**
 970:tmk_core/protocol/usb_descriptor.c ****  * This function is called by the library when in device mode, and must be overridden (see library 
 971:tmk_core/protocol/usb_descriptor.c ****  * documentation) by the application code so that the address and size of a requested descriptor ca
 972:tmk_core/protocol/usb_descriptor.c ****  * to the USB library. When the device receives a Get Descriptor request on the control endpoint, t
 973:tmk_core/protocol/usb_descriptor.c ****  * is called so that the descriptor details can be passed back and the appropriate descriptor sent 
 974:tmk_core/protocol/usb_descriptor.c ****  * USB host.
 975:tmk_core/protocol/usb_descriptor.c ****  */
 976:tmk_core/protocol/usb_descriptor.c **** uint16_t get_usb_descriptor(const uint16_t wValue, const uint16_t wIndex, const void** const Descri
  17               		.loc 1 976 113 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 977:tmk_core/protocol/usb_descriptor.c ****     const uint8_t DescriptorType  = (wValue >> 8);
  23               		.loc 1 977 5 view .LVU1
  24               		.loc 1 977 45 is_stmt 0 view .LVU2
  25 0000 292F      		mov r18,r25
  26 0002 3327      		clr r19
  27               	.LVL1:
 978:tmk_core/protocol/usb_descriptor.c ****     const uint8_t DescriptorIndex = (wValue & 0xFF);
  28               		.loc 1 978 5 is_stmt 1 view .LVU3
 979:tmk_core/protocol/usb_descriptor.c ****     const void*   Address         = NULL;
  29               		.loc 1 979 5 view .LVU4
 980:tmk_core/protocol/usb_descriptor.c ****     uint16_t      Size            = NO_DESCRIPTOR;
  30               		.loc 1 980 5 view .LVU5
 981:tmk_core/protocol/usb_descriptor.c **** 
 982:tmk_core/protocol/usb_descriptor.c ****     switch (DescriptorType) {
  31               		.loc 1 982 5 view .LVU6
  32 0004 2330      		cpi r18,3
  33 0006 3105      		cpc r19,__zero_reg__
  34 0008 01F0      		breq .L2
  35 000a 00F4      		brsh .L3
  36 000c 2130      		cpi r18,1
  37 000e 3105      		cpc r19,__zero_reg__
  38 0010 01F0      		breq .L10
  39 0012 2230      		cpi r18,2
  40 0014 3105      		cpc r19,__zero_reg__
  41 0016 01F0      		breq .L11
  42               	.LVL2:
  43               	.L13:
 980:tmk_core/protocol/usb_descriptor.c ****     uint16_t      Size            = NO_DESCRIPTOR;
  44               		.loc 1 980 19 is_stmt 0 view .LVU7
  45 0018 90E0      		ldi r25,0
  46 001a 80E0      		ldi r24,0
 979:tmk_core/protocol/usb_descriptor.c ****     uint16_t      Size            = NO_DESCRIPTOR;
  47               		.loc 1 979 19 view .LVU8
  48 001c 30E0      		ldi r19,0
  49 001e 20E0      		ldi r18,0
  50 0020 00C0      		rjmp .L4
  51               	.LVL3:
  52               	.L3:
  53               		.loc 1 982 5 view .LVU9
  54 0022 2132      		cpi r18,33
  55 0024 3105      		cpc r19,__zero_reg__
  56 0026 01F0      		breq .L5
  57 0028 2232      		cpi r18,34
  58 002a 3105      		cpc r19,__zero_reg__
  59 002c 01F4      		brne .L13
 983:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
 984:tmk_core/protocol/usb_descriptor.c ****             Address = &DeviceDescriptor;
 985:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 986:tmk_core/protocol/usb_descriptor.c **** 
 987:tmk_core/protocol/usb_descriptor.c ****             break;
 988:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Configuration:
 989:tmk_core/protocol/usb_descriptor.c ****             Address = &ConfigurationDescriptor;
 990:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
 991:tmk_core/protocol/usb_descriptor.c **** 
 992:tmk_core/protocol/usb_descriptor.c ****             break;
 993:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_String:
 994:tmk_core/protocol/usb_descriptor.c ****             switch (DescriptorIndex) {
 995:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
 996:tmk_core/protocol/usb_descriptor.c ****                     Address = &LanguageString;
 997:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
 998:tmk_core/protocol/usb_descriptor.c **** 
 999:tmk_core/protocol/usb_descriptor.c ****                     break;
1000:tmk_core/protocol/usb_descriptor.c ****                 case 0x01:
1001:tmk_core/protocol/usb_descriptor.c ****                     Address = &ManufacturerString;
1002:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
1003:tmk_core/protocol/usb_descriptor.c **** 
1004:tmk_core/protocol/usb_descriptor.c ****                     break;
1005:tmk_core/protocol/usb_descriptor.c ****                 case 0x02:
1006:tmk_core/protocol/usb_descriptor.c ****                     Address = &ProductString;
1007:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
1008:tmk_core/protocol/usb_descriptor.c **** 
1009:tmk_core/protocol/usb_descriptor.c ****                     break;
1010:tmk_core/protocol/usb_descriptor.c **** #if defined(SERIAL_NUMBER)
1011:tmk_core/protocol/usb_descriptor.c ****                 case 0x03:
1012:tmk_core/protocol/usb_descriptor.c ****                     Address = &SerialNumberString;
1013:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
1014:tmk_core/protocol/usb_descriptor.c **** 
1015:tmk_core/protocol/usb_descriptor.c ****                     break;
1016:tmk_core/protocol/usb_descriptor.c **** #endif
1017:tmk_core/protocol/usb_descriptor.c ****             }
1018:tmk_core/protocol/usb_descriptor.c **** 
1019:tmk_core/protocol/usb_descriptor.c ****             break;
1020:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_HID:
1021:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
1022:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
1023:tmk_core/protocol/usb_descriptor.c ****                 case KEYBOARD_INTERFACE:
1024:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Keyboard_HID;
1025:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1026:tmk_core/protocol/usb_descriptor.c ****                     break;
1027:tmk_core/protocol/usb_descriptor.c **** #endif
1028:tmk_core/protocol/usb_descriptor.c **** 
1029:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
1030:tmk_core/protocol/usb_descriptor.c ****                 case MOUSE_INTERFACE:
1031:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Mouse_HID;
1032:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1033:tmk_core/protocol/usb_descriptor.c **** 
1034:tmk_core/protocol/usb_descriptor.c ****                     break;
1035:tmk_core/protocol/usb_descriptor.c **** #endif
1036:tmk_core/protocol/usb_descriptor.c **** 
1037:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
1038:tmk_core/protocol/usb_descriptor.c ****                 case SHARED_INTERFACE:
1039:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Shared_HID;
1040:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1041:tmk_core/protocol/usb_descriptor.c **** 
1042:tmk_core/protocol/usb_descriptor.c ****                     break;
1043:tmk_core/protocol/usb_descriptor.c **** #endif
1044:tmk_core/protocol/usb_descriptor.c **** 
1045:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
1046:tmk_core/protocol/usb_descriptor.c ****                 case RAW_INTERFACE:
1047:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Raw_HID;
1048:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1049:tmk_core/protocol/usb_descriptor.c **** 
1050:tmk_core/protocol/usb_descriptor.c ****                     break;
1051:tmk_core/protocol/usb_descriptor.c **** #endif
1052:tmk_core/protocol/usb_descriptor.c **** 
1053:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
1054:tmk_core/protocol/usb_descriptor.c ****                 case CONSOLE_INTERFACE:
1055:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Console_HID;
1056:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1057:tmk_core/protocol/usb_descriptor.c **** 
1058:tmk_core/protocol/usb_descriptor.c ****                     break;
1059:tmk_core/protocol/usb_descriptor.c **** #endif
1060:tmk_core/protocol/usb_descriptor.c **** #ifdef JOYSTICK_ENABLE
1061:tmk_core/protocol/usb_descriptor.c ****                 case JOYSTICK_INTERFACE:
1062:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Joystick_HID;
1063:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1064:tmk_core/protocol/usb_descriptor.c ****                     break;
1065:tmk_core/protocol/usb_descriptor.c **** #endif
1066:tmk_core/protocol/usb_descriptor.c ****             }
1067:tmk_core/protocol/usb_descriptor.c **** 
1068:tmk_core/protocol/usb_descriptor.c ****             break;
1069:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_Report:
1070:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
  60               		.loc 1 1070 13 is_stmt 1 view .LVU10
1071:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
1072:tmk_core/protocol/usb_descriptor.c ****                 case KEYBOARD_INTERFACE:
1073:tmk_core/protocol/usb_descriptor.c ****                     Address = &KeyboardReport;
1074:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(KeyboardReport);
  61               		.loc 1 1074 29 is_stmt 0 view .LVU11
  62 002e 80E4      		ldi r24,lo8(64)
  63 0030 90E0      		ldi r25,0
  64               	.LVL4:
1073:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(KeyboardReport);
  65               		.loc 1 1073 29 view .LVU12
  66 0032 20E0      		ldi r18,lo8(KeyboardReport)
  67 0034 30E0      		ldi r19,hi8(KeyboardReport)
  68               	.LVL5:
1073:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(KeyboardReport);
  69               		.loc 1 1073 29 view .LVU13
  70 0036 672B      		or r22,r23
  71 0038 01F4      		brne .L13
  72 003a 00C0      		rjmp .L4
  73               	.LVL6:
  74               	.L2:
 994:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
  75               		.loc 1 994 13 is_stmt 1 view .LVU14
  76 003c 9927      		clr r25
  77               	.LVL7:
 994:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
  78               		.loc 1 994 13 is_stmt 0 view .LVU15
  79 003e 8130      		cpi r24,1
  80 0040 9105      		cpc r25,__zero_reg__
  81 0042 01F0      		breq .L7
  82 0044 0097      		sbiw r24,0
  83 0046 01F0      		breq .L8
  84 0048 0297      		sbiw r24,2
  85 004a 01F4      		brne .L13
1006:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
  86               		.loc 1 1006 21 is_stmt 1 view .LVU16
  87               	.LVL8:
1007:tmk_core/protocol/usb_descriptor.c **** 
  88               		.loc 1 1007 21 view .LVU17
  89               	.LBB2:
1007:tmk_core/protocol/usb_descriptor.c **** 
  90               		.loc 1 1007 31 view .LVU18
1007:tmk_core/protocol/usb_descriptor.c **** 
  91               		.loc 1 1007 31 view .LVU19
1007:tmk_core/protocol/usb_descriptor.c **** 
  92               		.loc 1 1007 31 view .LVU20
  93 004c E0E0      		ldi r30,lo8(ProductString)
  94 004e F0E0      		ldi r31,hi8(ProductString)
  95 0050 00C0      		rjmp .L14
  96               	.LVL9:
  97               	.L8:
1007:tmk_core/protocol/usb_descriptor.c **** 
  98               		.loc 1 1007 31 is_stmt 0 view .LVU21
  99               	.LBE2:
 996:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
 100               		.loc 1 996 21 is_stmt 1 view .LVU22
 997:tmk_core/protocol/usb_descriptor.c **** 
 101               		.loc 1 997 21 view .LVU23
 102               	.LBB3:
 997:tmk_core/protocol/usb_descriptor.c **** 
 103               		.loc 1 997 31 view .LVU24
 997:tmk_core/protocol/usb_descriptor.c **** 
 104               		.loc 1 997 31 view .LVU25
 997:tmk_core/protocol/usb_descriptor.c **** 
 105               		.loc 1 997 31 view .LVU26
 106 0052 E0E0      		ldi r30,lo8(LanguageString)
 107 0054 F0E0      		ldi r31,hi8(LanguageString)
 108               	.LVL10:
 109               	.L14:
 997:tmk_core/protocol/usb_descriptor.c **** 
 110               		.loc 1 997 31 is_stmt 0 view .LVU27
 111               	.LBE3:
 112               	.LBB4:
1007:tmk_core/protocol/usb_descriptor.c **** 
 113               		.loc 1 1007 31 view .LVU28
 114               	/* #APP */
 115               	 ;  1007 "tmk_core/protocol/usb_descriptor.c" 1
 116 0056 8491      		lpm r24, Z
 117               		
 118               	 ;  0 "" 2
 119               	.LVL11:
1007:tmk_core/protocol/usb_descriptor.c **** 
 120               		.loc 1 1007 31 is_stmt 1 view .LVU29
 121               	/* #NOAPP */
 122               	.LBE4:
1007:tmk_core/protocol/usb_descriptor.c **** 
 123               		.loc 1 1007 29 is_stmt 0 view .LVU30
 124 0058 90E0      		ldi r25,0
 125               	.LVL12:
1009:tmk_core/protocol/usb_descriptor.c **** #if defined(SERIAL_NUMBER)
 126               		.loc 1 1009 21 is_stmt 1 view .LVU31
1006:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 127               		.loc 1 1006 29 is_stmt 0 view .LVU32
 128 005a 9F01      		movw r18,r30
 129               	.LVL13:
 130               	.L4:
1075:tmk_core/protocol/usb_descriptor.c **** 
1076:tmk_core/protocol/usb_descriptor.c ****                     break;
1077:tmk_core/protocol/usb_descriptor.c **** #endif
1078:tmk_core/protocol/usb_descriptor.c **** 
1079:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
1080:tmk_core/protocol/usb_descriptor.c ****                 case MOUSE_INTERFACE:
1081:tmk_core/protocol/usb_descriptor.c ****                     Address = &MouseReport;
1082:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(MouseReport);
1083:tmk_core/protocol/usb_descriptor.c **** 
1084:tmk_core/protocol/usb_descriptor.c ****                     break;
1085:tmk_core/protocol/usb_descriptor.c **** #endif
1086:tmk_core/protocol/usb_descriptor.c **** 
1087:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
1088:tmk_core/protocol/usb_descriptor.c ****                 case SHARED_INTERFACE:
1089:tmk_core/protocol/usb_descriptor.c ****                     Address = &SharedReport;
1090:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(SharedReport);
1091:tmk_core/protocol/usb_descriptor.c **** 
1092:tmk_core/protocol/usb_descriptor.c ****                     break;
1093:tmk_core/protocol/usb_descriptor.c **** #endif
1094:tmk_core/protocol/usb_descriptor.c **** 
1095:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
1096:tmk_core/protocol/usb_descriptor.c ****                 case RAW_INTERFACE:
1097:tmk_core/protocol/usb_descriptor.c ****                     Address = &RawReport;
1098:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(RawReport);
1099:tmk_core/protocol/usb_descriptor.c **** 
1100:tmk_core/protocol/usb_descriptor.c ****                     break;
1101:tmk_core/protocol/usb_descriptor.c **** #endif
1102:tmk_core/protocol/usb_descriptor.c **** 
1103:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
1104:tmk_core/protocol/usb_descriptor.c ****                 case CONSOLE_INTERFACE:
1105:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConsoleReport;
1106:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(ConsoleReport);
1107:tmk_core/protocol/usb_descriptor.c **** 
1108:tmk_core/protocol/usb_descriptor.c ****                     break;
1109:tmk_core/protocol/usb_descriptor.c **** #endif
1110:tmk_core/protocol/usb_descriptor.c **** #ifdef JOYSTICK_ENABLE
1111:tmk_core/protocol/usb_descriptor.c ****                 case JOYSTICK_INTERFACE:
1112:tmk_core/protocol/usb_descriptor.c ****                     Address = &JoystickReport;
1113:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(JoystickReport);
1114:tmk_core/protocol/usb_descriptor.c ****                     break;
1115:tmk_core/protocol/usb_descriptor.c **** #endif
1116:tmk_core/protocol/usb_descriptor.c ****             }
1117:tmk_core/protocol/usb_descriptor.c **** 
1118:tmk_core/protocol/usb_descriptor.c ****             break;
1119:tmk_core/protocol/usb_descriptor.c ****     }
1120:tmk_core/protocol/usb_descriptor.c **** 
1121:tmk_core/protocol/usb_descriptor.c ****     *DescriptorAddress = Address;
 131               		.loc 1 1121 5 is_stmt 1 view .LVU33
 132               		.loc 1 1121 24 is_stmt 0 view .LVU34
 133 005c FA01      		movw r30,r20
 134 005e 3183      		std Z+1,r19
 135 0060 2083      		st Z,r18
1122:tmk_core/protocol/usb_descriptor.c **** 
1123:tmk_core/protocol/usb_descriptor.c ****     return Size;
 136               		.loc 1 1123 5 is_stmt 1 view .LVU35
 137               	/* epilogue start */
1124:tmk_core/protocol/usb_descriptor.c **** }
 138               		.loc 1 1124 1 is_stmt 0 view .LVU36
 139 0062 0895      		ret
 140               	.LVL14:
 141               	.L7:
1001:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 142               		.loc 1 1001 21 is_stmt 1 view .LVU37
1002:tmk_core/protocol/usb_descriptor.c **** 
 143               		.loc 1 1002 21 view .LVU38
 144               	.LBB5:
1002:tmk_core/protocol/usb_descriptor.c **** 
 145               		.loc 1 1002 31 view .LVU39
1002:tmk_core/protocol/usb_descriptor.c **** 
 146               		.loc 1 1002 31 view .LVU40
1002:tmk_core/protocol/usb_descriptor.c **** 
 147               		.loc 1 1002 31 view .LVU41
 148 0064 E0E0      		ldi r30,lo8(ManufacturerString)
 149 0066 F0E0      		ldi r31,hi8(ManufacturerString)
 150 0068 00C0      		rjmp .L14
 151               	.LVL15:
 152               	.L5:
1002:tmk_core/protocol/usb_descriptor.c **** 
 153               		.loc 1 1002 31 is_stmt 0 view .LVU42
 154               	.LBE5:
1021:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 155               		.loc 1 1021 13 is_stmt 1 view .LVU43
1025:tmk_core/protocol/usb_descriptor.c ****                     break;
 156               		.loc 1 1025 29 is_stmt 0 view .LVU44
 157 006a 89E0      		ldi r24,lo8(9)
 158 006c 90E0      		ldi r25,0
 159               	.LVL16:
1024:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 160               		.loc 1 1024 29 view .LVU45
 161 006e 20E0      		ldi r18,lo8(ConfigurationDescriptor+18)
 162 0070 30E0      		ldi r19,hi8(ConfigurationDescriptor+18)
 163               	.LVL17:
1024:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 164               		.loc 1 1024 29 view .LVU46
 165 0072 672B      		or r22,r23
 166 0074 01F4      		brne .L13
 167 0076 00C0      		rjmp .L4
 168               	.LVL18:
 169               	.L10:
 985:tmk_core/protocol/usb_descriptor.c **** 
 170               		.loc 1 985 21 view .LVU47
 171 0078 82E1      		ldi r24,lo8(18)
 172 007a 90E0      		ldi r25,0
 173               	.LVL19:
 984:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 174               		.loc 1 984 21 view .LVU48
 175 007c 20E0      		ldi r18,lo8(DeviceDescriptor)
 176 007e 30E0      		ldi r19,hi8(DeviceDescriptor)
 177               	.LVL20:
 984:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 178               		.loc 1 984 21 view .LVU49
 179 0080 00C0      		rjmp .L4
 180               	.LVL21:
 181               	.L11:
 990:tmk_core/protocol/usb_descriptor.c **** 
 182               		.loc 1 990 21 view .LVU50
 183 0082 82E2      		ldi r24,lo8(34)
 184 0084 90E0      		ldi r25,0
 185               	.LVL22:
 989:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
 186               		.loc 1 989 21 view .LVU51
 187 0086 20E0      		ldi r18,lo8(ConfigurationDescriptor)
 188 0088 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 189               	.LVL23:
 989:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
 190               		.loc 1 989 21 view .LVU52
 191 008a 00C0      		rjmp .L4
 192               		.cfi_endproc
 193               	.LFE102:
 195               	.global	ProductString
 196               		.section	.progmem.data.ProductString,"a"
 199               	ProductString:
 200 0000 48        		.byte	72
 201 0001 03        		.byte	3
 202 0002 4300      		.string	"C"
 203 0004 6F00      		.string	"o"
 204 0006 7200      		.string	"r"
 205 0008 6E00      		.string	"n"
 206 000a 6500      		.string	"e"
 207 000c 2000      		.string	" "
 208 000e 4B00      		.string	"K"
 209 0010 6500      		.string	"e"
 210 0012 7900      		.string	"y"
 211 0014 6200      		.string	"b"
 212 0016 6F00      		.string	"o"
 213 0018 6100      		.string	"a"
 214 001a 7200      		.string	"r"
 215 001c 6400      		.string	"d"
 216 001e 2000      		.string	" "
 217 0020 5200      		.string	"R"
 218 0022 6500      		.string	"e"
 219 0024 7600      		.string	"v"
 220 0026 2E00      		.string	"."
 221 0028 3100      		.string	"1"
 222 002a 2000      		.string	" "
 223 002c 2800      		.string	"("
 224 002e 4C00      		.string	"L"
 225 0030 6500      		.string	"e"
 226 0032 6700      		.string	"g"
 227 0034 6100      		.string	"a"
 228 0036 6300      		.string	"c"
 229 0038 7900      		.string	"y"
 230 003a 2000      		.string	" "
 231 003c 5300      		.string	"S"
 232 003e 7000      		.string	"p"
 233 0040 6C00      		.string	"l"
 234 0042 6900      		.string	"i"
 235 0044 7400      		.string	"t"
 236 0046 2900      		.string	")"
 237 0048 00        		.string	""
 238 0049 00        		.string	""
 239               	.global	ManufacturerString
 240               		.section	.progmem.data.ManufacturerString,"a"
 243               	ManufacturerString:
 244 0000 10        		.byte	16
 245 0001 03        		.byte	3
 246 0002 6600      		.string	"f"
 247 0004 6F00      		.string	"o"
 248 0006 6F00      		.string	"o"
 249 0008 7300      		.string	"s"
 250 000a 7400      		.string	"t"
 251 000c 6100      		.string	"a"
 252 000e 6E00      		.string	"n"
 253 0010 00        		.string	""
 254 0011 00        		.string	""
 255               	.global	LanguageString
 256               		.section	.progmem.data.LanguageString,"a"
 259               	LanguageString:
 260 0000 04        		.byte	4
 261 0001 03        		.byte	3
 262 0002 0904      		.word	1033
 263               	.global	ConfigurationDescriptor
 264               		.section	.progmem.data.ConfigurationDescriptor,"a"
 267               	ConfigurationDescriptor:
 268 0000 09        		.byte	9
 269 0001 02        		.byte	2
 270 0002 2200      		.word	34
 271 0004 01        		.byte	1
 272 0005 01        		.byte	1
 273 0006 00        		.byte	0
 274 0007 A0        		.byte	-96
 275 0008 FA        		.byte	-6
 276 0009 09        		.byte	9
 277 000a 04        		.byte	4
 278 000b 00        		.byte	0
 279 000c 00        		.byte	0
 280 000d 01        		.byte	1
 281 000e 03        		.byte	3
 282 000f 01        		.byte	1
 283 0010 01        		.byte	1
 284 0011 00        		.byte	0
 285 0012 09        		.byte	9
 286 0013 21        		.byte	33
 287 0014 1101      		.word	273
 288 0016 00        		.byte	0
 289 0017 01        		.byte	1
 290 0018 22        		.byte	34
 291 0019 4000      		.word	64
 292 001b 07        		.byte	7
 293 001c 05        		.byte	5
 294 001d 81        		.byte	-127
 295 001e 03        		.byte	3
 296 001f 0800      		.word	8
 297 0021 0A        		.byte	10
 298               	.global	DeviceDescriptor
 299               		.section	.progmem.data.DeviceDescriptor,"a"
 302               	DeviceDescriptor:
 303 0000 12        		.byte	18
 304 0001 01        		.byte	1
 305 0002 1001      		.word	272
 306 0004 00        		.byte	0
 307 0005 00        		.byte	0
 308 0006 00        		.byte	0
 309 0007 08        		.byte	8
 310 0008 5346      		.word	18003
 311 000a 0100      		.word	1
 312 000c 0100      		.word	1
 313 000e 01        		.byte	1
 314 000f 02        		.byte	2
 315 0010 00        		.byte	0
 316 0011 01        		.byte	1
 317               	.global	KeyboardReport
 318               		.section	.progmem.data.KeyboardReport,"a"
 321               	KeyboardReport:
 322 0000 05        		.byte	5
 323 0001 01        		.byte	1
 324 0002 09        		.byte	9
 325 0003 06        		.byte	6
 326 0004 A1        		.byte	-95
 327 0005 01        		.byte	1
 328 0006 05        		.byte	5
 329 0007 07        		.byte	7
 330 0008 19        		.byte	25
 331 0009 E0        		.byte	-32
 332 000a 29        		.byte	41
 333 000b E7        		.byte	-25
 334 000c 15        		.byte	21
 335 000d 00        		.byte	0
 336 000e 25        		.byte	37
 337 000f 01        		.byte	1
 338 0010 95        		.byte	-107
 339 0011 08        		.byte	8
 340 0012 75        		.byte	117
 341 0013 01        		.byte	1
 342 0014 81        		.byte	-127
 343 0015 02        		.byte	2
 344 0016 95        		.byte	-107
 345 0017 01        		.byte	1
 346 0018 75        		.byte	117
 347 0019 08        		.byte	8
 348 001a 81        		.byte	-127
 349 001b 01        		.byte	1
 350 001c 05        		.byte	5
 351 001d 07        		.byte	7
 352 001e 19        		.byte	25
 353 001f 00        		.byte	0
 354 0020 29        		.byte	41
 355 0021 FF        		.byte	-1
 356 0022 15        		.byte	21
 357 0023 00        		.byte	0
 358 0024 26        		.byte	38
 359 0025 FF        		.byte	-1
 360 0026 00        		.byte	0
 361 0027 95        		.byte	-107
 362 0028 06        		.byte	6
 363 0029 75        		.byte	117
 364 002a 08        		.byte	8
 365 002b 81        		.byte	-127
 366 002c 00        		.byte	0
 367 002d 05        		.byte	5
 368 002e 08        		.byte	8
 369 002f 19        		.byte	25
 370 0030 01        		.byte	1
 371 0031 29        		.byte	41
 372 0032 05        		.byte	5
 373 0033 95        		.byte	-107
 374 0034 05        		.byte	5
 375 0035 75        		.byte	117
 376 0036 01        		.byte	1
 377 0037 91        		.byte	-111
 378 0038 02        		.byte	2
 379 0039 95        		.byte	-107
 380 003a 01        		.byte	1
 381 003b 75        		.byte	117
 382 003c 03        		.byte	3
 383 003d 91        		.byte	-111
 384 003e 01        		.byte	1
 385 003f C0        		.byte	-64
 386               		.text
 387               	.Letext0:
 388               		.file 2 "/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/stdint.h"
 389               		.file 3 "/usr/local/Cellar/avr-gcc@8/8.4.0_2/lib/avr-gcc/8/gcc/avr/8.4.0/include/stddef.h"
 390               		.file 4 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 391               		.file 5 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 392               		.file 6 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 393               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 394               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 395               		.file 9 "/usr/local/Cellar/avr-gcc@8/8.4.0_2/avr/include/stdio.h"
 396               		.file 10 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 397               		.file 11 "tmk_core/protocol/usb_descriptor.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_descriptor.c
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:4      *ABS*:000000000000003f __SREG__
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:13     .text.get_usb_descriptor:0000000000000000 get_usb_descriptor
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:17     .text.get_usb_descriptor:0000000000000000 .Loc.0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:18     .text.get_usb_descriptor:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:23     .text.get_usb_descriptor:0000000000000000 .Loc.1
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:24     .text.get_usb_descriptor:0000000000000000 .Loc.2
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:28     .text.get_usb_descriptor:0000000000000004 .Loc.3
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:29     .text.get_usb_descriptor:0000000000000004 .Loc.4
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:30     .text.get_usb_descriptor:0000000000000004 .Loc.5
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:31     .text.get_usb_descriptor:0000000000000004 .Loc.6
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:44     .text.get_usb_descriptor:0000000000000018 .Loc.7
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:47     .text.get_usb_descriptor:000000000000001c .Loc.8
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:53     .text.get_usb_descriptor:0000000000000022 .Loc.9
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:60     .text.get_usb_descriptor:000000000000002e .Loc.10
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:61     .text.get_usb_descriptor:000000000000002e .Loc.11
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:65     .text.get_usb_descriptor:0000000000000032 .Loc.12
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:321    .progmem.data.KeyboardReport:0000000000000000 KeyboardReport
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:69     .text.get_usb_descriptor:0000000000000036 .Loc.13
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:75     .text.get_usb_descriptor:000000000000003c .Loc.14
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:78     .text.get_usb_descriptor:000000000000003e .Loc.15
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:86     .text.get_usb_descriptor:000000000000004c .Loc.16
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:88     .text.get_usb_descriptor:000000000000004c .Loc.17
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:90     .text.get_usb_descriptor:000000000000004c .Loc.18
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:91     .text.get_usb_descriptor:000000000000004c .Loc.19
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:92     .text.get_usb_descriptor:000000000000004c .Loc.20
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:199    .progmem.data.ProductString:0000000000000000 ProductString
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:98     .text.get_usb_descriptor:0000000000000052 .Loc.21
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:100    .text.get_usb_descriptor:0000000000000052 .Loc.22
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:101    .text.get_usb_descriptor:0000000000000052 .Loc.23
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:103    .text.get_usb_descriptor:0000000000000052 .Loc.24
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:104    .text.get_usb_descriptor:0000000000000052 .Loc.25
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:105    .text.get_usb_descriptor:0000000000000052 .Loc.26
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:259    .progmem.data.LanguageString:0000000000000000 LanguageString
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:110    .text.get_usb_descriptor:0000000000000056 .Loc.27
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:113    .text.get_usb_descriptor:0000000000000056 .Loc.28
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:120    .text.get_usb_descriptor:0000000000000058 .Loc.29
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:123    .text.get_usb_descriptor:0000000000000058 .Loc.30
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:126    .text.get_usb_descriptor:000000000000005a .Loc.31
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:127    .text.get_usb_descriptor:000000000000005a .Loc.32
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:131    .text.get_usb_descriptor:000000000000005c .Loc.33
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:132    .text.get_usb_descriptor:000000000000005c .Loc.34
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:136    .text.get_usb_descriptor:0000000000000062 .Loc.35
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:138    .text.get_usb_descriptor:0000000000000062 .Loc.36
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:142    .text.get_usb_descriptor:0000000000000064 .Loc.37
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:143    .text.get_usb_descriptor:0000000000000064 .Loc.38
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:145    .text.get_usb_descriptor:0000000000000064 .Loc.39
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:146    .text.get_usb_descriptor:0000000000000064 .Loc.40
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:147    .text.get_usb_descriptor:0000000000000064 .Loc.41
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:243    .progmem.data.ManufacturerString:0000000000000000 ManufacturerString
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:153    .text.get_usb_descriptor:000000000000006a .Loc.42
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:155    .text.get_usb_descriptor:000000000000006a .Loc.43
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:156    .text.get_usb_descriptor:000000000000006a .Loc.44
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:160    .text.get_usb_descriptor:000000000000006e .Loc.45
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:267    .progmem.data.ConfigurationDescriptor:0000000000000000 ConfigurationDescriptor
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:164    .text.get_usb_descriptor:0000000000000072 .Loc.46
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:170    .text.get_usb_descriptor:0000000000000078 .Loc.47
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:174    .text.get_usb_descriptor:000000000000007c .Loc.48
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:302    .progmem.data.DeviceDescriptor:0000000000000000 DeviceDescriptor
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:178    .text.get_usb_descriptor:0000000000000080 .Loc.49
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:182    .text.get_usb_descriptor:0000000000000082 .Loc.50
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:186    .text.get_usb_descriptor:0000000000000086 .Loc.51
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:190    .text.get_usb_descriptor:000000000000008a .Loc.52
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:192    .text.get_usb_descriptor:000000000000008c L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:196    .text.get_usb_descriptor:000000000000008c L0
                     .debug_frame:0000000000000000 L0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:74     .text.get_usb_descriptor:000000000000003c .L2
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:52     .text.get_usb_descriptor:0000000000000022 .L3
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:169    .text.get_usb_descriptor:0000000000000078 .L10
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:181    .text.get_usb_descriptor:0000000000000082 .L11
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:130    .text.get_usb_descriptor:000000000000005c .L4
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:152    .text.get_usb_descriptor:000000000000006a .L5
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:43     .text.get_usb_descriptor:0000000000000018 .L13
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:141    .text.get_usb_descriptor:0000000000000064 .L7
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:97     .text.get_usb_descriptor:0000000000000052 .L8
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:109    .text.get_usb_descriptor:0000000000000056 .L14
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:1627   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:2499   .debug_ranges:0000000000000000 .Ldebug_ranges0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:2511   .debug_line:0000000000000000 .Ldebug_line0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:15     .text.get_usb_descriptor:0000000000000000 .LFB102
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:193    .text.get_usb_descriptor:000000000000008c .LFE102
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:2171   .debug_loc:0000000000000018 .LLST0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:2146   .debug_loc:0000000000000000 .LVUS0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:2283   .debug_loc:00000000000000e0 .LLST1
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:2270   .debug_loc:00000000000000d4 .LVUS1
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:2335   .debug_loc:0000000000000142 .LLST2
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:2310   .debug_loc:000000000000012a .LVUS2
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:2415   .debug_loc:00000000000001ea .LLST3
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:2404   .debug_loc:00000000000001e0 .LVUS3
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:2454   .debug_loc:0000000000000238 .LLST4
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:2447   .debug_loc:0000000000000232 .LVUS4
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:102    .text.get_usb_descriptor:0000000000000052 .LBB3
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:111    .text.get_usb_descriptor:0000000000000056 .LBE3
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:144    .text.get_usb_descriptor:0000000000000064 .LBB5
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:154    .text.get_usb_descriptor:000000000000006a .LBE5
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:2479   .debug_loc:000000000000026a .LLST5
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:2476   .debug_loc:0000000000000268 .LVUS5
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:14     .text.get_usb_descriptor:0000000000000000 .LVL0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:42     .text.get_usb_descriptor:0000000000000018 .LVL2
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:51     .text.get_usb_descriptor:0000000000000022 .LVL3
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:64     .text.get_usb_descriptor:0000000000000032 .LVL4
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:73     .text.get_usb_descriptor:000000000000003c .LVL6
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:77     .text.get_usb_descriptor:000000000000003e .LVL7
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:151    .text.get_usb_descriptor:000000000000006a .LVL15
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:159    .text.get_usb_descriptor:000000000000006e .LVL16
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:168    .text.get_usb_descriptor:0000000000000078 .LVL18
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:173    .text.get_usb_descriptor:000000000000007c .LVL19
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:180    .text.get_usb_descriptor:0000000000000082 .LVL21
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:185    .text.get_usb_descriptor:0000000000000086 .LVL22
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:27     .text.get_usb_descriptor:0000000000000004 .LVL1
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:68     .text.get_usb_descriptor:0000000000000036 .LVL5
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:129    .text.get_usb_descriptor:000000000000005c .LVL13
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:140    .text.get_usb_descriptor:0000000000000064 .LVL14
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:163    .text.get_usb_descriptor:0000000000000072 .LVL17
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:177    .text.get_usb_descriptor:0000000000000080 .LVL20
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:189    .text.get_usb_descriptor:000000000000008a .LVL23
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:87     .text.get_usb_descriptor:000000000000004c .LVL8
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:96     .text.get_usb_descriptor:0000000000000052 .LVL9
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:125    .text.get_usb_descriptor:000000000000005a .LVL12
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:119    .text.get_usb_descriptor:0000000000000058 .LVL11
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:399    .debug_info:0000000000000000 .Ldebug_info0
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:89     .text.get_usb_descriptor:000000000000004c .LBB2
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:99     .text.get_usb_descriptor:0000000000000052 .LBE2
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:112    .text.get_usb_descriptor:0000000000000056 .LBB4
/var/folders/xk/fjkh8m297bb3lq7fwx2mh0vh0000gq/T//ccKKZaNC.s:122    .text.get_usb_descriptor:0000000000000058 .LBE4

NO UNDEFINED SYMBOLS
